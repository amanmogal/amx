# Copyright (C) 2021 Intel Corporation
# SPDX-License-Identifier: Apache-2.0

import numpy as np
import pytest
from openvino.helpers import pack_data
from openvino.impl import Type


u1, u4, i4 = Type.u1, Type.u4, Type.i4


@pytest.mark.parametrize("unpacked, expected, ov_type", [
                ([0], [0], u1),
                ([1], [128], u1),
                ([0, 1], [64], u1),
                ([0, 0, 1], [32], u1),
                ([0, 0, 0, 1], [16], u1),
                ([0, 0, 0, 0, 1], [8], u1),
                ([0, 0, 0, 0, 0, 1], [4], u1),
                ([0, 0, 0, 0, 0, 0, 1], [2], u1),
                ([0, 0, 0, 0, 0, 0, 0, 1], [1], u1),

                ([0, 0, 0, 0, 0, 0, 0, 0], [0], u1),
                ([1, 0, 0, 0, 0, 0, 0, 0], [128], u1),
                ([1, 1, 0, 0, 0, 0, 0, 0], [192], u1),
                ([1, 1, 1, 0, 0, 0, 0, 0], [224], u1),
                ([1, 1, 1, 1, 0, 0, 0, 0], [240], u1),
                ([1, 1, 1, 1, 1, 0, 0, 0], [248], u1),
                ([1, 1, 1, 1, 1, 1, 0, 0], [252], u1),
                ([1, 1, 1, 1, 1, 1, 1, 0], [254], u1),
                ([1, 1, 1, 1, 1, 1, 1, 1], [255], u1),

                ([0], [0], u4),
                ([1], [16], u4),
                ([2], [32], u4),
                ([3], [48], u4),
                ([4], [64], u4),
                ([5], [80], u4),
                ([6], [96], u4),
                ([7], [112], u4),
                ([8], [128], u4),
                ([9], [144], u4),
                ([10], [160], u4),
                ([10], [160], u4),
                ([10], [160], u4),
                ([11], [176], u4),
                ([12], [192], u4),
                ([13], [208], u4),
                ([14], [224], u4),
                ([15], [240], u4),

                ([0, 15], [15], u4),
                ([1, 14], [30], u4),
                ([2, 13], [45], u4),
                ([3, 12], [60], u4),
                ([4, 11], [75], u4),
                ([5, 10], [90], u4),
                ([6, 9], [105], u4),
                ([7, 8], [120], u4),
                ([8, 7], [135], u4),
                ([9, 6], [150], u4),
                ([10, 5], [165], u4),
                ([11, 4], [180], u4),
                ([12, 3], [195], u4),
                ([13, 2], [210], u4),
                ([14, 1], [225], u4),
                ([15, 0], [240], u4),

                ([-8], [128], i4),
                ([-7], [144], i4),
                ([-6], [160], i4),
                ([-5], [176], i4),
                ([-4], [192], i4),
                ([-3], [208], i4),
                ([-2], [224], i4),
                ([-1], [240], i4),
                ([0], [0], i4),
                ([1], [16], i4),
                ([2], [32], i4),
                ([3], [48], i4),
                ([4], [64], i4),
                ([5], [80], i4),
                ([6], [96], i4),
                ([7], [112], i4),

                ([-8, 7], [135], i4),
                ([-7, 6], [150], i4),
                ([-6, 5], [165], i4),
                ([-5, 4], [180], i4),
                ([-4, 3], [195], i4),
                ([-3, 2], [210], i4),
                ([-2, 1], [225], i4),
                ([-1, 0], [240], i4),
                ([0, -1], [15], i4),
                ([1, -2], [30], i4),
                ([2, -3], [45], i4),
                ([3, -4], [60], i4),
                ([4, -5], [75], i4),
                ([5, -6], [90], i4),
                ([6, -7], [105], i4),
                ([7, -8], [120], i4),
])
def test_pack(unpacked, expected, ov_type):
    packed = pack_data(np.array(unpacked), ov_type)
    assert packed == expected
