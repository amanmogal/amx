// Copyright (C) 2018-2023 Intel Corporation
// SPDX-License-Identifier: Apache-2.0
//

#pragma once

#include <map>
#include <string>

#ifdef OPENVINO_STATIC_LIBRARY

#include "cpp_interfaces/interface/ie_iplugin_internal.hpp"
#include "openvino/core/extension.hpp"

// The Macro used to create exyensions for static library
#define OV_DEFINE_EXTENSION_CREATE_FUNCTION_DECLARATION(_OV_CREATE_EXTENSION_FUNC) \
    INFERENCE_EXTENSION_API(void)                                                  \
    _OV_CREATE_EXTENSION_FUNC(std::vector<::ov::Extension::Ptr>& ext)

@OV_PLUGINS_DECLARATIONS@

using CreateExtensionFunc = void(std::vector<::ov::Extension::Ptr>&);
struct Value {
    InferenceEngine::CreatePluginEngineFunc * m_create_plugin_func;
    CreateExtensionFunc * m_create_extension_func;
    std::map<std::string, std::string> m_default_config;
};

#else

struct Value {
    std::string m_plugin_path;
    std::map<std::string, std::string> m_default_config;
};

#endif

using Key = std::string;
using PluginsStaticRegistry = std::map<Key, Value>;


inline const std::map<Key, Value> getCompiledPluginsRegistry() {
@OV_PLUGINS_MAP_DEFINITION@
    return plugins_hpp;
}
