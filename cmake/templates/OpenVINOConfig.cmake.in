# Copyright (C) 2018-2021 Intel Corporation
# SPDX-License-Identifier: Apache-2.0
#
# FindOpenVINO
# ------
#
# Provides OpenVINO runtime for model creation and inference, frontend libraries
# to convert models from framework specific formats.
#
# The following components are supported:
#  * `Runtime`: OpenVINO C++ and C runtimes, IR frontend
#  * `ONNX`: OpenVINO ONNX frontend
#  * `PaddlePaddle`: OpenVINO PaddlePaddle frontend
#
# If no components are specified, all components are provided:
#
#   find_package(OpenVINO REQUIRED)
#
# If specific components are required:
#
#   find_package(OpenVINO REQUIRED COMPONENTS Runtime ONNX)
#
# Imported Targets:
# ------
#
#  Runtime targets:
#
#   `OpenVINO::Runtime`
#   The OpenVINO C++ Runtime Core & Inference
#
#   `OpenVINO::Runtime::C`
#   The OpenVINO C Inference Runtime
#
#  Frontend specific targets:
#
#   `OpenVINO::Frontend::Manager`
#   OpenVINO frontend manager
#
#   `OpenVINO::Frontend::IR`
#   IR FrontEnd target
#
#   `OpenVINO::Frontend::ONNX`
#   ONNX FrontEnd target (optional)
#
#   `OpenVINO::Frontend::PaddlePaddle`
#   PaddlePaddle FrontEnd target (optional)
#
# Result variables:
# ------
#
# The module sets the following variables in your project:
#
#   `OpenVINO_FOUND`
#   System has OpenVINO Runtime installed
#
#   `OpenVINO_Frontend_ONNX_FOUND`
#   OpenVINO ONNX frontend is available
#
#   `OpenVINO_Frontend_PaddlePaddle_FOUND`
#   OpenVINO PaddlePaddle frontend is available
#
#  OpenVINO version variables:
#
#   `OpenVINO_VERSION_MAJOR`
#   Major version component
# 
#   `OpenVINO_VERSION_MINOR`
#   minor version component
#
#   `OpenVINO_VERSION_PATCH`
#   Patch version component
#

@PACKAGE_INIT@

#
# Common functions
#

if(NOT DEFINED CMAKE_FIND_PACKAGE_NAME)
    set(CMAKE_FIND_PACKAGE_NAME OpenVINO)
    set(_need_package_name_reset ON)
endif()

# we have to use our own version of find_dependency because of support cmake 3.7
macro(_ov_find_dependency dep)
    set(cmake_fd_quiet_arg)
    if(${CMAKE_FIND_PACKAGE_NAME}_FIND_QUIETLY)
        set(cmake_fd_quiet_arg QUIET)
    endif()
    set(cmake_fd_required_arg)
    if(${CMAKE_FIND_PACKAGE_NAME}_FIND_REQUIRED)
        set(cmake_fd_required_arg REQUIRED)
    endif()

    get_property(cmake_fd_alreadyTransitive GLOBAL PROPERTY
        _CMAKE_${dep}_TRANSITIVE_DEPENDENCY)

    find_package(${dep} ${ARGN}
        ${cmake_fd_quiet_arg}
        ${cmake_fd_required_arg})

    if(NOT DEFINED cmake_fd_alreadyTransitive OR cmake_fd_alreadyTransitive)
        set_property(GLOBAL PROPERTY _CMAKE_${dep}_TRANSITIVE_DEPENDENCY TRUE)
    endif()

    if(NOT ${dep}_FOUND)
        set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE "${CMAKE_FIND_PACKAGE_NAME} could not be found because dependency ${dep} could not be found.")
        set(${CMAKE_FIND_PACKAGE_NAME}_FOUND False)
        return()
    endif()

    set(cmake_fd_required_arg)
    set(cmake_fd_quiet_arg)
endmacro()

function(_ov_target_no_deprecation_error)
    if(NOT MSVC)
        if(CMAKE_CXX_COMPILER_ID STREQUAL "Intel")
            set(flags "-diag-warning=1786")
        else()
            set(flags "-Wno-error=deprecated-declarations")
        endif()
        if(CMAKE_CROSSCOMPILING)
            set_target_properties(${ARGV} PROPERTIES
                                  INTERFACE_LINK_OPTIONS "-Wl,--allow-shlib-undefined")
        endif()

        set_target_properties(${ARGV} PROPERTIES INTERFACE_COMPILE_OPTIONS ${flags})
    endif()
endfunction()

#
# OpenVINO config
#

# need to store current PACKAGE_PREFIX_DIR, because it's overwritten by sub-package one
set(OV_PACKAGE_PREFIX_DIR "${PACKAGE_PREFIX_DIR}")

set(THREADING "@THREADING@")
if(THREADING STREQUAL "TBB" OR THREADING STREQUAL "TBB_AUTO" AND NOT TBB_FOUND)
    set_and_check(_tbb_dir "@PACKAGE_IE_TBB_DIR@")
    _ov_find_dependency(TBB
                        COMPONENTS tbb tbbmalloc
                        CONFIG
                        PATHS ${TBBROOT}/cmake
                              ${_tbb_dir}
                        NO_CMAKE_FIND_ROOT_PATH
                        NO_DEFAULT_PATH)
endif()

# TODO: remove in a new package structure
set_and_check(_ngraph_dir "@PACKAGE_IE_NGRAPH_DIR@")
_ov_find_dependency(ngraph
                    CONFIG
                    PATHS ${_ngraph_dir}
                    NO_CMAKE_FIND_ROOT_PATH
                    NO_DEFAULT_PATH)

# TODO: replace target
if(NOT TARGET inference_engine)
    set(_ov_as_external_package ON)
    include("${CMAKE_CURRENT_LIST_DIR}/OpenVINOTargets.cmake")
endif()

# mark components as available
foreach(comp inference_engine inference_engine_c_api)
    set(${CMAKE_FIND_PACKAGE_NAME}_${comp}_FOUND ON)
endforeach()

if(NOT ${CMAKE_FIND_PACKAGE_NAME}_FIND_COMPONENTS)
    set(${CMAKE_FIND_PACKAGE_NAME}_FIND_COMPONENTS inference_engine inference_engine_c_api)
endif()

unset(OpenVINO_LIBRARIES)
foreach(comp IN LISTS ${CMAKE_FIND_PACKAGE_NAME}_FIND_COMPONENTS)
    # check if the component is available
    if(${CMAKE_FIND_PACKAGE_NAME}_${comp}_FOUND)
        set(pcomp ${comp})
        if(_ov_as_external_package)
            set(pcomp IE::${comp})
        endif()

        list(APPEND OpenVINO_LIBRARIES ${pcomp})
    endif()
endforeach()

if(_ov_as_external_package)
    _ov_target_no_deprecation_error(${OpenVINO_LIBRARIES})
endif()
unset(_ov_as_external_package)

# restore PACKAGE_PREFIX_DIR
set(PACKAGE_PREFIX_DIR ${OV_PACKAGE_PREFIX_DIR})
unset(OV_PACKAGE_PREFIX_DIR)

check_required_components(${CMAKE_FIND_PACKAGE_NAME})

if(_need_package_name_reset)
    unset(CMAKE_FIND_PACKAGE_NAME)
    unset(_need_package_name_reset)
endif()
