// Copyright (C) 2018-2022 Intel Corporation
// SPDX-License-Identifier: Apache-2.0
//

#include <gtest/gtest.h>
#include <iostream>

#include "base_reference_test.hpp"
#include "openvino/op/constant.hpp"
#include "openvino/op/irdft.hpp"

using namespace reference_tests;
using namespace ov;

namespace {
struct IRDFTParams {
    template <class T>
    IRDFTParams(const Shape& input_shape,
                const Shape& expected_shape,
                const element::Type_t& input_type,
                const element::Type_t& expected_type,
                const std::vector<T>& input_value,
                const std::vector<T>& expected_value,
                const std::shared_ptr<op::v0::Constant>& axes,
                const std::shared_ptr<op::v0::Constant>& signal) {
        m_input_shape = input_shape;
        m_expected_shape = expected_shape;
        m_input_type = input_type;
        m_expected_type = expected_type;
        m_input_value = CreateTensor(input_type, input_value);
        m_expected_value = CreateTensor(expected_type, expected_value);
        m_axes = axes;
        m_signal = signal;
    }

    Shape m_input_shape;
    Shape m_expected_shape;
    element::Type_t m_input_type;
    element::Type_t m_expected_type;
    ov::Tensor m_input_value;
    ov::Tensor m_expected_value;
    std::shared_ptr<op::v0::Constant> m_axes;
    std::shared_ptr<op::v0::Constant> m_signal;
};

class ReferenceIRDFTLayerTest : public testing::TestWithParam<IRDFTParams>, public CommonReferenceTest {
public:
    void SetUp() override {
        auto params = GetParam();
        if (params.m_signal != NULL) {
            function = CreateFunctionWithSignal(params);
        } else {
            function = CreateFunction(params);
        }

        inputData = {params.m_input_value};
        refOutData = {params.m_expected_value};
    }

    static std::string getTestCaseName(const testing::TestParamInfo<IRDFTParams>& obj) {
        const auto param = obj.param;
        std::ostringstream result;

        result << "input_shape1=" << param.m_input_shape << "; ";
        result << "output_shape=" << param.m_expected_shape << "; ";
        result << "input_type1=" << param.m_input_type << "; ";
        result << "output_type=" << param.m_expected_type << "; ";
        result << "transpose1=" << param.m_axes;

        return result.str();
    }

private:
    static std::shared_ptr<Model> CreateFunction(IRDFTParams& p) {
        auto in = std::make_shared<op::v0::Parameter>(p.m_input_type, p.m_input_shape);
        auto irdft = std::make_shared<op::v9::IRDFT>(in, p.m_axes);

        return std::make_shared<ov::Model>(irdft, ParameterVector{in});
    }

    static std::shared_ptr<Model> CreateFunctionWithSignal(IRDFTParams& p) {
        auto in = std::make_shared<op::v0::Parameter>(p.m_input_type, p.m_input_shape);
        auto irdft = std::make_shared<op::v9::IRDFT>(in, p.m_axes, p.m_signal);

        return std::make_shared<ov::Model>(irdft, ParameterVector{in});
    }
};

TEST_P(ReferenceIRDFTLayerTest, CompareWithHardcodedRefs) {
    Exec();
}

static const std::vector<float> input_data_1 = {
    4.6657147,   -1.1622906e-06, 0.21456887,    -0.14946258, -0.20476034,  -0.37063062,
    -0.31414136, 0.5099413,      -1.1779613,    0.07057127,  -0.64047664,  -1.0058284e-07,
    4.982774,    -1.1771917e-06, 0.6607505,     0.18829148,  -0.9772357,   1.4243596,
    0.8640026,   0.34923682,     0.33401352,    0.25859502,  -0.7548928,   8.940697e-08,
    5.9711604,   -1.4901161e-06, 0.5638976,     1.5429841,   -0.52065414,  0.24638398,
    -0.27140495, 0.5040715,      0.5360231,     0.3234269,   -0.36054826,  1.7508864e-07,
    4.7464237,   -1.2218952e-06, -0.29650804,   0.80609477,  -0.161426,    1.0022418,
    -0.50812817, 0.7967348,      0.4394225,     -0.1588624,  -1.3835809,   -7.4505806e-08,
    5.53836,     -1.7136335e-06, -0.38635445,   0.8284859,   -0.23278837,  -0.63777345,
    -0.93614054, 0.3215857,      -0.14075133,   -0.67071164, -1.4772836,   2.0861626e-07,
    5.0798974,   -1.5944242e-06, 0.056767445,   0.03468219,  -0.1497254,   -0.9672509,
    0.2603209,   0.69644475,     -0.9208536,    0.006730467, -1.7552528,   2.682209e-07,
    4.893558,    -1.6242266e-06, 0.6719861,     -0.13982919, 0.064845346,  -0.39896214,
    0.21785057,  -0.5099982,     -0.65526295,   1.4383471,   -0.52023906,  2.5331974e-07,
    6.687699,    -1.5497208e-06, -0.7423769,    0.09968524,  1.052381,     -0.21306956,
    0.5875206,   -0.3038844,     0.3991575,     -1.1895186,  0.17579001,   3.874302e-07,
    5.2818384,   -1.1026859e-06, 0.5087582,     0.106959194, 1.1816688,    -0.87592727,
    0.03740315,  0.5197907,      -1.3198637,    0.6398836,   0.22712436,   2.2351742e-08,
    5.0190897,   -1.5646219e-06, -0.087282926,  0.50819266,  -0.28002462,  0.29240948,
    -0.32303664, 0.38377762,     -0.0051696897, -0.99301195, -2.189299,    2.0861626e-07,
    5.0545654,   -1.5795231e-06, 0.9146397,     0.83839166,  0.870533,     0.17405808,
    -0.56308234, -0.7806684,     0.26397777,    0.6880482,   -1.4183462,   2.682209e-07,
    5.479953,    -1.2665987e-06, 0.49444157,    0.7534672,   -0.76784146,  -0.4507342,
    0.88815784,  0.6985409,      -0.2727425,    -0.25027415, -0.7328796,   2.682209e-07,
    4.1296124,   -5.662441e-07,  -0.46133032,   0.30635798,  -0.18225375,  0.42515472,
    -0.5484285,  0.9704039,      -0.35255045,   0.17549685,  0.8870368,    -3.1292439e-07,
    4.8632016,   -1.8924475e-06, -0.6926452,    0.025076404, -0.039108217, -1.7492937,
    -0.8120377,  -0.85315156,    -0.0022608787, 0.45002514,  -1.1024668,   3.501773e-07,
    5.4715447,   -1.4901161e-06, 1.1176248,     -0.2109062,  -0.27492502,  0.08983741,
    1.1903813,   -1.007312,      -0.20150042,   -0.83919466, -0.23939973,  4.917383e-07,
    5.1267176,   -9.983778e-07,  -0.44803134,   -0.8066604,  -0.3435102,   -0.41692197,
    -0.22457689, -0.1076939,     -0.29129186,   -1.1880502,  0.9255183,    -1.6391277e-07,
    3.8495903,   -5.5134296e-07, 0.09505272,    -0.12751618, -1.1264827,   0.5068884,
    -1.055237,   -0.19516481,    -0.34035242,   -0.15379356, 1.2655814,    -2.6077032e-07,
    4.4372616,   -9.23872e-07,   -0.72962606,   -0.23475963, -0.04278487,  1.1032158,
    -0.558924,   -0.5300043,     1.0578637,     -0.2466627,  0.44617313,   -7.8231096e-08,
    5.5374002,   -1.4156103e-06, 0.016273111,   -0.5989829,  -0.19913958,  0.013256833,
    1.8512837,   0.14526272,     -0.39700353,   -0.07573915, 0.23181,      2.9429793e-07,
    4.989425,    -1.4901161e-06, 1.0391837,     0.16554561,  -0.22647032,  -1.0689808,
    -0.84556,    -0.82779336,    0.9430445,     0.37618563,  0.4684292,    -9.685755e-08};

static const std::vector<float> expected_irdft1d_results_1 = {
    0.10606491,  0.7454715,   0.57231355,  0.4582412,   0.3847059,   0.27398932, 0.66796243, 0.395475,
    0.2815729,   0.7799197,   0.59909415,  0.12294636,  0.38957402,  0.97498834, 0.46759892, 0.14017141,
    0.04206858,  0.7279963,   0.61560553,  0.9027321,   0.6226334,   0.2601217,  0.5555177,  0.40498647,
    0.14175586,  0.57774633,  0.52652127,  0.9385691,   0.9588788,   0.9844318,  0.23095612, 0.09707925,
    0.24574867,  0.6907577,   0.1974319,   0.8295272,   0.34612727,  0.51401484, 0.66115797, 0.9336245,
    0.06690067,  0.7468897,   0.39028263,  0.53575844,  0.060429193, 0.8913558,  0.77787375, 0.6701197,
    0.7350527,   0.6636995,   0.18176624,  0.8629976,   0.45142895,  0.6497297,  0.159372,   0.40598175,
    0.7988516,   0.7291543,   0.07090418,  0.7697132,   0.4972157,   0.7669217,  0.67975855, 0.13026066,
    0.6587437,   0.24532892,  0.24545169,  0.83795583,  0.105490535, 0.7264323,  0.94568557, 0.7216649,
    0.14389831,  0.7930531,   0.70895344,  0.9724701,   0.9775157,   0.49999878, 0.65569246, 0.26876843,
    0.63248956,  0.85201293,  0.5689624,   0.023386303, 0.5546464,   0.36860028, 0.9603114,  0.39123482,
    0.0380728,   0.89212376,  0.14387614,  0.63858676,  0.10003748,  0.8906635,  0.06681054, 0.7458642,
    0.45452347,  0.54724604,  0.6496482,   0.7818356,   0.6608355,   0.77711326, 0.24588613, 0.013456763,
    0.355845,    0.80388206,  0.027993264, 0.73677206,  0.52755004,  0.9052324,  0.54311025, 0.5367805,
    0.4131242,   0.7752338,   0.109669454, 0.13664648,  0.7828739,   0.9083969,  0.5247593,  0.7493595,
    0.19275227,  0.007190853, 0.6087981,   0.344136,    0.46909887,  0.41924855, 0.7072913,  0.19932869,
    0.5303847,   0.651384,    0.06686331,  0.9717932,   0.65702224,  0.11786682, 0.3154073,  0.88923013,
    0.5564087,   0.91047823,  0.28466642,  0.0934668,   0.88953066,  0.9919338,  0.18322521, 0.8185455,
    0.566391,    0.014207997, 0.29673064,  0.6347744,   0.6801958,   0.39601147, 0.34374171, 0.7216888,
    0.6152569,   0.76679546,  0.5860851,   0.4276813,   0.79339284,  0.13130653, 0.68764234, 0.053128112,
    0.02611321,  0.2982243,   0.7618372,   0.3331729,   0.5468192,   0.15707079, 0.28592056, 0.15286565,
    0.9368963,   0.350671,    0.4336494,   0.08934934,  0.41172776,  0.5850259,  0.70730376, 0.8598349,
    0.088788144, 0.26711187,  0.8002491,   0.19422275,  0.8312039,   0.5198718,  0.40111357, 0.98375803,
    0.77703434,  0.037818834, 0.704231,    0.689808,    0.17102319,  0.42153922, 0.7278252,  0.8030207,
    0.9101717,   0.0199644,   0.13768466,  0.55669,     0.17991355,  0.6720098,  0.7733328,  0.20881335};

static const std::vector<float> input_data_2 = {
    2.266797,  -8.195639e-08,  -0.37842733,  -0.41015846,  -0.48980892,  -0.10356337,
    2.5542018, -2.2351742e-08, -0.3223713,   0.671882,     0.54300576,   -0.35418037,
    1.985015,  -2.2351742e-08, -0.030243821, -0.20105253,  0.59431964,   0.07358998,
    1.4619737, -7.450581e-09,  -0.4356845,   0.35701087,   0.28208786,   -0.36424285,
    1.8002605, -1.1920929e-07, -0.43280697,  -0.56735414,  -0.30007166,  -0.541847,
    2.3052943, -1.2293458e-07, -0.39316025,  -0.5526293,   -0.30507135,  -0.6021758,
    2.7329001, -6.7055225e-08, 0.28245124,   -0.42586988,  -0.40586215,  0.4590181,
    3.3132548, -5.9604645e-08, 0.6297612,    0.3694744,    0.077824846,  -0.6248544,
    2.6314974, -2.9802322e-08, 0.58795106,   -0.60349375,  -0.3224758,   0.34408605,
    1.8399743, -9.685755e-08,  -0.43963802,  -0.079073176, -0.120658875, -1.0880115,
    2.0531366, -4.4703484e-08, 0.80112594,   -0.53726834,  -0.17560546,  -0.026561722,
    2.3779182, -9.685755e-08,  -0.21852754,  -0.19336401,  0.38734403,   -0.5954362,
    1.6219761, 7.450581e-09,   -0.43100592,  0.28373614,   0.101898566,  0.52321124,
    2.128953,  -1.4901161e-07, -0.1622684,   -0.94116735,  -0.7350497,   0.12695336,
    3.449626,  -8.940697e-08,  0.56062996,   -0.031283244, -0.06161648,  -0.8543532,
    3.033568,  -8.195639e-08,  -0.37023768,  -0.03989461,  -0.28719214,  -0.22382751,
    1.9661667, -1.4901161e-08, -0.59863573,  -0.015534669, -0.31916466,  0.55380434,
    2.227056,  -5.2154064e-08, -0.12656188,  0.6895717,    0.097157195,  0.19840825,
    3.5129817, -2.1234155e-07, 0.11158541,   0.5870459,    0.20993343,   -0.40297145,
    2.5986667, 0.0,            0.26602313,   -1.1560227,   0.2542065,    0.45556274};

static const std::vector<float> expected_irdft1d_results_2 = {
    0.10606494, 0.7454715,   0.5723136,   0.45824113,  0.38470596,  0.59909415,  0.12294642,
    0.38957405, 0.9749881,   0.46759906,  0.62263334,  0.26012173,  0.5555176,   0.40498644,
    0.14175594, 0.23095612,  0.097079255, 0.24574867,  0.6907576,   0.197432,    0.066900685,
    0.7468896,  0.39028254,  0.5357583,   0.0604293,   0.18176621,  0.8629975,   0.45142898,
    0.64972955, 0.15937212,  0.49721566,  0.7669216,   0.6797584,   0.13026062,  0.6587438,
    0.9456854,  0.7216646,   0.14389832,  0.7930529,   0.7089534,   0.6324895,   0.85201263,
    0.5689623,  0.023386315, 0.55464643,  0.1438762,   0.63858664,  0.10003753,  0.8906633,
    0.06681056, 0.66083544,  0.7771131,   0.24588616,  0.013456774, 0.35584506,  0.54311025,
    0.53678054, 0.41312417,  0.7752337,   0.10966951,  0.19275223,  0.007190934, 0.608798,
    0.344136,   0.46909887,  0.06686333,  0.971793,    0.65702224,  0.117866985, 0.31540743,
    0.8895306,  0.99193364,  0.18322523,  0.81854534,  0.5663911,   0.34374166,  0.72168875,
    0.6152569,  0.7667953,   0.58608514,  0.026113158, 0.2982243,   0.76183707,  0.3331729,
    0.5468192,  0.43364936,  0.089349344, 0.41172776,  0.5850257,   0.7073037,   0.8312039,
    0.5198719,  0.4011136,   0.9837578,   0.7770344,   0.72782516,  0.8030205,   0.9101716,
    0.019964492, 0.13768478};

static const std::vector<float> input_data_3 = {
    4.665715,    -1.6093254e-06, -0.5430559,   -0.5752678,     -0.37596112,  -1.1571281,
    -0.46793216, -0.94566363,    0.6854232,    -0.3444838,     -0.674704,    0.5946392,
    -0.64047587, 1.3560057e-06,  4.9827743,    -1.7434359e-06, -0.43517,     -0.049020194,
    -1.4773891,  -1.0811031,     1.2506557,    0.5371344,      1.2869358,    -0.14998645,
    0.8555907,   0.3693859,      -0.7548918,   1.5944242e-06,  5.971161,     -1.5199184e-06,
    -1.2643411,  0.85635287,     -0.1801207,   -1.7264944,     0.6412285,    -0.4787441,
    0.82227707,  0.65098876,     0.9114491,    0.40323836,     -0.36054718,  1.2852252e-06,
    4.7464237,   -1.66893e-06,   -1.5010594,   0.2253451,      -0.87915635,  -0.4252541,
    0.4976693,   -0.6554581,     0.928985,     0.8035921,      0.6578763,    -0.15220329,
    -1.3835799,  1.0430813e-06,  5.5383606,    -1.4901161e-06, -1.619024,    -0.10987502,
    0.20661727,  -1.3774645,     -0.3057741,   -1.0960662,     0.2971667,    0.46700704,
    -0.20812088, -0.602368,      -1.4772825,   9.3877316e-07,  5.0798974,    -1.758337e-06,
    -0.7421876,  -0.61749315,    0.21938956,   -1.3415859,     -0.838238,    -0.6598083,
    1.0601404,   -0.7129184,     -0.27083004,  0.31763482,     -1.7552516,   1.4677644e-06,
    4.893558,    -1.4975667e-06, -0.06445231,  -0.55879503,    0.08908144,   -1.2869594,
    0.33623943,  -0.7704663,     -0.047739983, -1.0678453,     0.48350462,   1.5768427,
    -0.52023804, 1.1697412e-06,  6.687699,     -1.3113022e-06, -1.292419,    -1.2920969,
    1.2041754,   -0.2943018,     1.1889167,    -0.66985166,    1.1336832,    -0.13731277,
    0.008011267, -0.9506076,     0.1757915,    1.1026859e-06,  5.2818394,    -1.4305115e-06,
    -0.25987166, -0.48605326,    0.90237427,   -0.8028362,     -0.3040653,   -1.6981151,
    1.1215456,   -0.7120959,     -0.4195284,   1.3941492,      0.22712523,   8.046627e-07,
    5.01909,     -1.7881393e-06, -1.1856917,   -0.10931289,    -0.5164983,   -0.9724103,
    0.30577338,  -0.72837675,    0.89680094,   0.21036407,     -0.052024096, -0.9455472,
    -2.1892984,  1.4305115e-06,  5.054565,     -1.5050173e-06, -0.3471575,   0.40542153,
    0.36438322,  -0.9765247,     1.2703501,    -1.7359983,     -0.1160066,   -0.25323528,
    0.9753329,   0.5339062,      -1.418345,    9.834766e-07,   5.4799523,    -1.7285347e-06,
    -0.7905842,  0.093313254,    0.068526804,  -1.8504739,     -0.01845923,  0.26084417,
    1.5358877,   -0.4159652,     0.089752786,  0.089908056,    -0.7328786,   1.4007092e-06,
    4.129612,    -9.536743e-07,  -1.2393575,   -0.28046644,    -0.58673245,  -0.39608067,
    -0.12385368, -0.53435826,    0.77853805,   0.7645384,      -0.18040559,  0.6678516,
    0.88703763,  8.046627e-07,   4.8632016,    -1.0430813e-06, -1.1780663,   -1.0952923,
    1.1691413,   -1.4023741,     -0.546494,    -0.92614484,    -1.1796933,   -0.31762218,
    0.25592417,  0.0959474,      -1.1024656,   1.013279e-06,   5.471545,     -1.6987324e-06,
    0.35812324,  -0.66833705,    0.07725692,   -1.6537004,     1.6561611,    0.051166296,
    0.865453,    -1.1392289,     -0.23588535,  -0.5480979,     -0.2393986,   1.3411045e-06,
    5.126718,    -9.23872e-07,   -0.6379836,   -1.6675751,     0.013057679,  -0.9891113,
    0.20881936,  -0.30439606,    0.37222707,   0.25244698,     -0.9197892,   -0.77782196,
    0.9255192,   1.1101365e-06,  3.8495903,    -7.4505806e-07, -0.63088936,  -0.4556699,
    -1.1905057,  -1.2522144,     0.46207082,   -0.31992733,    -0.4309795,   0.74295896,
    -0.6106033,  0.18823686,     1.2655822,    7.748604e-07,   4.4372616,    -7.0780516e-07,
    -1.1016369,  -1.0079124,     -0.6083025,   -0.0011255145,  1.4406854,    -0.2912693,
    -0.26610214, 0.87299407,     0.69553405,   -0.45576566,    0.44617438,   7.4505806e-07,
    5.5374007,   -1.5944242e-06, -0.32642078,  -1.3683549,     0.079301864,  -0.83741367,
    0.67391664,  0.69433576,     1.6423957,    -1.1923066,     0.0334223,    0.37603495,
    0.23181117,  1.4156103e-06,  4.9894247,    -7.748604e-07,  0.1788401,    -0.39274544,
    0.78422666,  -2.1340246,     0.5487572,    -0.8765497,     -0.7899384,   0.5434137,
    0.91613716,  0.08274247,     0.46843058,   8.34465e-07};

static const std::vector<float> expected_irdft1d_results_3 = {
    0.80091053, 1.548053,   1.3439665,  0.97278523, 0.65876126, 1.6395509,  1.0939313,
    1.5905306,  0.81558955, 1.1096439,  2.0799308,  1.9659967,  0.21628714, 1.2937224,
    1.7173465,  1.5190675,  0.62673247, 1.3878733,  2.2457566,  1.2779983,  0.9537279,
    1.5238736,  1.6959155,  0.9063804,  1.2134336,  1.4805167,  1.277886,   0.9217217,
    1.3267591,  2.0169291,  2.619178,   0.7248324,  1.4161175,  1.3378929,  1.6759893,
    0.85183966, 0.53280216, 1.4385536,  1.7184939,  1.3292406,  1.1811583,  0.9698347,
    1.5283158,  1.3752562,  0.99182767, 1.3061998,  1.7824118,  1.399513,   0.26604116,
    1.3193192,  1.5053986,  1.0388529,  0.9190526,  1.4711612,  2.0971189,  0.37586892,
    1.5662622,  1.6827406,  1.208139,   1.0144035,  0.96595216, 2.1122026,  1.6039357,
    0.44462752, 0.34932646, 1.487859,   0.9802158,  1.0321891,  0.4064213,  1.7653472,
    1.5080582,  0.75743484, 1.2409652,  2.0487022,  1.567386,   0.68034726, 1.5328329,
    1.2476723,  1.3539927,  0.8549268};

static const std::vector<float> input_data_4 = {
    52.8665,      -2.9623508e-05, 1.1642078,      3.826082,    -0.22771922,   -0.49822173,    -0.3857528,
    3.2676966,    -2.5112464,     -0.27454787,    -8.678656,   3.7550926e-06, -0.818072,      0.8330209,
    3.4618711,    -0.2419473,     1.7408192,      5.744002,    1.8477443,     2.039329,       0.3268112,
    -2.7421296,   0.6809025,      1.7613728,      -2.294264,   -0.8984407,    -0.2868184,     -3.2426705,
    -0.801461,    -0.58971727,    -1.463435,      -2.5413132,  0.116907075,   -0.5013529,     -2.8377397,
    -2.8455539,   -0.13475686,    -1.3145845,     -2.2820292,  -0.199,        -0.056986623,   0.12560216,
    -0.589707,    -1.7577857,     -0.5274223,     -1.0395792,  0.53813136,    -1.7159984,     0.22503978,
    2.902198,     -1.8643543,     -1.8789856,     2.1722724,   -2.068454,     0.59446484,     0.6067899,
    1.5525781,    1.7612485,      1.1877432,      -0.48152098, -0.16525066,   1.5497208e-06,  1.9815066,
    0.55218977,   0.80434155,     -3.575598,      -2.1471107,  -0.57691807,   -3.004384,      3.8775828,
    3.1358109,    -6.2584877e-07, 0.22504184,     -2.9021916,  1.0378464,     0.9877456,      0.38395065,
    -1.6089694,   -0.5107449,     1.8621777,      -4.960479,   -1.8983803,    1.187743,       0.48151842,
    -0.1347583,   1.3145843,      -0.9968031,     -1.3782079,  0.9922035,     1.6614089,      -0.83039653,
    -0.043888614, 1.9431384,      -1.6448143,     0.5381324,   1.7159982,     -2.2942696,     0.8984335,
    1.3057998,    -0.26607463,    -3.2994738,     -1.9240448,  1.4963659,     2.8365738,      -4.691832,
    1.2995429,    -2.8377357,     2.8455553,      -0.8180722,  -0.8330165,    -1.3755352,     0.34623986,
    -3.7555497,   -0.9723124,     -1.1528367,     -0.593254,   -0.023679793,  1.8681414,      0.6809023,
    -1.7613728,   48.939255,      -2.4735928e-05, 1.3455832,   0.11001387,    -2.3319814,     -1.3735183,
    -0.6780232,   -2.4875786,     0.40718403,     -1.0639579,  0.7314569,     -1.2665987e-07, 0.97006464,
    -0.30789328,  3.3290033,      2.7749023,      -0.7520597,  -0.98800826,   1.3100916,      1.1514524,
    1.1085359,    4.348257,       -2.839456,      2.4404035,   0.9518837,     2.1538901,      3.8438358,
    2.410589,     3.0649068,      0.95690995,     2.2213395,   0.66509914,    -0.4409917,     -0.37408838,
    -0.6316552,   -1.5842111,     -0.72352415,    -2.5862057,  0.2678757,     0.610149,       2.9564474,
    0.08470708,   -2.0889034,     -8.370071,      -0.16373271, 2.0413866,     -3.3811545,     2.0487003,
    0.0316903,    -1.078939,      -2.5515578,     -0.16135174, -0.17406325,   1.2709827,      -0.67006403,
    -1.6342779,   0.42163712,     2.1418998,      -0.96614444, 1.9175051,     -0.8538456,     2.8014183e-06,
    2.0189362,    0.30467552,     0.5074463,      3.7919073,   2.427857,      0.7526233,      -2.4620402,
    0.65359443,   0.7219074,      -2.3841858e-07, 0.03169757,  1.0789458,     -2.1129081,     -1.0250417,
    4.8181386,    -0.39162922,    -1.2349386,     1.8470186,   -0.49495277,   -1.5516026,     -0.96614635,
    -1.9175065,   -0.7235237,     2.5862021,      0.677946,    2.0370173,     -0.29536027,    0.6505451,
    -2.8572361,   2.3176546,      3.4459226,      1.1869265,   -3.3811545,    -2.048697,      0.95187366,
    -2.1538982,   1.808088,       -1.1755496,     -2.7418838,  -1.6770658,    -3.5766084,     -2.8320727,
    -0.02944839,  -1.6522555,     -0.63165283,    1.5842092,   0.9700667,     0.30789307,     0.5195943,
    2.4985125,    3.6537378,      -0.5842519,     -0.4843334,  0.78346854,    0.84766304,     1.1503224,
    -2.839459,    -2.440402};

static const std::vector<float> expected_irdft2d_results_1 = {
    0.106065355, 0.7454709,    0.5723129,   0.45824066,  0.384706,    0.27398905, 0.6679619,  0.39547434,
    0.2815724,   0.779919,     0.59909385,  0.122946456, 0.38957337,  0.97498655, 0.46759892, 0.14017127,
    0.04206834,  0.72799486,   0.61560476,  0.9027304,   0.6226336,   0.2601218,  0.5555171,  0.4049862,
    0.14175594,  0.57774574,   0.52652067,  0.9385676,   0.958878,    0.9844308,  0.2309568,  0.0970796,
    0.24574815,  0.6907565,    0.19743192,  0.8295261,   0.3461272,   0.5140136,  0.66115695, 0.93362343,
    0.06690116,  0.74688905,   0.39028272,  0.53575796,  0.060429227, 0.89135474, 0.77787286, 0.67011875,
    0.73505205,  0.6636992,    0.18176568,  0.8629964,   0.4514285,   0.6497283,  0.15937214, 0.40598106,
    0.7988508,   0.72915316,   0.07090413,  0.76971227,  0.49721542,  0.7669206,  0.6797579,  0.13026048,
    0.6587432,   0.24532847,   0.24545121,  0.83795464,  0.10549038,  0.72643167, 0.94568396, 0.72166353,
    0.14389817,  0.79305094,   0.7089523,   0.9724684,   0.9775141,   0.49999753, 0.6556916,  0.2687679,
    0.6324893,   0.85201234,   0.5689621,   0.023386242, 0.5546462,   0.36860004, 0.9603104,  0.3912346,
    0.038073156, 0.8921232,    0.14387667,  0.63858616,  0.10003737,  0.8906622,  0.06681097, 0.74586314,
    0.4545233,   0.54724485,   0.6496472,   0.7818348,   0.6608358,   0.77711284, 0.24588637, 0.0134570245,
    0.35584468,  0.8038809,    0.027993381, 0.7367708,   0.52754945,  0.90523165, 0.54310995, 0.5367796,
    0.41312343,  0.7752323,    0.10966998,  0.13664615,  0.7828726,   0.9083951,  0.524759,   0.7493586,
    0.19275239,  0.0071907635, 0.60879755,  0.34413564,  0.4690983,   0.4192482,  0.70729065, 0.1993285,
    0.5303842,   0.65138334,   0.06686333,  0.97179186,  0.657022,    0.11786719, 0.3154068,  0.8892283,
    0.55640805,  0.9104763,    0.28466636,  0.093467236, 0.88953,     0.9919328,  0.18322526, 0.8185441,
    0.56639117,  0.014208457,  0.29673028,  0.6347738,   0.68019533,  0.39601144, 0.34374115, 0.72168803,
    0.61525595,  0.76679367,   0.5860848,   0.42768106,  0.7933919,   0.13130645, 0.68764144, 0.05312841,
    0.026113434, 0.2982238,    0.7618365,   0.3331724,   0.5468184,   0.15707079, 0.28592035, 0.15286529,
    0.9368952,   0.35067078,   0.43364897,  0.089348935, 0.41172677,  0.58502454, 0.7073026,  0.85983366,
    0.08878795,  0.2671109,    0.8002475,   0.19422255,  0.83120316,  0.5198712,  0.40111288, 0.98375624,
    0.77703446,  0.03781964,   0.7042304,   0.68980736,  0.17102323,  0.42153904, 0.7278248,  0.80301994,
    0.91017085,  0.019965423,  0.13768451,  0.556689,    0.17991383,  0.6720085,  0.7733324,  0.20881362};

template<class T>
static std::vector<T> convert(const std::vector<float>& v) {
    if (v.empty()) {
        return std::vector<T>();
    }

    size_t num_of_elems = v.size();
    std::vector<T> converted(num_of_elems);
    for (size_t i = 0; i < num_of_elems; ++i) {
        converted[i] = static_cast<T>(v[i]);
    }
    return converted;
}

template <class T>
static std::vector<T> convert(const std::vector<float16>& v) {
    if (v.empty()) {
        return std::vector<T>();
    }

    size_t num_of_elems = v.size();
    std::vector<T> converted(num_of_elems);
    for (size_t i = 0; i < num_of_elems; ++i) {
        converted[i] = static_cast<T>(v[i]);
    }
    return converted;
}

template <class T>
static std::vector<T> convert(const std::vector<bfloat16>& v) {
    if (v.empty()) {
        return std::vector<T>();
    }

    size_t num_of_elems = v.size();
    std::vector<T> converted(num_of_elems);
    for (size_t i = 0; i < num_of_elems; ++i) {
        converted[i] = static_cast<T>(v[i]);
    }
    return converted;
}

template <element::Type_t ET>
std::vector<IRDFTParams> generateParamsForIRDFT() {
    std::vector<IRDFTParams> params{
        // irdft1d_eval
        IRDFTParams(Shape{2, 10, 6, 2},
                    Shape{2, 10, 10},
                    ET,
                    ET,
                    input_data_1,
                    expected_irdft1d_results_1,
                    op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{1}, {2}),
                    NULL),
        // irdft1d_eval_1
        IRDFTParams(Shape{2, 10, 6, 2},
                    Shape{2, 10, 10},
                    ET,
                    ET,
                    input_data_1,
                    expected_irdft1d_results_1,
                    op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{1}, {-1}),
                    NULL),
        // irdft1d_eval_signal_size_0
        IRDFTParams(Shape{2, 10, 6, 2},
                    Shape{2, 10, 10},
                    ET,
                    ET,
                    input_data_1,
                    expected_irdft1d_results_1,
                    op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{1}, {2}),
                    op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{1}, {10})),
        // irdft1d_eval_signal_size_0_1
        IRDFTParams(Shape{2, 10, 6, 2},
                    Shape{2, 10, 10},
                    ET,
                    ET,
                    input_data_1,
                    expected_irdft1d_results_1,
                    op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{1}, {2}),
                    op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{1}, {-1})),
        // irdft1d_eval_signal_size_1
        IRDFTParams(Shape{2, 10, 3, 2},
                    Shape{2, 10, 5},
                    ET,
                    ET,
                    input_data_2,
                    expected_irdft1d_results_2,
                    op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{1}, {2}),
                    op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{1}, {5})),
        // irdft1d_eval_signal_size_1_1
        IRDFTParams(Shape{2, 10, 3, 2},
                    Shape{2, 10, 5},
                    ET,
                    ET,
                    input_data_2,
                    expected_irdft1d_results_2,
                    op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{1}, {-1}),
                    op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{1}, {5})),
        // irdft1d_eval_signal_size_2
        IRDFTParams(Shape{2, 10, 7, 2},
                    Shape{2, 10, 4},
                    ET,
                    ET,
                    input_data_3,
                    expected_irdft1d_results_3,
                    op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{1}, {2}),
                    op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{1}, {4})),
        // irdft1d_eval_signal_size_2_1
        IRDFTParams(Shape{2, 10, 7, 2},
                    Shape{2, 10, 4},
                    ET,
                    ET,
                    input_data_3,
                    expected_irdft1d_results_3,
                    op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{1}, {-1}),
                    op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{1}, {4})),
        // irdft2d_eval_1
        IRDFTParams(Shape{2, 10, 6, 2},
                    Shape{2, 10, 10},
                    ET,
                    ET,
                    input_data_4,
                    expected_irdft2d_results_1,
                    op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{2}, {1, 2}),
                    NULL),
//        // rdft2d_eval_1_positive_negative_axes
//        IRDFTParams(Shape{2, 10, 10},
//                   Shape{2, 10, 6, 2},
//                   ET,
//                   ET,
//                   input_data,
//                   expected_rdft2d_results,
//                   op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{2}, {1, -1}),
//                   NULL),
//        // rdft2d_eval_1_negative_positive_axes
//        IRDFTParams(Shape{2, 10, 10},
//                   Shape{2, 10, 6, 2},
//                   ET,
//                   ET,
//                   input_data,
//                   expected_rdft2d_results,
//                   op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{2}, {-2, 2}),
//                   NULL),
//        // rdft2d_eval_1_negative_negative_axes
//        IRDFTParams(Shape{2, 10, 10},
//                   Shape{2, 10, 6, 2},
//                   ET,
//                   ET,
//                   input_data,
//                   expected_rdft2d_results,
//                   op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{2}, {-2, -1}),
//                   NULL),
//        // rdft2d_eval_1_signal_size_0_s10_10
//        IRDFTParams(Shape{2, 10, 10},
//                   Shape{2, 10, 6, 2},
//                   ET,
//                   ET,
//                   input_data,
//                   expected_rdft2d_results,
//                   op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{2}, {1, 2}),
//                   op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{2}, {10, 10})),
//        // rdft2d_eval_1_signal_size_0_s10_10_positive_negative_axes
//        IRDFTParams(Shape{2, 10, 10},
//                   Shape{2, 10, 6, 2},
//                   ET,
//                   ET,
//                   input_data,
//                   expected_rdft2d_results,
//                   op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{2}, {1, -1}),
//                   op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{2}, {10, 10})),
//        // rdft2d_eval_1_signal_size_0_s10_10_negative_positive_axes
//        IRDFTParams(Shape{2, 10, 10},
//                   Shape{2, 10, 6, 2},
//                   ET,
//                   ET,
//                   input_data,
//                   expected_rdft2d_results,
//                   op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{2}, {-2, 2}),
//                   op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{2}, {10, 10})),
//        // rdft2d_eval_1_signal_size_0_s10_10_negative_negative_axes
//        IRDFTParams(Shape{2, 10, 10},
//                   Shape{2, 10, 6, 2},
//                   ET,
//                   ET,
//                   input_data,
//                   expected_rdft2d_results,
//                   op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{2}, {-2, -1}),
//                   op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{2}, {10, 10})),
//        // rdft2d_eval_1_signal_size_0_s10_m1
//        IRDFTParams(Shape{2, 10, 10},
//                   Shape{2, 10, 6, 2},
//                   ET,
//                   ET,
//                   input_data,
//                   expected_rdft2d_results,
//                   op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{2}, {1, 2}),
//                   op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{2}, {10, -1})),
//        // rdft2d_eval_1_signal_size_0_sm1_10
//        IRDFTParams(Shape{2, 10, 10},
//                   Shape{2, 10, 6, 2},
//                   ET,
//                   ET,
//                   input_data,
//                   expected_rdft2d_results,
//                   op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{2}, {1, 2}),
//                   op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{2}, {-1, 10})),
//        // rdft2d_eval_1_signal_size_0_sm1_m1
//        IRDFTParams(Shape{2, 10, 10},
//                   Shape{2, 10, 6, 2},
//                   ET,
//                   ET,
//                   input_data,
//                   expected_rdft2d_results,
//                   op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{2}, {1, 2}),
//                   op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{2}, {-1, -1})),
//        // rdft2d_eval_2_signal_size
//        IRDFTParams(Shape{2, 10, 10},
//                   Shape{2, 5, 7, 2},
//                   ET,
//                   ET,
//                   input_data,
//                   expected_rdft2d_results_2,
//                   op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{2}, {1, 2}),
//                   op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{2}, {5, 12})),
//        // rdft2d_eval_2_signal_size_positive_negative_axes
//        IRDFTParams(Shape{2, 10, 10},
//                   Shape{2, 5, 7, 2},
//                   ET,
//                   ET,
//                   input_data,
//                   expected_rdft2d_results_2,
//                   op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{2}, {1, -1}),
//                   op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{2}, {5, 12})),
//        // rdft2d_eval_2_signal_size_negative_positive_axes
//        IRDFTParams(Shape{2, 10, 10},
//                   Shape{2, 5, 7, 2},
//                   ET,
//                   ET,
//                   input_data,
//                   expected_rdft2d_results_2,
//                   op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{2}, {-2, 2}),
//                   op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{2}, {5, 12})),
//        // rdft2d_eval_2_signal_size_negative_negative_axes
//        IRDFTParams(Shape{2, 10, 10},
//                   Shape{2, 5, 7, 2},
//                   ET,
//                   ET,
//                   input_data,
//                   expected_rdft2d_results_2,
//                   op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{2}, {-2, -1}),
//                   op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{2}, {5, 12})),
//        // rdft3d_eval_1
//        IRDFTParams(Shape{2, 10, 10},
//                   Shape{2, 10, 6, 2},
//                   ET,
//                   ET,
//                   input_data,
//                   expected_rdft3d_results,
//                   op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{3}, {0, 1, 2}),
//                   NULL),
//        // rdft3d_eval_1_negative_axes_and_signal_size
//        IRDFTParams(Shape{2, 10, 10},
//                   Shape{2, 10, 6, 2},
//                   ET,
//                   ET,
//                   input_data,
//                   expected_rdft3d_results,
//                   op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{3}, {-3, 1, 2}),
//                   op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{3}, {-1, 10, -1})),
//        // rdft3d_eval_2
//        IRDFTParams(Shape{2, 10, 10},
//                   Shape{4, 5, 7, 2},
//                   ET,
//                   ET,
//                   input_data,
//                   expected_rdft3d_results_2,
//                   op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{3}, {0, 1, 2}),
//                   op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{3}, {4, 5, 12})),
//        // rdft3d_eval_2_negative_axes
//        IRDFTParams(Shape{2, 10, 10},
//                   Shape{4, 5, 7, 2},
//                   ET,
//                   ET,
//                   input_data,
//                   expected_rdft3d_results_2,
//                   op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{3}, {-3, -2, 2}),
//                   op::v0::Constant::create<int64_t>(element::Type_t::i64, Shape{3}, {4, 5, 12})),
    };

    return params;
}

std::vector<IRDFTParams> generateCombinedParamsForIRDFT() {
    const std::vector<std::vector<IRDFTParams>> allTypeParams{
        generateParamsForIRDFT<element::Type_t::f32>()
    };

    std::vector<IRDFTParams> combinedParams;

    for (const auto& params : allTypeParams) {
        combinedParams.insert(combinedParams.end(), params.begin(), params.end());
    }

    return combinedParams;
}

INSTANTIATE_TEST_SUITE_P(
    smoke_IRDFT_With_Hardcoded_Refs,
    ReferenceIRDFTLayerTest,
    ::testing::ValuesIn(generateCombinedParamsForIRDFT()),
    ReferenceIRDFTLayerTest::getTestCaseName);
}  // namespace
