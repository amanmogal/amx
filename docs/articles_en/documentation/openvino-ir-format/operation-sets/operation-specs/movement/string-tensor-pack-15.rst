.. {#openvino_docs_ops_type_StringTensorPack_15}

StringTensorPack
===================


.. meta::
  :description: Learn about StringTensorPack-15 - data movement operation which packs a concatenated batch of strings into a batched string tensor.

**Versioned name**: *StringTensorPack-15*

**Category**: *Data movement*

**Short description**: *StringTensorPack* operation uses outputs generated by *StringTensorUnpack* to transform a concatenated batch of strings into 
a string tensor. The data can be given either as strings or as ``unsigned 8-bit integer`` values.

**Detailed description**

Consider inputs:

* *word_begins* = [0, 5]
* *word_ends* = [5, 13]
* *output_symbols* = "IntelOpenVINO"

*StringTensorPack* uses indices from ``word_begins`` and ``word_ends`` to transform concatenated string ``output_symbols`` into ``output``, 
a batched string tensor. The ``output.shape`` (also called ``batch_size``) is equal to ``word_beings.shape`` and ``word_ends.shape``, 
and in this case holds values ``["Intel", "OpenVINO"]``.

**Inputs**

* **1**: *word_begins*:

  * **Description**: Indices of each string's begginings. **Required.**
  * **Shape**: 1D tensor of shape ``(batch_size)``.
  * **Type**: *T_IDX*

* **2**: *word_ends*:

  * **Description**: Indices of each string's endings. **Required.**
  * **Shape**: 1D tensor of shape ``(batch_size)``.
  * **Type**: *T_IDX*

* **3**: *output_symbols*:

  * **Description**: Concatenated ``input`` words. **Required.**
  * **Shape**: 1D tensor of shape equal to the total length of concatenated words.
  * **Type**: *T*

**Outputs**

* **1**: *output*

  * **Description**: A string tensor.
  * **Shape**: ``(batch_size)``
  * **Type**: *T*

**Types**

* *T*: ``string`` or ``u8``.
* *T_IDX*: ``int64``.

**Examples**

*Example 1: input data as string*

.. code-block:: xml
   :force:

    <layer ... type="StringTensorPack" ... >
        <input>
            <port id="0" precision="I64">
                <dim>2</dim>     <!-- word_begins = [0, 5] -->
            </port>
            <port id="1" precision="I64">
                <dim>2</dim>     <!-- word_ends = [5, 13] -->
            </port>
            <port id="2" precision="string">
                <dim>13</dim>    <!-- output_symbols = "IntelOpenVINO" -->
            </port>
        </input>
        <output>
            <port id="0" precision="string">
                <dim>2</dim>     <!-- output = ["Intel", "OpenVINO"] -->
            </port>
        </output>
    </layer>

*Example 2: input data as u8*

.. code-block:: xml
   :force:

    <layer ... type="StringTensorPack" ... >
        <input>
            <port id="0" precision="I64">
                <dim>2</dim>     <!-- word_begins = [0, 3, 3, 8, 9] -->
            </port>
            <port id="1" precision="I64">
                <dim>2</dim>     <!-- word_ends = [3, 3, 8, 9, 13] -->
            </port>
            <port id="2" precision="u8">
                <dim>13</dim>    <!-- output_symbols = "OMZGenAI 2024"-->
            </port>
        </input>
        <output>
            <port id="0" precision="u8">
                <dim>5</dim>     <!-- output = ["OMZ", "", "GenAI", " ", "2024"] -->
            </port>
        </output>
    </layer>
