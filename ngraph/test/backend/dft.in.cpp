// Copyright (C) 2018-2021 Intel Corporation
// SPDX-License-Identifier: Apache-2.0
//

#include <iostream>
#include "gtest/gtest.h"
#include "ngraph/ngraph.hpp"
#include "ngraph/runtime/tensor.hpp"
#include "ngraph/type/bfloat16.hpp"
#include "runtime/backend.hpp"
#include "util/all_close.hpp"
#include "util/all_close_f.hpp"
#include "util/engine/test_engines.hpp"
#include "util/known_element_types.hpp"
#include "util/ndarray.hpp"
#include "util/test_case.hpp"
#include "util/test_control.hpp"
#include "util/test_tools.hpp"

using namespace std;
using namespace ngraph;

static string s_manifest = "${MANIFEST}";

using TestEngine = test::ENGINE_CLASS_NAME(${BACKEND_NAME});

static const std::vector<float> input_data = {
    0.85943836,  0.009941814, 0.004292889, 0.54598427,   0.8270831,   0.49770153,  0.9035636,
    0.19274887,  0.8589833,   0.88759327,  0.72343576,   0.057539318, 0.915801,    0.63455844,
    0.25069925,  0.045601673, 0.29793364,  0.8492151,    0.6885839,   0.57419384,  0.009737609,
    0.68192583,  0.7614807,   0.37603703,  0.51804876,   0.033039097, 0.63702065,  0.78960556,
    0.5007368,   0.7248742,   0.2040932,   0.1211606,    0.76035476,  0.44004318,  0.95635134,
    0.82913375,  0.225465,    0.009166263, 0.05445403,   0.5885675,   0.87822133,  0.14324947,
    0.68606305,  0.3274419,   0.9169595,   0.732179,     0.04614906,  0.03505424,  0.84526163,
    0.9972937,   0.89781004,  0.9987864,   0.24641308,   0.34678686,  0.22731997,  0.95805293,
    0.595993,    0.8537836,   0.9174756,   0.17441267,   0.86681056,  0.15913424,  0.6638066,
    0.522398,    0.51548326,  0.024979044, 0.1731268,    0.068090245, 0.6125645,   0.4865482,
    0.2873719,   0.35936728,  0.64452374,  0.27963468,   0.59981745,  0.6309508,   0.507604,
    0.23389837,  0.77500635,  0.4462004,   0.53165394,   0.6535075,   0.4306448,   0.21468966,
    0.6925882,   0.11183031,  0.25347117,  0.2209481,    0.8060583,   0.34712377,  0.78980505,
    0.16110454,  0.6376819,   0.78736854,  0.909368,     0.6915289,   0.24747796,  0.32442623,
    0.22714981,  0.23976989,  0.25199527,  0.28412706,   0.32461873,  0.51917267,  0.8394496,
    0.6324911,   0.28498915,  0.8887276,   0.90213394,   0.16050571,  0.32190812,  0.67677563,
    0.8594967,   0.28917953,  0.1931407,   0.8282108,    0.14881423,  0.18073067,  0.8490643,
    0.2356146,   0.86200285,  0.57409924,  0.94718546,   0.092213534, 0.34502912,  0.4719212,
    0.60031396,  0.22602181,  0.3067876,   0.49529344,   0.11133887,  0.47633907,  0.13236542,
    0.69677263,  0.8490109,   0.6685073,   0.24199674,   0.7983137,   0.37593383,  0.74520975,
    0.16743147,  0.84144354,  0.93073046,  0.55940866,   0.67484015,  0.077098235, 0.69045097,
    0.06949082,  0.6804774,   0.79804176,  0.49027568,   0.8843709,   0.5665486,   0.91798306,
    0.47884017,  0.94707423,  0.98279756,  0.62054926,   0.8134105,   0.01336217,  0.78324115,
    0.9938295,   0.99227554,  0.66681916,  0.38842493,   0.3835454,   0.120395586, 0.5478275,
    0.13309076,  0.9468553,   0.24595714,  0.0057277656, 0.14570542,  0.31220108,  0.41687667,
    0.679465,    0.5731583,   0.7383743,   0.013198466,  0.34619793,  0.9278514,   0.48510832,
    0.46039802,  0.8171329,   0.5041023,   0.37600085,   0.124404594, 0.4201713,   0.7470036,
    0.7340853,   0.8449047,   0.137517,    0.14771219,   0.99655616,  0.2178388,   0.4121613,
    0.8655656,   0.32849622,  0.7574791,   0.95230037,   0.5806251,   0.9598742,   0.7183528,
    0.042957753, 0.2926446,   0.5882527,   0.05208914,   0.3216481,   0.5205192,   0.5095992,
    0.011508227, 0.5209922,   0.78207654,  0.34570032,   0.7968098,   0.4619513,   0.0047925604,
    0.029039407, 0.7673424,   0.571703,    0.44400942,   0.82529145,  0.29335254,  0.34418115,
    0.48119327,  0.38321403,  0.31083322,  0.7179562,    0.41055596,  0.06207573,  0.8747831,
    0.6018095,   0.4483476,   0.16189687,  0.8611539,    0.79723805,  0.42178747,  0.95597315,
    0.5534858,   0.33466807,  0.36827618,  0.60728735,   0.6582703,   0.6790265,   0.870856,
    0.8868432,   0.43860948,  0.32468447,  0.77624434,   0.3403061,   0.14144918,  0.23022941,
    0.07176102,  0.06941459,  0.37346482,  0.9120822,    0.65890974,  0.77746564,  0.4515671,
    0.45455948,  0.15909587,  0.8017096,   0.6259673,    0.6117355,   0.77020043,  0.08495594,
    0.30376136,  0.55266386,  0.8497134,   0.91790336,   0.86088765,  0.88179666,  0.9009849,
    0.97200614,  0.94119,     0.77911216,  0.8057816,    0.14040896,  0.66522235,  0.6649202,
    0.048396785, 0.75035393,  0.4520953,   0.9877601,    0.46115568,  0.2167145,   0.9271302,
    0.39395386,  0.68578094,  0.576275,    0.20754486,   0.5408786,   0.46040633,  0.18199016,
    0.66303253,  0.6288556,   0.14313427,  0.91675115,   0.36198065,  0.51337945,  0.84241706,
    0.22333568,  0.38011634,  0.024615016, 0.19370414,   0.23593484,  0.32207185,  0.47971123,
    0.6202779,   0.6944977,   0.43612957,  0.07961436,   0.57468814,  0.100025274, 0.42476946,
    0.95338464,  0.666547,    0.8683905,   0.52689695,   0.6284723,   0.85813546,  0.4865953,
    0.8269112,   0.08833949,  0.69269264,  0.41784903,   0.5969149,   0.07599888,  0.14184453,
    0.49042618,  0.44027725,  0.6256328,   0.2716237,    0.0999099,   0.09831784,  0.92469853,
    0.24196884,  0.9073526,   0.7523511,   0.7761173,    0.28489882,  0.96349007,  0.5884645,
    0.74933976,  0.06400105,  0.4376275,   0.34752035,   0.6006149,   0.034923803, 0.066874385,
    0.9790322,   0.5558188,   0.97579825,  0.025802653,  0.537738,    0.24921915,  0.111012295,
    0.85987717,  0.781183,    0.69588315,  0.94621634,   0.74946797,  0.6949375,   0.009165181,
    0.91075164,  0.72913235,  0.25934777,  0.19463088,   0.5283304,   0.9241759,   0.0563183,
    0.74323857,  0.43722472,  0.2958358,   0.85980684,   0.029655656, 0.362904,    0.19682994,
    0.37778872,  0.09406928,  0.23010127,  0.44393733,   0.420214,    0.39723217,  0.13777487,
    0.06385251,  0.9535715,   0.89861375,  0.2463547,    0.673834,    0.8008994,   0.0861585,
    0.6613363,   0.79498637,  0.79322547,  0.083214305,  0.577025,    0.58655965,  0.119723536,
    0.0012204717};

static const std::vector<float> expected_dft1d_results = {
    6.329814,     4.2950764,     -0.8105316,   -0.7187835,  -0.059136264, 0.2709784,
    0.82793635,   0.57937646,    0.5997731,    -1.3291739,  1.188664,     1.462941,
    -0.01811248,  -1.8314927,    0.16004556,   -2.219835,   1.0620322,    -1.0679832,
    -0.68610185,  0.658314,      4.627743,     4.5935497,   -0.78950775,  -0.32600924,
    -1.4706655,   -1.1615934,    0.708719,     1.4568751,   -1.0970218,   -0.39268675,
    -0.5990571,   -0.81545514,   -0.39174145,  -0.420258,   0.55279106,   2.339339,
    -0.59915966,  1.3964193,     -0.8447231,   0.14907542,  6.2576666,    5.5670385,
    0.25636938,   -1.7026355,    1.161571,     0.12042561,  0.19768336,   -1.3421875,
    -0.90698814,  1.4111948,     0.70803046,   0.5795436,   1.2021728,    -0.5199567,
    -2.558736,    -0.80762154,   1.1657354,    -0.8685272,  1.2987087,    -1.0047817,
    5.6461143,    3.2111988,     0.2361581,    0.3099669,   0.6179653,    0.099535145,
    1.0438079,    -0.016701937,  -0.88529384,  -0.12907594, 0.64785606,   -0.8428119,
    -0.058392793, -1.0488291,    -0.4019828,   0.20333555,  0.45051938,   0.45967662,
    1.3713523,    -0.6549525,    5.5258985,    3.7522945,   -1.8860855,   -0.2230255,
    0.8160669,    -0.46607828,   0.123957604,  0.61024696,  0.26978388,   0.9723815,
    0.3050212,    0.69621503,    0.27244493,   -1.0805726,  0.20593566,   1.5653824,
    -0.27690098,  0.8950307,     -0.039584313, -0.18680441, 4.975611,     4.6955333,
    0.19031112,   -0.8860659,    0.91665065,   -0.5264673,  -0.4547393,   1.1623507,
    -1.4774656,   1.671129,      1.028168,     -1.6014669,  -1.2178835,   -0.13447604,
    -0.14712845,  -0.6739672,    -0.3273949,   -0.9012072,  -0.9661755,   0.03590688,
    4.771964,     5.244689,      -0.03415192,  -0.37281254, -0.49070793,  -0.65789306,
    0.8143984,    -0.8913989,    -0.19890547,  0.17876014,  -0.9956009,   0.82810897,
    0.55270624,   -0.023768127,  1.5358362,    0.6981953,   0.23165298,   0.51040155,
    2.4328363,    0.2267083,     6.4758024,    5.72882,     -0.8707881,   -1.110683,
    0.12478554,   1.3484334,     0.3689712,    0.29180524,  -0.8149491,   -0.0922713,
    -0.33161288,  0.78140867,    -0.9623072,   0.8999919,   -2.1120539,   0.84492886,
    -1.5347936,   0.7440938,     1.3312622,    -1.0220959,  3.8123238,    5.62084,
    1.3551373,    0.6460793,     -0.21639234,  -1.2077228,  1.1639122,    -0.05263084,
    0.48105645,   -0.5892652,    0.2349168,    1.128768,    0.42568994,   0.36398163,
    -1.2250046,   2.3513904,     0.64331245,   0.8099514,   1.1574583,    0.8668997,
    5.59726,      5.659527,      0.48095328,   0.59446967,  1.1849049,    1.4709316,
    -1.2589264,   -0.11577609,   0.6299068,    -1.4621243,  0.7872094,    0.18096408,
    0.5553762,    -2.0060503,    -0.4373122,   0.9938256,   0.89633095,   -0.5491595,
    0.8428093,    0.084472984,   4.52676,      4.351716,    0.73079205,   0.8098516,
    0.27877963,   -0.0073297992, 0.36545974,   0.6745955,   -2.3818088,   1.5816333,
    -0.16544427,  0.51321346,    -0.23699868,  -0.13254744, 1.551896,     0.62098134,
    0.7739359,    1.6108581,     0.36288044,   -0.42423314, 5.0995026,    5.1843014,
    -1.1968713,   1.1790991,     -0.018864498, -0.7500831,  0.0879575,    0.22010106,
    1.1136081,    2.2893274,     -0.6877146,   -0.40740123, 0.046427906,  0.8681825,
    -0.50678635,  0.23051873,    0.35328788,   -0.45622703, 0.1495475,    -0.104907334,
    4.8094087,    5.2818966,     0.49697292,   0.29568392,  -0.4144543,   -0.64546454,
    0.31737912,   -0.8962374,    -1.0404948,   0.91764164,  0.6826862,    0.08073502,
    0.33942595,   0.053232975,   -1.1867946,   0.51120156,  -1.1452568,   -1.4197243,
    0.82389224,   1.8939058,     6.882805,     6.4072084,   -1.3024135,   -0.22483894,
    -0.22082287,  1.0370905,     -0.7639439,   0.6950346,   -0.731326,    0.16821115,
    0.0887468,    -0.5732441,    -0.40715322,  -0.96244293, -0.89126545,  1.3140129,
    -0.42358512,  1.7674587,     -0.6400819,   -1.6113993,  4.4106574,    5.706909,
    -1.1110737,   0.10560027,    -1.1108764,   0.34190884,  2.1167603,    -0.067495525,
    -0.16237324,  0.2604496,     -0.8129095,   -0.42274237, -1.1412699,   -0.0011268258,
    -0.63462454,  -0.15172139,   -0.7164279,   0.14801888,  -0.3538928,   1.583736,
    4.9876184,    4.2879796,     -0.8491325,   0.5345522,   -0.60507995,  -0.9020085,
    1.0447598,    0.21135187,    -0.4787205,   -0.3230412,  0.8076494,    -0.04361339,
    0.62797767,   0.15487206,    -0.23772183,  0.69546384,  1.8609382,    -1.7030516,
    1.2658813,    -0.6791475,    4.921037,     4.8929176,   -0.0124401,   -0.6873918,
    -0.21879943,  -0.48610657,   0.36776963,   0.12423802,  -0.7854952,   0.48838156,
    -0.5085067,   -0.08865434,   1.1653454,    0.81965554,  -0.6399579,   -1.0967884,
    1.4099771,    -0.15370974,   2.8824244,    1.0534087,   4.7045717,    5.2045445,
    -0.6350576,   2.5321684,     0.6987691,    -0.53839976, -0.09889791,  0.5662097,
    0.4088725,    0.635128,      -1.763303,    -0.49720347, -1.0772469,   1.2422445,
    -0.3619956,   -1.311133,     1.5846866,    1.0530244,   -0.61141044,  0.74831486,
    5.433625,     3.9661994,     2.006918,     -0.8703619,  -0.7658511,   0.0811044,
    0.83877516,   -0.63553256,   -0.67563355,  1.7368636,   0.9372277,    1.8246815,
    0.8615329,    -0.18161502,   0.62479717,   0.2028623,   0.159001,     1.860977,
    0.04177074,   -0.49050322,   4.9402246,    4.0296063,   -0.74729615,  -0.27802998,
    -0.8077982,   -0.5414143,    0.467114,     0.9016136,   2.1971147,    -1.466963,
    -1.2350414,   1.0967304,     -0.95607626,  0.51462483,  0.28838068,   1.0117096,
    -0.21846394,  0.114624545,   -1.627146,    -0.9431294};

static const std::vector<float> expected_dft2d_results = {
    54.020195,    48.368538,   -1.8721353,   -3.7894967,   2.5850394,   -0.7094516,
    3.5357249,    1.6819549,   -3.4001002,   0.23887074,   2.9735894,    2.3982158,
    0.3599546,    -5.801426,   -4.427606,    5.2949734,    1.7113355,    1.428697,
    5.8978443,   -0.8472582,   -3.288164,    -0.099487126, -0.33851182,  2.614974,
    -2.766882,    0.18681616,  0.34976268,   -0.2601711,   4.998401,     -2.9831958,
    -1.6652081,   0.53361464,  -0.9001389,   -3.6454318,   -3.7148805,   -0.68562484,
    2.0633714,    -2.2154818,  -3.3697965,   3.5273929,    1.5474558,    -1.6305131,
    -5.3327236,   0.54002213,  -1.6671672,   2.4493377,    -2.2604918,   1.4117424,
    2.1797671,    2.5013056,   0.8525213,    1.6570821,    1.717532,     -2.101283,
    4.6570606,    -3.6786642,  0.8912736,    -0.4010569,   -5.9480867,   1.441097,
    2.1150498,    -1.4524796,  -3.5035098,   3.0815587,    -3.3185432,   4.7882123,
    5.64722,      -1.1192517,  1.8302126,    -2.5760055,   -0.41363025,  3.2350469,
    1.4296081,    0.8722873,   6.1752787,    -1.7328868,   2.312786,     4.4069357,
    1.7721124,    3.3802934,   -0.53283703,  3.7646027,    4.440572,     -4.353462,
    -2.7639425,   3.6855025,   1.8912748,    -2.5849285,   -2.9895856,   1.1341677,
    1.4818796,    0.7482485,   -1.3077981,   1.0669674,    -0.76039124,  -10.8791685,
    2.998129,     -4.2489543,  0.41752052,   -0.45298803,  -0.62486386,  0.5913104,
    -0.36638862,  -0.9528576,  -0.16223967,  -3.171127,    2.7200532,    -3.8751457,
    3.8895426,    1.0489256,   -0.091531515, 6.992935,     4.5098467,    -0.38218838,
    0.6637606,    -2.1199496,  3.9403267,    -0.870952,    2.4287906,    1.9679271,
    3.652341,     -4.4909067,  -1.4710087,   0.5256169,    5.4580984,    -2.6554706,
    -0.058261395, 3.6613276,   0.5612789,    1.0594783,    4.5429516,    -1.447232,
    -2.388829,    0.52541757,  -6.1111097,   -2.3621864,   -1.4885365,   -2.6265867,
    -4.4030347,   0.27728367,  3.9584684,    -3.7618577,   -3.128574,    -2.8671994,
    1.4171265,    0.02298975,  -2.0790722,   1.6526843,    0.59488124,   -3.2548752,
    -0.82249254,  1.3645289,   -2.9066925,   -3.4377484,   -2.501403,    -2.821631,
    -4.427053,    -2.3529994,  0.6670886,    -4.7455816,   -2.160026,    -1.0587022,
    1.1341916,    -0.9469211,  0.67554307,   -4.0473633,   -1.2422556,   4.538533,
    -0.739814,    -3.22405,    1.2332113,    -4.0489397,   -4.560828,    -3.5195189,
    6.7066355,    -2.8439593,  -0.43901098,  -3.9980454,   -4.2256207,   3.0529652,
    4.6105156,    2.720234,    2.3327744,    -1.0400636,   -0.048398018, 2.1603358,
    -0.22459112,  0.6870126,   -0.926849,    -7.2363615,   3.7953386,    3.195907,
    3.8662248,    -1.8919971,  0.91311014,   -0.36923724,  3.0576966,    0.19861764,
    -0.09782998,  -1.0179963,  50.71621,     49.313248,    -2.6195984,   3.396334,
    -3.1849973,   -2.4107025,  4.7431326,    1.7938776,    -2.5362587,   6.287631,
    -2.656609,    1.4825039,   -0.77803206,  2.3750808,    -1.9940716,   2.0271082,
    3.6380908,    2.822246,    2.2938647,    1.0260472,    3.248794,     -3.05949,
    2.0979533,    3.565119,    1.9497933,    0.2390036,    -2.255065,    0.7849397,
    1.9622431,    4.2382064,   -3.2529292,   0.78572094,   -2.9386084,   0.66875017,
    5.743927,     4.850876,    -4.8014383,   6.371132,     -2.6618924,   -1.8847032,
    -1.7702236,   -1.1031301,  1.4129921,    -0.080709964, -2.7634878,   -3.6456683,
    1.4174454,    3.4085226,   3.10102,      0.114031196,  -2.4092412,   0.27725983,
    2.8974152,    -1.866328,   -0.68216217,  2.249536,     -0.42875588,  -5.8182187,
    5.347006,     -6.2936745,  0.8000201,    3.651592,     1.3155181,    2.3413098,
    2.1600244,    1.8733575,   -2.4694557,   0.39358342,   2.020084,     -0.062472403,
    -4.131041,    -1.5137839,  -2.0354557,   1.1957052,    -0.6644075,   -2.0442688,
    2.0753646,    4.874056,    -0.090800405, 1.3911223,    0.68129027,   -4.0028048,
    -0.8021738,   0.43866205,  2.7812133,    0.4525791,    -0.87565154,  1.2364697,
    -2.725146,    2.7965212,   4.148448,     -1.9204504,   -0.61004305,  -4.790703,
    3.1498234,    0.79403657,  5.305445,     0.2803253,    -3.67164,     -4.3974924,
    -2.5132315,   -0.9139994,  6.841936,     -4.089568,    -1.2774054,   0.9789283,
    3.269153,     -3.3947415,  -7.5553513,   3.682307,     2.9227152,    2.3319635,
    2.754105,     -1.2598821,  1.4247041,    -1.8540356,   -2.675635,    1.2705915,
    5.2202816,    6.206577,    0.4957786,    2.1150033,    5.8791704,    2.8043785,
    -0.37886655,  0.011162788, -1.0408137,   -1.5385519,   -8.079001,    -0.68451786,
    2.3513699,    3.0877895,   2.6497078,    1.3670976,    0.77233493,   2.2921152,
    -1.2679763,   2.113087,    4.990262,     -0.046566606, 0.015865922,  1.1569002,
    -4.8347507,   1.9560149,   1.979923,     2.34512,      -0.9634773,   4.3939066,
    -6.2031984,   0.8311275,   -2.7740612,   -2.9296994,   -3.4624243,   -1.4588313,
    2.4724,       -0.79477566, -0.4295609,   5.8110385,    -2.6649034,   -2.270977,
    -2.5511568,   -3.1238616,  -4.46209,     0.16335368,   1.9146351,    1.0459399,
    2.8069792,    -0.4705832,  -4.0632596,   -2.220704,    1.7770543,    -0.5791014,
    -2.2041528,   3.026476,    5.324942,     -0.7805673,   5.9275556,    0.14159381,
    -0.81569004,  4.1947803,   -3.8557377,   -0.5163199,   2.478963,     -2.396379,
    -0.3930376,   -0.96302,    -0.9776549,   0.13852966,   0.26078847,   0.8342015,
    2.3698487,    4.109933,    1.3575013,    -0.5828376,   -0.028537825, -0.53020877,
    0.39626116,   -1.7572733,  -4.31769,     -2.1674476};

static const std::vector<float> expected_dft3d_results = {
    104.7364,     97.68179,     -4.491728,   -0.39316452, -0.59995466, -3.1201572,  8.278858,
    3.4758341,    -5.9363585,   6.5265055,   0.3169801,   3.8807175,   -0.418082,   -3.4263492,
    -6.4216776,   7.3220854,    5.3494234,   4.2509427,   8.191702,    0.17879319,  -0.03937006,
    -3.1589758,   1.7594413,    6.180092,    -0.8170867,  0.42582142,  -1.9053001,  0.52476853,
    6.9606423,    1.255014,     -4.9181366,  1.319335,    -3.838747,   -2.9766817,  2.0290484,
    4.16525,      -2.7380676,   4.155652,    -6.0316873,  1.6426877,   -0.2227689,  -2.7336447,
    -3.919732,    0.45931256,   -4.4306555,  -1.1963288,  -0.8430467,  4.8202653,   5.280785,
    2.6153364,    -1.556721,    1.9343407,   4.614946,    -3.96761,    3.9748988,   -1.4291265,
    0.46251905,   -6.2192726,   -0.60107887, -4.852579,   2.9150705,   2.1991146,   -2.1879911,
    5.4228687,    -1.158518,    6.661569,    3.1777658,   -0.7256692,  3.8502965,   -2.6384768,
    -4.544671,    1.721262,     -0.6058461,  2.067991,    5.5108714,   -3.7771575,  4.388153,
    9.280992,     1.681312,     4.7714148,   0.14845347,  -0.23820269, 3.6383984,   -3.9147997,
    0.017270446,  4.138083,     1.0156215,   -1.3484575,  -5.7147317,  3.9306912,   5.630328,
    -1.1722009,   -1.9178381,   -3.7237349,  2.3894331,   -10.085134,  8.303572,    -3.9686286,
    -3.2541199,   -4.850478,    -3.1380959,  -0.32268947, 6.475547,    -5.0424256,  -1.4396465,
    -2.1921992,   5.9892044,    -7.269888,   -3.665809,   4.7312326,   2.8311844,   9.324896,
    7.2639513,    -1.6420703,   2.0884657,   -3.9739842,  1.2646922,   0.39964193,  7.649071,
    8.174507,     4.148118,     -2.3759027,  4.4081597,   3.3299959,   5.0792284,   -2.6443086,
    -1.0990746,   2.1227744,    -7.517721,   0.3749615,   6.894322,    1.6405574,   0.26087707,
    1.8925169,    -5.3387756,   -0.07007182, -2.7565134,  -0.51350284, 0.5872268,   0.23071745,
    3.9743357,    -2.6049578,   -7.963324,   -0.9111862,  3.3970497,   2.368112,    -3.0425484,
    6.0465913,    -5.608317,    -2.4237492,  -3.5965526,  -1.5651696,  -6.369116,   -4.896579,
    -0.029001951, -3.616405,    -4.8566127,  3.4580388,   -1.9978137,  -7.016559,   -4.71118,
    -4.1825647,   -3.3278992,   -0.7835678,  2.5901778,   -3.0014238,  1.5647203,   4.06795,
    -4.803074,    -5.444754,    3.0102665,   -4.6280394,  -6.764982,   -0.49304247, 12.031577,
    -3.6245267,   5.488541,     -3.8564541,  -5.04131,    7.2477474,   0.7547778,   2.2039144,
    4.8117356,    -3.4364424,   -0.44143593, 1.1973162,   -1.2022457,  0.8255428,   -0.66605973,
    -6.4021583,   6.1651874,    7.3058405,   5.2237253,   -2.4748354,  0.88457155,  -0.89944726,
    3.453958,     -1.558656,    -4.4155188,  -3.1854444,  3.303988,    -0.9447114,  0.7474582,
    -7.185831,    5.770039,     1.7012511,   -1.2074116,  -0.11192033, -0.86384296, -6.048759,
    5.6302013,    0.9157127,    1.1379871,   -8.176507,   -2.433535,   3.2678652,   -1.9267552,
    -1.393548,    3.6039736,    -1.873306,   -6.536957,   2.9600024,   -2.4364662,  -0.95014465,
    -4.716674,    -0.052186966, 2.6048284,   -1.0451086,  3.036159,    -7.221403,   1.5877211,
    -0.25210607,  2.0384693,    -4.3141813,  -9.458808,   -5.5365014,  6.8648105,   -8.586614,
    -0.7079052,   5.412094,     3.3176801,   -0.5273831,  -6.745717,   0.62073076,  1.0963198,
    6.0950055,    -3.677938,    -1.9967818,  -0.921252,   2.387275,    3.261763,    1.3798212,
    -1.1798835,   -0.23495495,  5.339221,    -5.928199,   1.3200281,   5.417163,    -11.295093,
    7.7347717,    1.3150296,    -5.1040716,  -4.8190293,  0.74024755,  -5.4785676,  2.914854,
    8.116676,     -1.5128357,   -0.1898706,  -2.5135324,  3.7174103,   4.7488313,   3.4650638,
    -0.32341766,  6.8396864,    0.31138325,  0.2374219,   -0.46712062, 1.8629129,   1.9891711,
    -1.2141278,   7.7674093,    5.2427464,   -4.792124,   -5.5451555,  3.2329237,   2.766926,
    -3.8213987,   -0.26443875,  -1.6623533,  -2.6665692,  2.6686997,   -0.6977545,  5.85767,
    -3.9102163,   -11.673204,   -2.3073153,  -4.529278,   4.0891604,   3.9445055,   1.8883687,
    1.50531,      -7.2083244,   3.1367111,   1.1151649,   -4.1500554,  -0.54910004, -0.48040384,
    11.444895,    -2.6333811,   -3.0142484,  4.6609726,   1.755743,    0.87769306,  -0.7609439,
    -0.26591438,  6.615961,     -2.141545,   -2.7914915,  -4.2386503,  3.1565619,   -6.6059103,
    -7.35018,     -2.2787585,   5.836963,    -2.6666338,  0.98255026,  5.199881,    8.640279,
    1.7439961,    2.191582,     -4.535021,   -5.038538,   -0.841679,   -6.8834453,  -4.654301,
    -0.220559,    -4.7396717,   -9.393296,   0.32385087,  3.9426038,   -4.9187584,  1.7061774,
    -4.8232145,   -0.5627973,   -2.3221302,  -1.1155958,  -2.7412212,  6.798079,    -4.0860014,
    1.9515686,    4.2942266,    0.5557329,   -1.9789174,  -4.973804,   -2.0268555,  -3.9974911,
    -8.164038,    3.3319929,    -2.474605,   0.39113098,  2.0651584,   5.5962815,   -1.1102749,
    -1.2390921,   -5.0933027,   -4.0492353,  5.009116,    3.323446,    -1.0033474,  -0.54384375,
    -3.4698372,   -2.3566747,   -6.545992,   1.3816929,   -2.0633929,  -6.3665648,  -4.13964,
    -3.4099324,   -1.1418146,   8.466255,    3.2365537,   -0.14618888, 1.3563147,   0.3446387,
    3.1233552,    0.7530624,    0.548483,    -1.1876376,  -8.070564,   1.4254899,   -0.9140264,
    2.5087235,    -1.3091599,   0.9416502,   0.16097029,  2.6614356,   1.9558911,   4.219861,
    1.1494511};

static const std::vector<float> expected_dft1d_signal_size_results = {
    6.138384,      4.8263664,    6.2014966,    4.641298,     6.2220087,   3.340786,    3.8338857,
    3.458686,      6.393098,     6.578215,     4.9169006,    3.8786886,   5.0566025,   5.701084,
    5.099263,      6.690686,     4.686806,     4.9369535,    5.471756,    4.315829,    3.6622288,
    -4.547995,     2.3657713,    -4.4210963,   3.3341353,    -3.560755,   3.0613456,   -2.0019536,
    4.9098253,     -3.27648,     3.6913419,    -2.365142,    5.2827687,   -3.2966752,  5.633893,
    -2.990755,     2.4099903,    -2.5792742,   3.009334,     -3.318112,   -0.8632047,  -0.302661,
    -0.9658433,    1.3884914,    -0.12056512,  -0.5264965,   0.053616166, 0.5239285,   -0.37204745,
    0.6682581,     0.88452375,   -1.4486976,   -0.9331777,   -0.6865864,  -0.32639223, -1.2646291,
    -0.187691,     1.0645473,    -0.45738214,  0.48435384,   1.2216191,   -0.61395854, 2.4932637,
    -1.6152657,    0.99030006,   -0.45764852,  2.4245698,    0.31936115,  2.9254415,   0.4994774,
    0.2869299,     -0.82977176,  1.759331,     0.66088116,   2.0010936,   -0.18261093, 1.5729225,
    -0.6416664,    1.2219726,    -0.4185537,   -0.33628678,  0.21890742,  -2.2292616,  -0.9053817,
    0.53581333,    0.36471185,   0.90989465,   -0.067255855, 0.9978778,   -0.6023144,  1.2700583,
    -0.055348396,  0.7769584,    0.20883593,   0.68046755,   -1.3861976,  -0.7743764,  -0.17685926,
    -0.28369236,   0.7703819,    0.88469267,   0.7845876,    0.4245007,   1.0558772,   1.5855613,
    -0.88230014,   2.5918908,    0.5176118,    0.9809585,    -0.16784734, 0.44176394,  -1.8440124,
    1.8485708,     0.13407728,   0.99209386,   -0.49863797,  -0.05547434, 0.51047516,  0.95244277,
    0.16795856,    1.4046597,    1.2883723,    -0.4217211,   -0.30820233, -0.94360316, -1.0276735,
    1.8597782,     -1.7973311,   0.17352016,   0.14103556,   -0.53083634, -0.08058083, 0.58797073,
    -0.1623843,    1.0300912,    -1.594127,    -0.37183756,  0.6519355,   -0.67296886, 1.4364773,
    2.9115105,     -0.62121296,  0.10118961,   0.4055282,    -0.765203,   1.1095873,   0.25468233,
    -0.8044969,    0.37809694,   0.47051764,   -0.5070367,   -0.69294405, 1.678687,    -0.05850029,
    -0.15289319,   -2.1158576,   -0.28707075,  0.64672077,   2.1430318,   1.8936268,   0.287481,
    -1.212002,     -0.8066146,   -0.024840236, 0.4002909,    1.5536453,   0.90662,     -0.1200099,
    0.2907222,     1.3641009,    -1.2066911,   2.2924597,    -0.10727149, -0.90693283, -1.7303126,
    -0.9309965,    -0.39670166,  1.4576144,    1.8296418,    0.29156286,  0.914652,    0.48379737,
    0.35427743,    1.0552206,    1.0729686,    0.66110367,   1.1590368,   -0.883232,   1.5702324,
    0.37410414,    2.7553983,    1.3418052,    0.4280968,    0.43797877,  -0.42501903, 0.6896758,
    0.17888534,    0.7881189,    1.906157,     -0.893877,    1.6907314,   -0.07711154, -0.08057277,
    -0.94700074,   0.118160814,  1.0535691,    0.013901293,  -1.0134851,  -0.49273467, 0.77010435,
    0.61979324,    -0.4796943,   -0.9006692,   -0.14570916,  0.20728627,  -0.6043751,  -0.77368677,
    2.1912723,     -1.0270727,   -0.15626097,  1.6779256,    -1.3633705,  -1.419299,   0.4458414,
    1.8119955,     1.3894738,    -0.0533064,   -0.2651497,   2.156881,    1.774823,    1.6229321,
    0.83354133,    0.6217755,    2.7520647,    -0.8899409,   -0.5549828,  2.2334838,   1.866106,
    2.2245884,     1.6349602,    -0.17061183,  -0.75332606,  -0.7192313,  1.011065,    1.1424315,
    -0.14698744,   -0.5063292,   0.047560766,  0.8158023,    -0.99613833, 1.3294827,   -0.884288,
    1.9334476,     -0.82400334,  -1.0622213,   0.45689362,   0.3765804,   -0.2486183,  0.5129931,
    -2.1530728,    1.6927868,    -0.4909035,   0.07076289,   1.1461573,   1.2108444,   0.5570269,
    0.57290983,    1.0781552,    0.2522127,    0.9315722,    0.82063264,  -0.27504963, -1.298832,
    0.5996642,     0.035723105,  0.9061513,    0.7085681,    1.3870897,   -0.33059365, 1.4296496,
    -0.9227723,    -2.0201705,   -0.25814092,  -0.044265598, 0.74225616,  -0.7740435,  0.56227565,
    -0.7865786,    0.16598742,   -0.13509351,  0.65011877,   -0.5367288,  0.7644322,   1.754046,
    0.14904708,    0.0060333014, 0.81808805,   -0.023402452, 1.2871823,   -1.2016544,  -0.016474128,
    1.0952724,     -0.83657134,  0.959798,     -0.29334623,  0.46025404,  -1.329956,   0.88328505,
    0.311208,      1.5458176,    1.058334,     -0.65749556,  0.7922486,   1.2470598,   0.009132266,
    0.07870856,    0.6166347,    0.009361565,  -1.6813973,   0.3131196,   -0.3617983,  -1.6096013,
    -0.80183095,   0.60364366,   0.032118678,  0.53880775,   0.79869264,  2.0884013,   0.30808622,
    -1.1033678,    -1.0830308,   -1.5599371,   1.2167512,    0.439706,    -0.76799685, -0.46132383,
    -1.6585693,    -0.8193617,   0.15754253,   0.82434106,   -1.4365332,  2.5602462,   -0.59798455,
    2.2706695,     0.094361365,  1.5161843,    1.576273,     0.8282173,   -2.615784,   2.0659475,
    -0.70808023,   1.8205551,    -0.23570198,  1.0002637,    -0.84214133, 1.1558707,   -0.8486479,
    3.3955946,     -0.9163475,   1.2400286,    1.7278013,    -0.2593556,  0.12464893,  0.045035288,
    0.14191893,    0.60069644,   0.6033013,    -0.40642756,  0.30952126,  2.1911335,   0.38403878,
    -0.5504798,    0.7629653,    0.96752846,   -0.77223957,  -0.45594752, 1.2607243,   -0.5419304,
    0.06783953,    1.1299804,    -2.9180245,   2.812955,     -2.912982,   4.157113,    -0.7707863,
    4.184089,      -1.2218096,   2.2556906,    -2.2792397,   4.6580005,   -2.2278588,  3.2439072,
    -1.7189349,    2.8687704,    -3.8549495,   3.9684548,    -3.5499556,  3.1096249,   -1.6433489,
    3.6931372,     4.762172,     6.8113427,    5.6586823,    3.9343526,   4.874974,    4.044377,
    4.5118494,     4.560476,     4.814545,     5.255967,     4.8088293,   4.8661695,   5.5842476,
    3.047568,      6.3495092,    5.8194113,    3.9938629,    6.2386484,   5.357541,    4.734993,
    4.009847,      -1.85078,     3.257053,     -2.863433,    3.2807407,   -2.4543116,  2.3266344,
    -2.7742774,    5.0006027,    -3.1107163,   3.1461582,    -2.4130437,  1.9839633,   -3.2893786,
    4.9680586,     -1.5064957,   4.93627,      -2.2536325,   4.4328127,   -2.371289,   -0.09072271,
    1.6559569,     0.9273602,    -0.16627279,  -0.15694867,  -0.16094846, -0.30682713, 0.62848985,
    -0.16314042,   -1.793005,    -0.025120497, 0.035565466,  0.4509227,   1.029233,    2.6076002,
    -1.3557681,    -0.042177677, -1.8681216,   0.047852248,  -1.0646176,  3.5719476,   0.61097944,
    1.9404714,     -1.8996478,   1.4736449,    -0.3556636,   0.7955406,   -0.70645106, 0.106241465,
    -1.4871876,    1.4906516,    -0.5542434,   1.8523693,    -1.8795702,  0.20563364,  -1.7517232,
    -0.2156514,    -0.42685848,  1.2532125,    0.29982674,   0.6122022,   -1.2758396,  -0.7942943,
    -1.2208992,    -0.28703833,  -0.6799724,   -0.22529805,  0.88721895,  -1.6784416,  0.6357958,
    -0.40500844,   -1.1880269,   -1.3736604,   0.27873987,   0.9415196,   1.5691454,   0.637203,
    0.6283375,     0.8025869,    -0.73763883,  0.07619148,   0.29328048,  -0.21484284, 0.39326593,
    0.2614212,     0.25093663,   1.1460452,    -0.42564535,  1.2621714,   0.7867665,   -0.9763881,
    0.67735475,    1.3954227,    0.8466128,    2.6533723,    -1.3165393,  1.0205896,   -1.2907634,
    -0.09324902,   0.19477385,   -0.10201472,  1.2100208,    0.8927874,   1.1437554,   -0.27520463,
    -0.18907726,   -0.1451918,   0.3773734,    -1.0439434,   -0.35780138, 1.1060231,   1.0964282,
    0.2501399,     0.31307727,   -0.13760762,  -0.86377877,  -0.49448854, 0.09268577,  0.74952096,
    0.82891256,    1.9546115,    1.2895672,    2.1169534,    -1.0286292,  0.0854094,   0.63047266,
    1.0325564,     -1.0493125,   0.31182784,   2.3592472,    0.69874203,  -0.92576516, 1.5970948,
    0.7720525,     0.9282105,    -0.13239098,  1.5795128,    -0.7387508,  0.9950645,   0.11649346,
    0.7381579,     -0.9112861,   -1.0479062,   -0.9858517,   -0.31902313, -0.43754727, -1.9271741,
    0.41418013,    1.5709126,    0.12488553,   0.34839654,   -0.14153089, 1.2988961,   -0.17553245,
    0.36363417,    -0.4992725,   -0.87406987,  -1.5621511,   0.52947193,  0.17129752,  -0.19691896,
    0.88363117,    0.5983897,    1.4228462,    -1.309372,    1.6419725,   2.096242,    1.3451272,
    0.21495643,    0.16032922,   -0.21870668,  -2.3123596,   1.511457,    -1.2067473,  0.30244982,
    -0.5896039,    -0.20020528,  -0.17678946,  0.646347,     0.12540624,  0.8411275,   0.29581466,
    1.0424525,     -0.3198546,   1.5812268,    1.633207,     0.036333233, -1.9386438,  0.4908937,
    0.4255972,     -3.0946343,   0.4557737,    -1.538063,    -1.0618666,  -0.766645,   0.09507492,
    -1.1704439,    -0.58377063,  0.06451824,   0.084664315,  -0.33639127, 0.43388176,  0.7445558,
    0.56547284,    0.20360313,   -0.52746487,  -0.22392502,  0.10510802,  0.2932141,   0.13039428,
    0.2339833,     1.1078603,    0.07111454,   1.674398,     0.24977088,  0.7773813,   0.10618341,
    1.3232847,     0.07770634,   0.8410483,    0.6371973,    1.1520991,   1.6076822,   -0.553284,
    0.0399023,     1.6575105,    -1.002435,    -1.153806,    -0.338341,   0.75674164,  -1.9532704,
    -0.16773497,   -0.09083623,  -0.09499304,  -0.15297657,  0.6092089,   1.1756519,   -0.8699633,
    0.57320195,    0.77921844,   0.38325477,   -0.4647501,   0.16934802,  -0.9541189,  1.8387299,
    -0.2722485,    -0.9011179,   1.2189366,    1.0526755,    1.2198145,   -0.66335034, 2.4358046,
    -0.0044496655, 2.4705029,    0.7398137,    1.1581391,    -0.08892931, -1.3800118,  0.39516693,
    0.7783501,     -1.6864198,   0.90398335,   -0.09139767,  0.18852606,  -0.7292757,  -0.7595531,
    -0.30982962,   -0.37637365,  0.27046034,   -0.2601264,   0.06654024,  0.83308995,  2.1443768,
    0.7846114,     0.72724646,   0.43702295,   -1.3782393,   -1.555314,   1.0024056,   0.96103704,
    0.62146187,    2.4383464,    0.97525114,   0.1517681,    -0.05941461, 0.20787807,  -0.7399595,
    1.4447442,     0.370912,     1.5718691,    0.36367816,   1.2211394,   1.2772232,   0.46179056,
    1.0423609,     -0.1160976,   -1.8006848,   0.2063675,    0.699636,    -0.2978242,  0.36548108,
    0.13973325,    0.06818205,   -0.8364538,   -1.8770711,   -0.46342957, 0.5138623,   -0.7012725,
    1.3353106,     -0.7529058,   -0.5607584,   -0.3658438,   1.3651763,   -0.8271546,  -1.3937892,
    -0.4218138,    -1.5759501,   0.052277893,  -0.79160595,  1.0530065,   -0.25257057, 1.7259041,
    -0.09510864,   0.31564656,   -1.4286227,   2.806394,     -2.0088015,  0.6337404,   -1.4553217,
    0.3904129,     -0.8321003,   2.0365574,    -0.47588396,  0.03407097,  0.08727789,  2.440409,
    -1.3018095,    1.9136591,    1.5979958,    1.496789,     -0.2709299,  -0.38308293, -1.0800201,
    -0.7544405,    0.074904405,  1.2379612,    -0.62439823,  0.5188385,   -0.05306366, 1.060843,
    -0.17591527,   -0.21396813,  -0.27043432,  0.16332026,   -0.57039225, -0.76971775, -0.22342275,
    -0.28223512,   -0.66207,     -1.0938429,   -4.0251827,   4.238682,    -2.3085427,  4.3264065,
    -1.419694,     3.9545622,    -3.0023227,   3.424511,     -1.9520879,  3.0750623,   -3.127586,
    3.9366179,     -1.3875456,    3.5732715,   -3.2088501,   5.656434,    -3.9873497,  3.1138892,
    -2.331269,     4.533456};

// static const std::vector<float> expected_dft2d_signal_size_results = {
//     5.617592,    4.556302,     -0.022094011, 0.81712115,   -0.63794327,  0.39967042,   1.3993785,
//     -0.68460006, 0.8433839,    -0.23941302,  4.3669686,    4.9382,       -1.2188411,   0.24983862,
//     0.46347564,  0.8468862,    -1.533869,    0.9178821,    0.19100048,   0.5832793,    6.4849105,
//     5.073366,    0.7497048,    -0.6282683,   -1.8429368,   0.8678154,    0.94163096,   -1.9365823,
//     -0.10082227, 0.37635326,   5.54053,      4.2301183,    -0.106952965, 0.84283286,   -0.32895666,
//     0.003486216, -0.9828145,   -1.7377248,   1.0077263,    1.465507,     5.2889757,    4.473157,
//     -0.47761202, 1.8925943,    -0.18330812,  0.30803126,   -1.056036,    -0.35692158,  -0.6717657,
//     0.7024461,   4.961774,     4.143119,     -0.13420701,  -0.34274292,  0.092079446,  0.9529029,
//     -0.49314553, -0.81881034,  1.0455608,    -1.3971546,   6.1778173,    3.4187582,    0.17859784,
//     -0.7099223,  -0.41969734,  -0.44534498,  1.644799,     1.4162326,    1.0191747,    1.6237493,
//     4.463739,    5.1634293,    0.03616643,   0.9294551,    -0.39777744,  -0.34441274,  -1.2150838,
//     1.1694827,   -0.6253926,   2.1067133,    5.7570114,    6.1454487,    0.17800298,   -0.48648348,
//     -0.70634323, 0.5274749,    1.4027178,    -0.015500322, 2.0158982,    2.5455475,    4.751776,
//     5.3099685,   -0.35505342,  0.6801684,    0.8954881,    -0.997462,    -0.54880273,  -0.3004936,
//     1.0463549,   -0.046952873, 5.8756933,    -0.03026104,  -0.35460743,  0.35470247,   1.1115319,
//     0.33610708,  1.8681753,    -1.5788491,   0.59577,      -1.9351158,   4.7597427,    0.66553724,
//     -1.2398508,  0.08623244,   0.9278299,    -0.8243906,   -0.5629874,   0.6767825,    0.29041037,
//     0.5854204,   6.210802,     -0.8770375,   0.14521194,   -0.8332888,   -0.4823165,   0.9535419,
//     0.67028284,  -1.561087,    0.8835628,    1.1927383,    5.8007603,    -1.4475886,   1.4100667,
//     0.96549666,  0.4454357,    0.1051473,    -0.82895976,  0.043896854,  1.5152982,    0.3332396,
//     5.639474,    -1.0264597,   1.1941155,    1.0927869,    -0.7826585,   0.97284365,   -0.22290489,
//     0.5171275,   0.58201337,   1.469255,     4.261281,     0.12643695,   0.08233683,   -0.4670865,
//     -0.05669667, 1.0405537,    -1.0038826,   -1.0168068,   -0.9063839,   -2.4745474,   4.6205277,
//     -1.2569494,  -0.19603403,  -0.20071115,  -0.4717548,   -0.21618116,  1.0929866,    -0.10068667,
//     1.6972653,   0.3543473,    5.961877,     1.0256746,    -0.64574534,  0.2156266,    -0.83267736,
//     -0.83728784, 0.65233463,   0.59890246,   0.51881886,   1.7798078,    5.024,        0.19929314,
//     0.10566887,  -0.057232887, 0.8231057,    0.454063,     -0.20336053,  -1.1380688,   1.9141313,
//     0.7800113,   5.2412295,    0.84448254,   1.155933,     1.5703017,    -0.7671306,   -0.65364957,
//     0.8073452,   -0.4501571,   0.4215663,    -0.03594196,  1.2891304,    -0.28836226,  -0.81702614,
//     0.6872159,   1.0479685,    -1.413368,    0.97392625,   -2.0476458,   -1.0999328,   -1.6875019,
//     0.48707998,  0.272763,     -1.4034569,   0.10724205,   -0.7434469,   -1.2887449,   -0.804087,
//     -0.2940991,  0.29255152,   0.48601052,   0.2603984,    -0.6029291,   -0.059808552, -0.22879595,
//     -0.39659,    -0.4070784,   1.0457782,    -1.2897389,   1.6999478,    0.20835316,   0.12305355,
//     -1.7078186,  1.5327306,    -0.55152303,  0.5470968,    -0.66924506,  0.95266193,   -0.109957874,
//     0.38303086,  -0.17433232,  0.13985753,   -1.3769581,   0.39430797,   -0.5789406,   -0.11784613,
//     1.5721941,   0.6511442,    -0.31600353,  1.3488222,    0.215476,     0.24459958,   0.8269298,
//     -0.04200673, -0.68363035,  0.030954078,  1.1893297,    -1.201879,    -0.50606966,  -1.9837768,
//     -0.5226027,  -0.055179834, 0.3003404,    0.3131771,    0.17392072,   -0.24259096,  -0.16412371,
//     -0.4239326,  0.45112562,   0.42786324,   -0.32374328,  1.824122,     -0.47246337,  -1.3595738,
//     0.89753836,  -1.3255525,   -0.40238792,  0.08175433,   -1.2685161,   0.19191338,   0.63559633,
//     -0.9221556,  0.9323046,    0.5349195,    0.015101224,  0.7496938,    -1.0753859,   -1.3259289,
//     0.4680096,   0.14859521,   0.88177836,   0.7757436,    0.3550291,    2.0460663,    0.059315175,
//     -0.4233182,  1.0089691,    0.6576817,    -1.806305,    0.43257722,   0.5888467,    1.0310292,
//     4.2982006,   -0.48451272,  1.1496346,    -0.7015066,   -1.3498046,   0.5051295,    -1.1533968,
//     -0.8523189,  0.008200884,  0.09430575,   4.545426,     -1.3824472,   0.2708482,    -1.2078011,
//     0.38253194,  -1.7749686,   -0.052999496, 0.1931416,    0.48386937,   0.5345068,    5.3474746,
//     0.5446843,   -0.023775458, -1.7572103,   -0.49280488,  1.3171263,    -1.6652342,   0.7155627,
//     -0.6080318,  -0.13717651,  3.9698882,    0.01571083,   -0.6741868,   -0.22729556,  -0.77090615,
//     0.7988072,   -1.8915796,   -0.124541044, 0.9579351,    -0.2106409,   4.1226583,    -1.2774194,
//     0.22086692,  0.48150426,   0.90738165,   -0.18198684,  -1.1900526,   0.09504321,   -0.5513329,
//     0.94509244,  4.8436117,    -0.25855058,  -0.5592868,   0.17973019,   1.101679,     -0.69114196,
//     -0.30807322, -0.03183198,  0.5547902,    1.50211,      4.976048,     0.687809,     -0.33529043,
//     -0.19053352, -0.39328754,  0.12787968,   1.9680449,    -0.25022733,  0.94565874,   0.325984,
//     3.6652915,   -0.6776621,   1.6113669,    -0.89065254,  0.09048718,   -1.7856641,   -0.6979357,
//     -0.95229805, 0.96250176,   -0.18914413,  6.8784604,    0.60725355,   -0.41414937,  -0.7797551,
//     -1.0019741,  0.28014937,   1.590578,     0.25036228,   2.6473145,    0.28629017,   4.820515,
//     0.53507984,  -0.83081806,  1.2393005,    0.6651567,    -0.69846624,  -1.6566415,   1.0573659,
//     0.57783574};

static const std::vector<float> expected_dft1d_bfloat16_results = {
    6.3125,     4.28125,   -0.804688,   -0.722656,  -0.0551758, 0.271484,    0.832031,  0.578125,
    0.601563,   -1.32031,  1.1875,      1.45313,    -0.0197754, -1.82813,    0.15332,   -2.21875,
    1.05469,    -1.0625,   -0.6875,     0.660156,   4.625,      4.5625,      -0.785156, -0.332031,
    -1.46875,   -1.15625,  0.710938,    1.45313,    -1.09375,   -0.394531,   -0.59375,  -0.8125,
    -0.388672,  -0.419922, 0.546875,    2.32813,    -0.59375,   1.39063,     -0.84375,  0.143555,
    6.25,       5.5625,    0.251953,    -1.70313,   1.16406,    0.120117,    0.195313,  -1.34375,
    -0.90625,   1.40625,   0.699219,    0.574219,   1.19531,    -0.515625,   -2.5625,   -0.804688,
    1.15625,    -0.859375, 1.28906,     -1,         5.625,      3.21875,     0.240234,  0.308594,
    0.617188,   0.0947266, 1.04688,     -0.0205078, -0.875,     -0.126953,   0.640625,  -0.84375,
    -0.050293,  -1.04688,  -0.40625,    0.207031,   0.443359,   0.458984,    1.375,     -0.65625,
    5.5,        3.75,      -1.88281,    -0.226563,  0.816406,   -0.464844,   0.121582,  0.609375,
    0.269531,   0.960938,  0.304688,    0.695313,   0.273438,   -1.07813,    0.207031,  1.5625,
    -0.277344,  0.890625,  -0.0373535,  -0.185547,  4.9375,     4.6875,      0.191406,  -0.882813,
    0.914063,   -0.53125,  -0.455078,   1.16406,    -1.46875,   1.66406,     1.01563,   -1.59375,
    -1.21875,   -0.126953, -0.137695,   -0.671875,  -0.324219,  -0.902344,   -0.960938, 0.0281982,
    4.75,       5.25,      -0.034668,   -0.378906,  -0.492188,  -0.65625,    0.816406,  -0.890625,
    -0.201172,  0.173828,  -0.996094,   0.828125,   0.554688,   -0.020752,   1.53125,   0.691406,
    0.227539,   0.503906,  2.42188,     0.220703,   6.4375,     5.6875,      -0.867188, -1.10156,
    0.128906,   1.34375,   0.363281,    0.289063,   -0.8125,    -0.0976563,  -0.328125, 0.78125,
    -0.960938,  0.898438,  -2.09375,    0.847656,   -1.53125,   0.742188,    1.32813,   -1.03125,
    3.79688,    5.625,     1.34375,     0.640625,   -0.213867,  -1.20313,    1.15625,   -0.0522461,
    0.476563,   -0.585938, 0.228516,    1.125,      0.421875,   0.363281,    -1.21875,  2.34375,
    0.644531,   0.804688,  1.15625,     0.863281,   5.59375,    5.65625,     0.484375,  0.59375,
    1.17969,    1.46875,   -1.25781,    -0.115723,  0.628906,   -1.46875,    0.789063,  0.179688,
    0.554688,   -2,        -0.435547,   0.992188,   0.898438,   -0.546875,   0.847656,  0.0820313,
    4.5,        4.3125,    0.726563,    0.8125,     0.273438,   -0.00793457, 0.365234,  0.671875,
    -2.375,     1.57813,   -0.167969,   0.511719,   -0.239258,  -0.128906,   1.54688,   0.625,
    0.769531,   1.60938,   0.363281,    -0.417969,  5.09375,    5.1875,      -1.1875,   1.17188,
    -0.0154419, -0.746094, 0.0834961,   0.225586,   1.10938,    2.28125,     -0.6875,   -0.410156,
    0.0449219,  0.867188,  -0.507813,   0.229492,   0.353516,   -0.457031,   0.145508,  -0.108887,
    4.78125,    5.25,      0.498047,    0.296875,   -0.410156,  -0.644531,   0.320313,  -0.898438,
    -1.03125,   0.914063,  0.675781,    0.0810547,  0.335938,   0.0527344,   -1.1875,   0.503906,
    -1.14063,   -1.42188,  0.820313,    1.89063,    6.875,      6.375,       -1.29688,  -0.229492,
    -0.220703,  1.04688,   -0.765625,   0.6875,     -0.734375,  0.173828,    0.0917969, -0.574219,
    -0.408203,  -0.953125, -0.890625,   1.3125,     -0.421875,  1.75781,     -0.640625, -1.59375,
    4.40625,    5.6875,    -1.10938,    0.103516,   -1.10938,   0.34375,     2.10938,   -0.0664063,
    -0.164063,  0.261719,  -0.808594,   -0.414063,  -1.14063,   -0.00567627, -0.625,    -0.146484,
    -0.710938,  0.149414,  -0.363281,   1.57813,    4.96875,    4.28125,     -0.84375,  0.53125,
    -0.601563,  -0.90625,  1.04688,     0.213867,   -0.472656,  -0.320313,   0.808594,  -0.0415039,
    0.632813,   0.15625,   -0.238281,   0.695313,   1.85938,    -1.69531,    1.25781,   -0.679688,
    4.90625,    4.875,     -0.00488281, -0.6875,    -0.213867,  -0.488281,   0.367188,  0.118164,
    -0.78125,   0.488281,  -0.5,        -0.0839844, 1.15625,    0.820313,    -0.640625, -1.09375,
    1.40625,    -0.148438, 2.875,       1.04688,    4.6875,     5.1875,      -0.632813, 2.53125,
    0.695313,   -0.539063, -0.09375,    0.566406,   0.410156,   0.632813,    -1.75781,  -0.5,
    -1.07813,   1.23438,   -0.355469,   -1.3125,    1.57813,    1.04688,     -0.613281, 0.742188,
    5.4375,     3.95313,   2,           -0.863281,  -0.765625,  0.0791016,   0.835938,  -0.632813,
    -0.671875,  1.73438,   0.9375,      1.82031,    0.855469,   -0.178711,   0.621094,  0.206055,
    0.15918,    1.85938,   0.0454102,   -0.488281,  4.9375,     4,           -0.746094, -0.277344,
    -0.804688,  -0.539063, 0.460938,    0.898438,   2.1875,     -1.46875,    -1.23438,  1.09375,
    -0.953125,  0.515625,  0.291016,    1.01563,    -0.22168,   0.113281,    -1.625,    -0.945313};

static const std::vector<float> expected_dft2d_bfloat16_results = {
    54,         48.25,     -1.85938,   -3.8125,    2.59375,   -0.714844,  3.53125,    1.67188,
    -3.39062,   0.214844,  2.95312,    2.39062,    0.369141,  -5.78125,   -4.4375,    5.3125,
    1.70312,    1.41406,   5.875,      -0.875,     -3.25,     -0.0917969, -0.34375,   2.59375,
    -2.75,      0.199219,  0.355469,   -0.271484,  5,         -2.96875,   -1.65625,   0.539062,
    -0.90625,   -3.65625,  -3.71875,   -0.671875,  2.0625,    -2.1875,    -3.34375,   3.53125,
    1.53125,    -1.60938,  -5.3125,    0.53125,    -1.66406,  2.4375,     -2.25,      1.42188,
    2.17188,    2.5,       0.867188,   1.65625,    1.71875,   -2.09375,   4.625,      -3.67188,
    0.890625,   -0.412109, -5.9375,    1.46875,    2.125,     -1.4375,    -3.48438,   3.09375,
    -3.29688,   4.78125,   5.65625,    -1.11719,   1.82812,   -2.5625,    -0.386719,  3.21875,
    1.42969,    0.859375,  6.125,      -1.73438,   2.28125,   4.375,      1.76562,    3.375,
    -0.535156,  3.75,      4.4375,     -4.3125,    -2.76562,  3.67188,    1.89062,    -2.59375,
    -2.96875,   1.14062,   1.46875,    0.75,       -1.3125,   1.0625,     -0.765625,  -10.875,
    2.96875,    -4.21875,  0.417969,   -0.457031,  -0.625,    0.585938,   -0.388672,  -0.980469,
    -0.147461,  -3.15625,  2.71875,    -3.875,     3.875,     1.04688,    -0.0986328, 7,
    4.5,        -0.378906, 0.648438,   -2.125,     3.9375,    -0.859375,  2.40625,    1.98438,
    3.65625,    -4.5,      -1.45312,   0.53125,    5.4375,    -2.67188,   -0.0605469, 3.67188,
    0.546875,   1.07812,   4.5,        -1.46094,   -2.39062,  0.539062,   -6.0625,    -2.34375,
    -1.46875,   -2.60938,  -4.375,     0.283203,   3.96875,   -3.78125,   -3.10938,   -2.85938,
    1.40625,    0.0375977, -2.07812,   1.64062,    0.601562,  -3.25,      -0.820312,  1.35938,
    -2.89062,   -3.4375,   -2.51562,   -2.8125,    -4.4375,   -2.34375,   0.664062,   -4.75,
    -2.125,     -1.07812,  1.15625,    -0.953125,  0.65625,   -4.03125,   -1.21875,   4.5625,
    -0.734375,  -3.21875,  1.25,       -4.03125,   -4.5625,   -3.51562,   6.6875,     -2.84375,
    -0.429688,  -4,        -4.1875,    3.01562,    4.59375,   2.6875,     2.34375,    -1.03906,
    -0.0419922, 2.17188,   -0.214844,  0.695312,   -0.921875, -7.1875,    3.79688,    3.1875,
    3.84375,    -1.89062,  0.898438,   -0.371094,  3.04688,   0.197266,   -0.102539,  -1,
    50.5,       49,        -2.59375,   3.39062,    -3.17188,  -2.40625,   4.75,       1.78906,
    -2.51562,   6.28125,   -2.64062,   1.48438,    -0.789062, 2.375,      -1.98438,   2.03125,
    3.625,      2.8125,    2.28125,    1.01562,    3.25,      -3.03125,   2.0625,     3.5625,
    1.96094,    0.248047,  -2.26562,   0.792969,   1.96094,   4.25,       -3.25,      0.78125,
    -2.9375,    0.667969,  5.71875,    4.84375,    -4.8125,   6.34375,    -2.64062,   -1.85938,
    -1.75781,   -1.09375,  1.42188,    -0.0986328, -2.76562,  -3.65625,   1.42188,    3.40625,
    3.09375,    0.113281,  -2.40625,   0.291016,   2.90625,   -1.85938,   -0.695312,  2.26562,
    -0.425781,  -5.8125,   5.3125,     -6.28125,   0.8125,    3.625,      1.3125,     2.34375,
    2.14062,    1.89062,   -2.4375,    0.382812,   2,         -0.0454102, -4.125,     -1.51562,
    -2.04688,   1.19531,   -0.65625,   -2.03125,   2.0625,    4.875,      -0.0996094, 1.42188,
    0.648438,   -4,        -0.8125,    0.445312,   2.78125,   0.4375,     -0.867188,  1.25,
    -2.70312,   2.8125,    4.125,      -1.9375,    -0.585938, -4.75,      3.14062,    0.796875,
    5.3125,     0.277344,  -3.64062,   -4.375,     -2.51562,  -0.925781,  6.8125,     -4.0625,
    -1.28125,   0.972656,  3.26562,    -3.40625,   -7.5625,   3.6875,     2.90625,    2.34375,
    2.73438,    -1.26562,  1.41406,    -1.83594,   -2.65625,  1.29688,    5.1875,     6.1875,
    0.484375,   2.10938,   5.875,      2.79688,    -0.386719, 0.00540161, -1.01562,   -1.54688,
    -8.0625,    -0.679688, 2.34375,    3.07812,    2.625,     1.375,      0.75,       2.26562,
    -1.28125,   2.125,     4.96875,    -0.0222168, 0.0286865, 1.15625,    -4.8125,    1.95312,
    1.96094,    2.34375,   -0.984375,  4.375,      -6.1875,   0.828125,   -2.75,      -2.92188,
    -3.45312,   -1.45312,  2.46875,    -0.789062,  -0.433594, 5.8125,     -2.65625,   -2.26562,
    -2.54688,   -3.125,    -4.4375,    0.167969,   1.92188,   1.04688,    2.79688,    -0.453125,
    -4.0625,    -2.21875,  1.78125,    -0.570312,  -2.1875,   3.01562,    5.3125,     -0.765625,
    5.9375,     0.157227,  -0.8125,    4.1875,     -3.84375,  -0.523438,  2.46875,    -2.375,
    -0.408203,  -0.953125, -0.984375,  0.144531,   0.253906,  0.816406,   2.34375,    4.0625,
    1.34375,    -0.574219, -0.0258789, -0.53125,   0.390625,  -1.75,      -4.3125,    -2.15625};

NGRAPH_TEST(${BACKEND_NAME}, dft1d_eval)
{
    auto data = std::make_shared<op::Parameter>(element::f32, Shape{2, 10, 10, 2});
    auto axes_input = op::Constant::create<int64_t>(element::i64, Shape{1}, {2});
    auto dft = std::make_shared<op::v7::DFT>(data, axes_input);

    auto f = make_shared<Function>(dft, ParameterVector{data});

    auto backend = runtime::Backend::create("${BACKEND_NAME}");
    auto dft_output = backend->create_tensor(element::f32, Shape{2, 10, 10, 2});

    auto backend_data = backend->create_tensor(element::f32, Shape{2, 10, 10, 2});
    copy_data(backend_data, input_data);

    auto handle = backend->compile(f);

    handle->call({dft_output}, {backend_data});

    auto result = read_vector<float>(dft_output);
    size_t num_of_elems = result.size();
    for (std::size_t j = 0; j < num_of_elems; ++j)
    {
        EXPECT_NEAR(result[j], expected_dft1d_results[j], 0.00001);
    }
}

NGRAPH_TEST(${BACKEND_NAME}, dft1d_eval_bfloat16)
{
    auto data = std::make_shared<op::Parameter>(element::bf16, Shape{2, 10, 10, 2});
    auto axes_input = op::Constant::create<int64_t>(element::i64, Shape{1}, {2});
    auto dft = std::make_shared<op::v7::DFT>(data, axes_input);

    auto f = make_shared<Function>(dft, ParameterVector{data});

    auto backend = runtime::Backend::create("${BACKEND_NAME}");
    auto dft_output = backend->create_tensor(element::bf16, Shape{2, 10, 10, 2});

    auto backend_data = backend->create_tensor(element::bf16, Shape{2, 10, 10, 2});
    copy_data(backend_data, bfloat16::from_float_vector(input_data));

    auto handle = backend->compile(f);

    handle->call({dft_output}, {backend_data});

    auto result = bfloat16::to_float_vector(read_vector<bfloat16>(dft_output));
    size_t num_of_elems = result.size();
    for (std::size_t j = 0; j < num_of_elems; ++j)
    {
        EXPECT_NEAR(result[j], expected_dft1d_bfloat16_results[j], 0.00001);
    }
}

NGRAPH_TEST(${BACKEND_NAME}, dft1d_signal_size_eval)
{
    auto data = std::make_shared<op::Parameter>(element::f32, Shape{2, 10, 10, 2});
    auto axes_input = op::Constant::create<int64_t>(element::i64, Shape{1}, {-2});
    auto signal_size_input = op::Constant::create<int64_t>(element::i64, Shape{1}, {20});
    auto dft = std::make_shared<op::v7::DFT>(data, axes_input, signal_size_input);

    auto f = make_shared<Function>(dft, ParameterVector{data});

    auto backend = runtime::Backend::create("${BACKEND_NAME}");
    auto dft_output = backend->create_tensor(element::f32, Shape{2, 20, 10, 2});

    auto backend_data = backend->create_tensor(element::f32, Shape{2, 10, 10, 2});
    copy_data(backend_data, input_data);

    auto handle = backend->compile(f);

    handle->call({dft_output}, {backend_data});

    auto result = read_vector<float>(dft_output);
    size_t num_of_elems = result.size();
    for (std::size_t j = 0; j < num_of_elems; ++j)
    {
        EXPECT_NEAR(result[j], expected_dft1d_signal_size_results[j], 0.00001);
    }
}

NGRAPH_TEST(${BACKEND_NAME}, dft1d_eval_i32)
{
    auto data = std::make_shared<op::Parameter>(element::f32, Shape{2, 10, 10, 2});
    auto axes_input = op::Constant::create<int64_t>(element::i32, Shape{1}, {2});
    auto dft = std::make_shared<op::v7::DFT>(data, axes_input);

    auto f = make_shared<Function>(dft, ParameterVector{data});

    auto backend = runtime::Backend::create("${BACKEND_NAME}");
    auto dft_output = backend->create_tensor(element::f32, Shape{2, 10, 10, 2});

    auto backend_data = backend->create_tensor(element::f32, Shape{2, 10, 10, 2});
    copy_data(backend_data, input_data);

    auto handle = backend->compile(f);

    handle->call({dft_output}, {backend_data});

    auto result = read_vector<float>(dft_output);
    size_t num_of_elems = result.size();
    for (std::size_t j = 0; j < num_of_elems; ++j)
    {
        EXPECT_NEAR(result[j], expected_dft1d_results[j], 0.00001);
    }
}

NGRAPH_TEST(${BACKEND_NAME}, dft2d_eval)
{
    auto data = std::make_shared<op::Parameter>(element::f32, Shape{2, 10, 10, 2});
    auto axes_input = op::Constant::create<int64_t>(element::i64, Shape{2}, {1, 2});
    auto dft = std::make_shared<op::v7::DFT>(data, axes_input);

    auto f = make_shared<Function>(dft, ParameterVector{data});

    auto backend = runtime::Backend::create("${BACKEND_NAME}");
    auto dft_output = backend->create_tensor(element::f32, Shape{2, 10, 10, 2});

    auto backend_data = backend->create_tensor(element::f32, Shape{2, 10, 10, 2});
    copy_data(backend_data, input_data);

    auto handle = backend->compile(f);

    handle->call({dft_output}, {backend_data});

    auto result = read_vector<float>(dft_output);
    size_t num_of_elems = result.size();
    for (std::size_t j = 0; j < num_of_elems; ++j)
    {
        EXPECT_NEAR(result[j], expected_dft2d_results[j], 0.000062);
    }
}

NGRAPH_TEST(${BACKEND_NAME}, dft2d_eval_bfloat16)
{
    auto data = std::make_shared<op::Parameter>(element::bf16, Shape{2, 10, 10, 2});
    auto axes_input = op::Constant::create<int64_t>(element::i64, Shape{2}, {1, 2});
    auto dft = std::make_shared<op::v7::DFT>(data, axes_input);

    auto f = make_shared<Function>(dft, ParameterVector{data});

    auto backend = runtime::Backend::create("${BACKEND_NAME}");
    auto dft_output = backend->create_tensor(element::bf16, Shape{2, 10, 10, 2});

    auto backend_data = backend->create_tensor(element::bf16, Shape{2, 10, 10, 2});
    copy_data(backend_data, bfloat16::from_float_vector(input_data));

    auto handle = backend->compile(f);

    handle->call({dft_output}, {backend_data});

    auto result = bfloat16::to_float_vector(read_vector<bfloat16>(dft_output));
    size_t num_of_elems = result.size();
    for (std::size_t j = 0; j < num_of_elems; ++j)
    {
        EXPECT_NEAR(result[j], expected_dft2d_bfloat16_results[j], 0.0001);
    }
}

// NGRAPH_TEST(${BACKEND_NAME}, dft2d_signal_size_eval)
// {
//     auto data = std::make_shared<op::Parameter>(element::f32, Shape{2, 10, 10, 2});
//     auto axes_input = op::Constant::create<int64_t>(element::i64, Shape{2}, {0, 2});
//     auto signal_size_input = op::Constant::create<int64_t>(element::i64, Shape{2}, {4, 5});
//     auto dft = std::make_shared<op::v7::DFT>(data, axes_input, signal_size_input);
//
//     auto f = make_shared<Function>(dft, ParameterVector{data});
//
//     auto backend = runtime::Backend::create("${BACKEND_NAME}");
//     auto dft_output = backend->create_tensor(element::f32, Shape{4, 10, 5, 2});
//
//     auto backend_data = backend->create_tensor(element::f32, Shape{2, 10, 10, 2});
//     copy_data(backend_data, input_data);
//
//     auto handle = backend->compile(f);
//
//     handle->call({dft_output}, {backend_data});
//
//     auto result = read_vector<float>(dft_output);
//     std::cout << "Actual result: ";
//     for (auto x : result)
//     {
//         std::cout << x << ", ";
//     }
//     std::cout << "\n";
//     EXPECT_TRUE(test::all_close_f(expected_dft2d_signal_size_results, result));
//     // size_t num_of_elems = result.size();
//     // for (std::size_t j = 0; j < num_of_elems; ++j)
//     // {
//     //     EXPECT_NEAR(result[j], expected_dft1d_signal_size_results[j], 0.00001);
//     // }
// }

NGRAPH_TEST(${BACKEND_NAME}, dft2d_eval_i32)
{
    auto data = std::make_shared<op::Parameter>(element::f32, Shape{2, 10, 10, 2});
    auto axes_input = op::Constant::create<int64_t>(element::i32, Shape{2}, {1, 2});
    auto dft = std::make_shared<op::v7::DFT>(data, axes_input);

    auto f = make_shared<Function>(dft, ParameterVector{data});

    auto backend = runtime::Backend::create("${BACKEND_NAME}");
    auto dft_output = backend->create_tensor(element::f32, Shape{2, 10, 10, 2});

    auto backend_data = backend->create_tensor(element::f32, Shape{2, 10, 10, 2});
    copy_data(backend_data, input_data);

    auto handle = backend->compile(f);

    handle->call({dft_output}, {backend_data});

    auto result = read_vector<float>(dft_output);
    size_t num_of_elems = result.size();
    for (std::size_t j = 0; j < num_of_elems; ++j)
    {
        EXPECT_NEAR(result[j], expected_dft2d_results[j], 0.000062);
    }
}

NGRAPH_TEST(${BACKEND_NAME}, dft3d_eval)
{
    auto data = std::make_shared<op::Parameter>(element::f32, Shape{2, 10, 10, 2});
    auto axes_input = op::Constant::create<int64_t>(element::i64, Shape{3}, {0, 1, 2});
    auto dft = std::make_shared<op::v7::DFT>(data, axes_input);

    auto f = make_shared<Function>(dft, ParameterVector{data});

    auto backend = runtime::Backend::create("${BACKEND_NAME}");
    auto dft_output = backend->create_tensor(element::f32, Shape{2, 10, 10, 2});

    auto backend_data = backend->create_tensor(element::f32, Shape{2, 10, 10, 2});
    copy_data(backend_data, input_data);

    auto handle = backend->compile(f);

    handle->call({dft_output}, {backend_data});

    auto result = read_vector<float>(dft_output);
    size_t num_of_elems = result.size();
    for (std::size_t j = 0; j < num_of_elems; ++j)
    {
        EXPECT_NEAR(result[j], expected_dft3d_results[j], 0.0002);
    }
}

NGRAPH_TEST(${BACKEND_NAME}, dft3d_eval_bfloat16)
{
    auto data = std::make_shared<op::Parameter>(element::bf16, Shape{2, 10, 10, 2});
    auto axes_input = op::Constant::create<int64_t>(element::i64, Shape{3}, {0, 1, 2});
    auto dft = std::make_shared<op::v7::DFT>(data, axes_input);

    auto f = make_shared<Function>(dft, ParameterVector{data});

    auto backend = runtime::Backend::create("${BACKEND_NAME}");
    auto dft_output = backend->create_tensor(element::bf16, Shape{2, 10, 10, 2});

    auto backend_data = backend->create_tensor(element::bf16, Shape{2, 10, 10, 2});
    copy_data(backend_data, bfloat16::from_float_vector(input_data));

    auto handle = backend->compile(f);

    handle->call({dft_output}, {backend_data});

    auto result = bfloat16::to_float_vector(read_vector<bfloat16>(dft_output));
    std::cout << "Actual result: ";
    for (auto x : result)
    {
        std::cout << x << ", ";
    }
    std::cout << "\n";
    EXPECT_TRUE(test::all_close_f(expected_dft3d_results, result));
//     size_t num_of_elems = result.size();
//     for (std::size_t j = 0; j < num_of_elems; ++j)
//     {
//         EXPECT_NEAR(result[j], expected_dft3d_results[j], 0.0002);
//     }
}

NGRAPH_TEST(${BACKEND_NAME}, dft3d_eval_i32)
{
    auto data = std::make_shared<op::Parameter>(element::f32, Shape{2, 10, 10, 2});
    auto axes_input = op::Constant::create<int64_t>(element::i32, Shape{3}, {0, 1, 2});
    auto dft = std::make_shared<op::v7::DFT>(data, axes_input);

    auto f = make_shared<Function>(dft, ParameterVector{data});

    auto backend = runtime::Backend::create("${BACKEND_NAME}");
    auto dft_output = backend->create_tensor(element::f32, Shape{2, 10, 10, 2});

    auto backend_data = backend->create_tensor(element::f32, Shape{2, 10, 10, 2});
    copy_data(backend_data, input_data);

    auto handle = backend->compile(f);

    handle->call({dft_output}, {backend_data});

    auto result = read_vector<float>(dft_output);
    size_t num_of_elems = result.size();
    for (std::size_t j = 0; j < num_of_elems; ++j)
    {
        EXPECT_NEAR(result[j], expected_dft3d_results[j], 0.0002);
    }
}
