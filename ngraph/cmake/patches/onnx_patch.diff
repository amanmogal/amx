diff --git a/CMakeLists.txt b/CMakeLists.txt
index 5254f7ee..2e509de4 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -347,18 +347,33 @@ if (MSVC)
   else()
     set(EXTRA_FLAGS "")
   endif()
-  if (BUILD_SHARED_LIBS OR ONNX_BUILD_MAIN_LIB)
-    set(ONNX_API_DEFINE "-DONNX_API=__declspec(dllexport)")
+endif()
+
+# onnx_proto symbols visibility
+if(MSVC)
+  if(ONNX_BUILD_MAIN_LIB)
+  # ONNX_BUILD_MAIN_LIB can be be set if onnx_proto is static,
+  # but it is linked into a shared library which wants
+  # to export the ONNX APIs and classes.
+  target_compile_definitions(onnx_proto PUBLIC "ONNX_API=__declspec(dllexport)")
+
+  elseif(BUILD_SHARED_LIBS)
+    # users of onnx_proto import symbols
+    target_compile_definitions(onnx_proto INTERFACE "ONNX_API=__declspec(dllimport)")
+    # onnx_proto exports symbols
+    target_compile_definitions(onnx_proto PRIVATE "ONNX_API=__declspec(dllexport)")
+
   else()
-    set(ONNX_API_DEFINE "-DONNX_API=")
+    # Windows static libs don't need symbols visibility decorators
+    target_compile_definitions(onnx_proto PUBLIC "ONNX_API=")
   endif()
 else()
   # On non-Windows, hide all symbols we don't need
-  set(ONNX_API_DEFINE "-DONNX_API=__attribute__\(\(__visibility__\(\"default\"\)\)\)")
-  set_target_properties(onnx_proto PROPERTIES CXX_VISIBILITY_PRESET hidden)
-  set_target_properties(onnx_proto PROPERTIES VISIBILITY_INLINES_HIDDEN 1)
+    target_compile_definitions(onnx_proto PUBLIC "ONNX_API=__attribute__\(\(__visibility__\(\"default\"\)\)\)")
+    set_target_properties(onnx_proto PROPERTIES
+      CXX_VISIBILITY_PRESET hidden
+      VISIBILITY_INLINES_HIDDEN ON)
 endif()
-target_compile_definitions(onnx_proto PRIVATE ${ONNX_API_DEFINE})
 
 if(ONNX_USE_LITE_PROTO)
   if(TARGET protobuf::libprotobuf-lite)
@@ -380,7 +395,8 @@ if(CMAKE_SYSTEM_NAME STREQUAL "AIX")
   # So, create a object library
   add_library(onnx OBJECT ${ONNX_SRCS})
 else()
-  add_library(onnx ${ONNX_SRCS})
+  # onnx target doesn't export symbols and should be built as static lib
+  add_library(onnx STATIC ${ONNX_SRCS})
 endif()
 
 target_include_directories(onnx PUBLIC
diff --git a/onnx/onnx_pb.h b/onnx/onnx_pb.h
index 7dc68dea..b94f7af2 100644
--- a/onnx/onnx_pb.h
+++ b/onnx/onnx_pb.h
@@ -4,48 +4,6 @@
 #ifndef ONNX_ONNX_PB_H
 #define ONNX_ONNX_PB_H
 
-// Defines ONNX_EXPORT and ONNX_IMPORT. On Windows, this corresponds to
-// different declarations (dllexport and dllimport). On Linux/Mac, it just
-// resolves to the same "default visibility" setting.
-#if defined(_MSC_VER)
-#if defined(ONNX_BUILD_SHARED_LIBS) || defined(ONNX_BUILD_MAIN_LIB)
-#define ONNX_EXPORT __declspec(dllexport)
-#define ONNX_IMPORT __declspec(dllimport)
-#else
-#define ONNX_EXPORT
-#define ONNX_IMPORT
-#endif
-#else
-#if defined(__GNUC__)
-#define ONNX_EXPORT __attribute__((__visibility__("default")))
-#else
-#define ONNX_EXPORT
-#endif
-#define ONNX_IMPORT ONNX_EXPORT
-#endif
-
-// ONNX_API is a macro that, depends on whether you are building the
-// main ONNX library or not, resolves to either ONNX_EXPORT or
-// ONNX_IMPORT.
-//
-// This is used in e.g. ONNX's protobuf files: when building the main library,
-// it is defined as ONNX_EXPORT to fix a Windows global-variable-in-dll
-// issue, and for anyone dependent on ONNX it will be defined as
-// ONNX_IMPORT. ONNX_BUILD_MAIN_LIB can also be set when being built
-// statically if ONNX is being linked into a shared library that wants
-// to export the ONNX APIs and classes.
-//
-// More details on Windows dllimport / dllexport can be found at
-// https://msdn.microsoft.com/en-us/library/3y1sfaz2.aspx
-//
-// This solution is similar to
-// https://github.com/pytorch/pytorch/blob/master/caffe2/core/common.h
-#if defined(ONNX_BUILD_SHARED_LIBS) || defined(ONNX_BUILD_MAIN_LIB)
-#define ONNX_API ONNX_EXPORT
-#else
-#define ONNX_API ONNX_IMPORT
-#endif
-
 #ifdef ONNX_ML
 #include "onnx/onnx-ml.pb.h"
 #else
