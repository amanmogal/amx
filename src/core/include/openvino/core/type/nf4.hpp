// Copyright (C) 2018-2023 Intel Corporation
// SPDX-License-Identifier: Apache-2.0
//

#pragma once

#include <cmath>
#include <iostream>
#include <limits>
#include <memory>
#include <string>
#include <vector>

#include "openvino/core/core_visibility.hpp"
#include "openvino/core/type/float16.hpp"

#define ROUND_MODE_TO_NEAREST_EVEN

namespace ov {
class OPENVINO_API nf4 {
public:
    nf4() = default;

    template<typename T>
    static void pack(uint8_t *dst, const T *src, std::size_t count);

    template<typename T>
    static void pack_one(uint8_t *dst, T src, std::size_t idx);

    template<typename T>
    static void unpack(T *dst, const uint8_t *src, std::size_t count);

    template<typename T>
    static void unpack_one(T *dst, const uint8_t *src, std::size_t idx);
private:
    static float16 dhDequantizeNF4(unsigned char val)
    {
        // the values for this tree was generated by test_normal_map_tree
        // in the file tests/test_functional.py
        if((val & 0b1000) == 8)
            if((val & 0b0100) == 4) // 1
            if((val & 0b0010) == 2) // 11
                if((val & 0b0001) == 1) // 111
                return 1.0f; 
                else
                return 0.7229568362236023f;
            else
                if((val & 0b0001) == 1) // 110
                return 0.5626170039176941f; 
                else
                return 0.44070982933044434f; 
            else
            if((val & 0b0010) == 2) //10
                if((val & 0b0001) == 1) // 101
                return 0.33791524171829224f; 
                else
                return 0.24611230194568634f; 
            else 
                if((val & 0b0001) == 1) // 100
                return 0.16093020141124725f; 
                else
                return 0.07958029955625534f; 

        else
            if((val & 0b0100) == 4) // 0
            if((val & 0b0010) == 2) //01
                if((val & 0b0001) == 1) // 011
                return 0.0f; 
                else
                return -0.09105003625154495f; 
            else
                if((val & 0b0001) == 1) // 010
                return -0.18477343022823334f; 
                else
                return -0.28444138169288635f;
            else
            if((val & 0b0010) == 2) //00
                if((val & 0b0001) == 1) // 001
                return -0.39491748809814453f;
                else
                return -0.5250730514526367f; 
            else 
                if((val & 0b0001) == 1) // 000
                return -0.6961928009986877f; 
                else
                return -1.0f; 
    }

    static float dDequantizeNF4(unsigned char val)
    {
        // the values for this tree was generated by test_normal_map_tree
        // in the file tests/test_functional.py
        if((val & 0b1000) == 8)
            if((val & 0b0100) == 4) // 1
            if((val & 0b0010) == 2) // 11
                if((val & 0b0001) == 1) // 111
                return 1.0f; 
                else
                return 0.7229568362236023f;
            else
                if((val & 0b0001) == 1) // 110
                return 0.5626170039176941f; 
                else
                return 0.44070982933044434f; 
            else
            if((val & 0b0010) == 2) //10
                if((val & 0b0001) == 1) // 101
                return 0.33791524171829224f; 
                else
                return 0.24611230194568634f; 
            else 
                if((val & 0b0001) == 1) // 100
                return 0.16093020141124725f; 
                else
                return 0.07958029955625534f; 

        else
            if((val & 0b0100) == 4) // 0
            if((val & 0b0010) == 2) //01
                if((val & 0b0001) == 1) // 011
                return 0.0f; 
                else
                    return -0.09105003625154495f; 
            else
                if((val & 0b0001) == 1) // 010
                    return -0.18477343022823334f; 
                else
                    return -0.28444138169288635f;
            else
            if((val & 0b0010) == 2) //00
                if((val & 0b0001) == 1) // 001
                    return -0.39491748809814453f;
                else
                    return -0.5250730514526367f; 
            else 
                if((val & 0b0001) == 1) // 000
                    return -0.6961928009986877f; 
                else
                    return -1.0f; 
    }

    static uint8_t dQuantizeNF4(float x)
    {
        // the values for this tree was generated by test_normal_map_tree
        // in the file tests/test_functional.py
        if(x > 0.03979014977812767f)
            if(x > 0.3893125355243683f) // 1
            if(x > 0.6427869200706482f) // 11
                if(x > 0.8614784181118011f) // 111
                return 0b1111;
                else
                return 0b1110;
            else
                if(x > 0.5016634166240692f) // 110
                return 0b1101;
                else
                return 0b1100;
            else
            if(x > 0.2035212516784668f) // 10
                if(x > 0.2920137718319893f) // 101
                return 0b1011;
                else
                return 0b1010;
            else
                if(x > 0.1202552504837513f) // 100
                return 0b1001;
                else
                return 0b1000;
        else
            if(x > -0.33967943489551544f) // 0
            if(x > -0.13791173323988914f) // 01
                if(x > -0.045525018125772476f) // 011
                return 0b0111;
                else
                return 0b0110;
            else
                if(x > -0.23460740596055984f) // 010
                return 0b0101;
                else
                return 0b0100;
            else
            if(x > -0.6106329262256622f) // 00
                if(x > -0.4599952697753906f) // 001
                return 0b0011;
                else
                return 0b0010;
            else
                if(x > -0.8480964004993439f) // 000
                return 0b0001;
                else
                return 0b0000;
    }
};


template<typename T>
void nf4::pack_one(uint8_t *dst, T src, std::size_t idx)
{
    uint8_t val = dQuantizeNF4(src);
    const size_t byte_idx = idx / 2;
    const uint8_t bit_shift = 4 * (++idx % 2);
    dst[byte_idx] &= ~(0xF << bit_shift);         // half byte zeroed
    dst[byte_idx] |= ((val & 0xF) << bit_shift);  // set 1's
}


template <typename T>
void nf4::pack(uint8_t *dst, const T *src, std::size_t count) {
    for (size_t i = 0; i < count; i++) {
        pack(dst, src[i], i);
    }
}


template<typename T>
void nf4::unpack_one(T *dst, uint8_t *src, std::size_t idx) {
    const size_t byte_idx = idx / 2;
    const uint8_t bit_shift = 4 * (++idx % 2);
    uint8_t idx = (src[byte_idx] >> bit_shift) & 0xF;
    dst[idx] = dDequantizeNF4(idx);
}

template <typename T>
void nf4::unpack(T *dst, const uint8_t *src, std::size_t count) {
    for (size_t i = 0; i < count; i++) {
        unpack_one(dst, src[i], i);
    }
}

};
