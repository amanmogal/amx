import os.path
import sys
import fnmatch
import re
import subprocess
from pathlib import Path
from setuptools import setup, find_packages, Extension
from setuptools.command.build_ext import build_ext
from setuptools.command.build_clib import build_clib
from distutils.command.install import install
from distutils.command.build import build
from distutils.errors import DistutilsSetupError
from distutils.file_util import copy_file


CMAKE_INSTALL_CORE_DIR = "libs.core"
CMAKE_INSTALL_PLUGINS_DIR = "libs.plugins"
CMAKE_INSTALL_NGRAPH_DIR = "libs.ngraph"
CMAKE_INSTALL_TBB_DIR = "libs.tbb"
CMAKE_INSTALL_BIND_DIR = "bindings"
CMAKE_BUILD_DIR = "${CMAKE_BINARY_DIR}"
CMAKE_INSTALL_CORE_SUBDIR = os.path.normpath("${IE_CPACK_RUNTIME_PATH}")
CMAKE_INSTALL_PLUGINS_SUBDIR = os.path.normpath("${IE_CPACK_RUNTIME_PATH}")
CMAKE_INSTALL_NGRAPH_SUBDIR = os.path.normpath("${IE_CPACK_IE_DIR}/../ngraph/lib")
CMAKE_INSTALL_BIND_SUBDIR = os.path.normpath("${PYTHON_BRIDGE_CPACK_PATH}/${PYTHON_VERSION}")
CMAKE_INSTALL_TBB_SUBDIR = os.path.normpath(f"${IE_CPACK_IE_DIR}/external/tbb/{'bin' if sys.platform == 'win32' else 'lib'}")

CORE_LIBS_DIR = os.path.join(CMAKE_INSTALL_CORE_DIR, CMAKE_INSTALL_CORE_SUBDIR)
PLUGINS_LIBS_DIR = os.path.join(CMAKE_INSTALL_PLUGINS_DIR, CMAKE_INSTALL_CORE_SUBDIR)
NGRAPH_LIBS_DIR = os.path.join(CMAKE_INSTALL_NGRAPH_DIR, CMAKE_INSTALL_NGRAPH_SUBDIR)
TBB_LIBS_DIR = os.path.join(CMAKE_INSTALL_TBB_DIR, CMAKE_INSTALL_TBB_SUBDIR)
BINDINGS_DIR = os.path.join(CMAKE_INSTALL_BIND_DIR, CMAKE_INSTALL_BIND_SUBDIR)
RELOCATABLE_LIBS = {CORE_LIBS_DIR, NGRAPH_LIBS_DIR}
ALL_LIBS = {CORE_LIBS_DIR, PLUGINS_LIBS_DIR, NGRAPH_LIBS_DIR, TBB_LIBS_DIR}

class PrebuiltExtension(Extension):
    def __init__(self, name, sources, *args, **kw):
        if len(sources) != 1:
            raise DistutilsSetupError(
                "PrebuiltExtension can accept only one source.")
        super(PrebuiltExtension, self).__init__(name, sources, *args, **kw)


class CustomBuild(build):
    def run(self):
        self.run_command('build_clib')
        build.run(self)

class CustomInstall(install):
    def run(self):
        self.run_command('build_clib')
        install.run(self)


class PrepareLibs(build_clib):
    def run(self):
        self.announce("Installing core libraries", level=3)
        self.spawn(["cmake",
                    "--install", CMAKE_BUILD_DIR,
                    "--prefix", CMAKE_INSTALL_CORE_DIR,
                    "--component", "core"])

        self.announce("Installing hetero plugin", level=3)
        self.spawn(["cmake",
                    "--install", CMAKE_BUILD_DIR,
                    "--prefix", CMAKE_INSTALL_PLUGINS_DIR,
                    "--component", "hetero"])

        self.announce("Installing clDNN plugin", level=3)
        self.spawn(["cmake",
                    "--install", CMAKE_BUILD_DIR,
                    "--prefix", CMAKE_INSTALL_PLUGINS_DIR,
                    "--component", "cldnn"])

        self.announce("Installing mklDNN plugin", level=3)
        self.spawn(["cmake",
                    "--install", CMAKE_BUILD_DIR,
                    "--prefix", CMAKE_INSTALL_PLUGINS_DIR,
                    "--component", "mkldnn"])

        self.announce("Installing multi plugin", level=3)
        self.spawn(["cmake",
                    "--install", CMAKE_BUILD_DIR,
                    "--prefix", CMAKE_INSTALL_PLUGINS_DIR,
                    "--component", "multi"])

        self.announce("Installing ngraph", level=3)
        self.spawn(["cmake",
                    "--install", CMAKE_BUILD_DIR,
                    "--prefix", CMAKE_INSTALL_NGRAPH_DIR,
                    "--component", "ngraph"])

        self.announce("Installing ie python api", level=3)
        self.spawn(["cmake",
                    "--install", CMAKE_BUILD_DIR,
                    "--prefix", CMAKE_INSTALL_BIND_DIR,
                    "--component", python_version])

        self.announce("Installing ngraph python api", level=3)
        self.spawn(["cmake",
                    "--install", CMAKE_BUILD_DIR,
                    "--prefix", CMAKE_INSTALL_BIND_DIR,
                    "--component", f"pyngraph_{python_version}"])

        self.announce("Installing tbb", level=3)
        self.spawn(["cmake",
                    "--install", CMAKE_BUILD_DIR,
                    "--prefix", CMAKE_INSTALL_TBB_DIR,
                    "--component", "tbb"])
        self.announce("Configuring libraries", level=3)

        self.announce("Configuring libraries", level=3)
        if sys.platform != "win32":
            rpath = ""
            lib_pattern = ""
            if sys.platform == "linux":
                rpath = "$ORIGIN"
                lib_pattern = "*.so"
            elif sys.platform == "darwin":
                rpath = "@loader_path"
                lib_pattern = "*.dylib"
            for lib in RELOCATABLE_LIBS:
                for path in Path(lib).glob(lib_pattern):
                    set_rpath(rpath, path)


class CopyExt(build_ext):
    def run(self):
        for extension in self.extensions:
            if not isinstance(extension, PrebuiltExtension):
                raise DistutilsSetupError(
                    "copy_ext can accept PrebuiltExtension only")
            src = extension.sources[0]
            dst = self.get_ext_fullpath(extension.name)
            try:
                os.makedirs(os.path.dirname(dst), exist_ok=True)
            except OSError as exc:
                if exc.errno != errno.EEXIST:
                    raise
            copy_file(src, dst, verbose=self.verbose, dry_run=self.dry_run)
            #setting relative path to find dlls
            rpath = os.path.relpath(BINDINGS_DIR, os.path.dirname(src))
            if sys.platform == "linux":
                rpath = os.path.join("$ORIGIN", rpath, "openvino.libs")
            elif sys.platform == "darwin":
                rpath = os.path.join("@loader_path", rpath, "openvino.libs")
            set_rpath(rpath, dst)


def set_rpath(rpath, executable):
    print(f"Setting rpath {rpath} for {executable}")
    cmd = ""
    if sys.platform == "linux":
        cmd = ["patchelf", "--set-rpath", rpath,  executable]
    elif sys.platform == "darwin":
        cmd = ["install_name_tool ", "-add_rpath", rpath,  executable]
    ret_info = subprocess.run(cmd)
    if ret_info.returncode != 0:
        print(f"The exit code: {ret_info.returncode}")
        print(f"Could not set rpath: {rpath} for {executable}")
        exit(2)

def find_data_files(src_dirs, install_subdir):
    data_files = []
    for dir in src_dirs:
        local_base_dir = Path(dir)
        for root, directories, filenames in os.walk(local_base_dir):
            for filename in filenames:
                data_files.append([os.path.join(install_subdir, os.path.relpath(root, local_base_dir)), [os.path.join(root, filename)]])

    return list(data_files)


def find_prebuilt_extensions(base_dir, ext_pattern):
    extensions = []
    for path in Path(base_dir).glob(ext_pattern):
        relpath = path.relative_to(base_dir)
        if relpath.parent != ".":
            package_names = str(relpath.parent).split(os.path.sep)
        else:
            package_names = []
        package_names.append(path.name.split(".", 1)[0])
        name = ".".join(package_names)
        extensions.append(PrebuiltExtension(name, sources=[str(path)]))
    return extensions


# reading description from README.md
with open("pypi_overview.md", "r", encoding="utf-8") as fh:
    long_description = fh.read()

python_version = f"python{sys.version_info.major}.{sys.version_info.minor}"
binding_dir = os.path.join(python_version)

if sys.platform == "linux":
    content_pattern = "**/*.so"
    libs_subdir = f"lib/{python_version}/site-packages/openvino.libs"
elif sys.platform == "win32":
    content_pattern = "**/*.pyd"
    libs_subdir = "Lib/site-packages/openvino.libs"
elif sys.platform == "darwin":
    content_pattern = "**/*.so"
    libs_subdir = f"lib/{python_version}/site-packages/openvino.libs"
else:
    print("Unsupported OS: {}, expected: {}".format(sys.platform, "linux, win32, darwin"))
    exit(2)


setup(
    version='${WHEEL_VERSION}',
    author_email="${WHEEL_AUTOR_EMAIL}",
    name="${WHEEL_PACKAGE_NAME}",
    license="${WHEEL_LICENCE_TYPE}",
    author="${WHEEL_AUTOR}",
    description="${WHEEL_DESC}",
    long_description=long_description,
    long_description_content_type="text/markdown",
        cmdclass={
        "build": CustomBuild,
        "install": CustomInstall,
        "build_ext": CopyExt,
        "build_clib": PrepareLibs,
    },
    ext_modules=find_prebuilt_extensions(BINDINGS_DIR, content_pattern),
    packages=find_packages(BINDINGS_DIR),
    package_dir={"": BINDINGS_DIR},
    data_files=find_data_files(ALL_LIBS, libs_subdir),
    zip_safe=False,
    install_requires=[
        "numpy>=1.16.3"
    ],
)
