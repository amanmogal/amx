name: Code coverage
on:
  push:
    branches:
      - master
      - releases/*
    paths-ignore:
      - docs/
      - /**/docs/*
      - /**/*.md
      - README.md
      - /**/layer_tests_summary/**
  pull_request:
    branches:
      - master
      - releases/*
    paths-ignore:
      - docs/
      - /**/docs/*
      - /**/*.md
      - README.md
      - /**/layer_tests_summary/**

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  Coverage:
    runs-on:
      group: org/openvino_runners
      labels: [self-hosted, coverage]
    strategy:
      fail-fast: false
      matrix:
        config:
          - { name: "Ubuntu gcc", cc: "gcc", cxx: "g++" }

    steps:
      - name: Clone OpenVINO
        uses: actions/checkout@v3
        with:
          submodules: recursive
      
      - name: System info
        run: |
          whoami
          uname -a
          printenv
          echo ${{ github.workspace }}
      
      - name: Set proxy
        run: |
          export http_proxy="http://proxy-dmz.intel.com:911"
          export https_proxy="http://proxy-dmz.intel.com:912"
          export no_proxy="localhost,127.0.0.1,intel.com,.intel.com"
          export HTTP_PROXY="http://proxy-dmz.intel.com:911"
          export HTTPS_PROXY="http://proxy-dmz.intel.com:912"
          export NO_PROXY="localhost,127.0.0.1,intel.com,.intel.com"
      - name: System info
        run: |
          whoami
          uname -a
          printenv
          echo ${{ github.workspace }}
      #- name: Setup ccache
      #  uses: hendrikmuhs/ccache-action@v1.2
      #  with:
      #    max-size: 50G

      - name: Install build dependencies
        run: |
          sudo apt --assume-yes update
          sudo -E ${{ github.workspace }}/install_build_dependencies.sh
          sudo apt --assume-yes install lcov
          sudo mkdir ${{ github.workspace }}/testdata
      
      - name: Install python dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install -r ${{ github.workspace }}/src/bindings/python/src/compatibility/openvino/requirements-dev.txt
          python3 -m pip install -r ${{ github.workspace }}/src/bindings/python/wheel/requirements-dev.txt
          python3 -m pip install -r ${{ github.workspace }}/src/bindings/python/requirements.txt
          # For running Python API tests
          python3 -m pip install -r ${{ github.workspace }}/src/bindings/python/src/compatibility/openvino/requirements-dev.txt
          # For running Paddle frontend unit tests
          python3 -m pip install -r ${{ github.workspace }}/src/frontends/paddle/tests/requirements.txt
          # For running ONNX frontend unit tests
          python3 -m pip install -r ${{ github.workspace }}/src/frontends/onnx/tests/requirements.txt
          # For MO unit tests
     #     python3 -m pip install -r ${{ github.workspace }}/tools/mo/requirements.txt
     #     python3 -m pip install -r ${{ github.workspace }}/tools/mo/requirements_dev.txt
     #     pip install -r ${{ github.workspace }}/src/frontends/tensorflow_lite/tests/requirements.txt
     #     pip install -r ${{ github.workspace }}/src/bindings/python/src/compatibility/openvino/requirements-dev.txt
     #     pip install -r ${{ github.workspace }}/src/bindings/python/wheel/requirements-dev.txt
     #     pip install -r ${{ github.workspace }}/src/frontends/onnx/tests/requirements.txt
     #     pip install -r ${{ github.workspace }}/src/frontends/paddle/tests/requirements.txt
     #     pip install -r ${{ github.workspace }}/src/frontends/tensorflow/tests/requirements.txt
     #     pip install -r ${{ github.workspace }}/src/frontends/paddle/tests/requirements.txt
     #     pip install -r ${{ github.workspace }}/src/frontends/tensorflow/tests/requirements.txt
     #     pip install -r ${{ github.workspace }}/src/bindings/python/requirements.txt
     #     pip install -r ${{ github.workspace }}/tools/mo/requirements.txt
     #     pip install -r ${{ github.workspace }}/tools/mo/requirements_dev.txt
      
      - name: Get number of CPU cores
        uses: SimenB/github-actions-cpu-cores@v1
        id: cpu-cores

      - name: Build OpenVINO with CMake
        uses: ashutoshvarma/action-cmake-build@master
        with:
          cc: ${{ matrix.config.cc }}
          cxx: ${{ matrix.config.cxx }}
          configure-options: >
            -GNinja
            -DCMAKE_VERBOSE_MAKEFILE=ON
            -DENABLE_FASTER_BUILD=ON
            -DENABLE_TESTS=ON
            -DENABLE_COVERAGE=ON
            -DCMAKE_C_COMPILER_LAUNCHER=ccache
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
            -DCMAKE_C_LINKER_LAUNCHER=ccache
            -DCMAKE_CXX_LINKER_LAUNCHER=ccache
          build-type: Release
          parallel: ${{ steps.cpu-cores.outputs.count }}
      
     # - name: Run tests
     #   run: ctest -V
      
      - name: Run OV core unit tests
        run: . ${{ github.workspace }}/setupvars.sh -pyver 3.10 && ${{ github.workspace }}/bin/intel64/Release/ov_core_unit_tests --gtest_print_time=1 --gtest_filter=-*IE_GPU* --gtest_output=xml:${{ github.workspace }}/testdata/TEST-NGraphUT.xml
        continue-on-error: true

      - name: Run IR frontend tests
        run: . ${{ github.workspace }}/setupvars.sh -pyver 3.10 && ${{ github.workspace }}/bin/intel64/Release/ov_ir_frontend_tests --gtest_print_time=1 --gtest_output=xml:${{ github.workspace }}/testdata/TEST-IRFrontend.xml
        continue-on-error: true
      
      - name: Run ONNX frontend tests
        run: . ${{ github.workspace }}/setupvars.sh -pyver 3.10 && ${{ github.workspace }}/bin/intel64/Release/ov_onnx_frontend_tests --gtest_print_time=1 --gtest_filter=-*IE_GPU* --gtest_output=xml:${{ github.workspace }}/testdata/TEST-ONNXFrontend.xml
        continue-on-error: true
      
      - name: Run Paddle frontend unit tests
        run: . ${{ github.workspace }}/setupvars.sh -pyver 3.10 && ${{ github.workspace }}/bin/intel64/Release/paddle_tests --gtest_print_time=1 --gtest_output=xml:${{ github.workspace }}/testdata/TEST-Paddle.xml
        continue-on-error: true

      - name: Run TensorFlow frontend unit tests
        run: . ${{ github.workspace }}/setupvars.sh -pyver 3.10 && ${{ github.workspace }}/bin/intel64/Release/ov_tensorflow_frontend_tests --gtest_print_time=1 --gtest_output=xml:${{ github.workspace }}/testdata/TEST-Tensorflow.xml
        continue-on-error: true

      #- name: Run IE unit tests
      #  run: ${{ github.workspace }}/bin/intel64/Release/ieUnitTests --gtest_output=xml:${{ github.workspace }}/testdata/TEST-ieUnitTests.xml
      #  continue-on-error: true
      
      #- name: Run Intel CPU unit tests
      #  run: ${{ github.workspace }}/bin/intel64/Release/ov_cpu_unit_tests --gtest_output=xml:${{ github.workspace }}/testdata/TEST-ov_cpu_unit_tests.xml
      
      #- name: Run GNA unit tests
      #  run: ${{ github.workspace }}/bin/intel64/Release/ov_gna_unit_tests --gtest_output=xml:${{ github.workspace }}/testdata/TEST-ov_gna_unit_tests.xml
      
      #- name: Run VPU unit tests
      #  run: ${{ github.workspace }}/bin/intel64/Release/vpuUnitTests --gtest_output=xml:${{ github.workspace }}/testdata/TEST-vpuUnitTests.xml
      #  continue-on-error: true
      
      #- name: XLink tests
      #  run: ${{ github.workspace }}/bin/intel64/Release/XLinkTests --gtest_output=xml:${{ github.workspace }}/testdata/TEST-XLinkTests.xml
      #  continue-on-error: true
      
      #- name: Multi unit tests
      #  run: ${{ github.workspace }}/bin/intel64/Release/ieMultiPluginUnitTests --gtest_output=xml:${{ github.workspace }}/testdata/TEST-ieMultiPluginUnitTests.xml
      
      #- name: TEMPLATE FuncTests
      #  run: ${{ github.workspace }}/bin/intel64/Release/ov_template_func_tests --gtest_filter=*smoke* --gtest_output=xml:${{ github.workspace }}/testdata/TEST-templateFuncTests.xml
      
      #- name: CPU FuncTests
      #  run: ${{ github.workspace }}/bin/intel64/Release/ov_cpu_func_tests --gtest_print_time=1 --gtest_filter=*smoke* --gtest_output=xml:${{ github.workspace }}/testdata/TEST-ov_cpu_func_tests.xml
      #  continue-on-error: true
      
      #- name: IE CAPITests
      #  run: ${{ github.workspace }}/bin/intel64/Release/InferenceEngineCAPITests --gtest_output=xml:${{ github.workspace }}/testdata/TEST-InferenceEngineCAPITests.xml
      #  continue-on-error: true
      
      #- name: OV CAPITests
      #  run: ${{ github.workspace }}/bin/intel64/Release/ov_capi_test --gtest_output=xml:${{ github.workspace }}/testdata/TEST-ov_capi_test.xml
      #  continue-on-error: true

      - name: Build coverage with CMake
        uses: ashutoshvarma/action-cmake-build@master
        with:
          cc: ${{ matrix.config.cc }}
          cxx: ${{ matrix.config.cxx }}
          target: ov_coverage
          configure-options: >
            -DCMAKE_VERBOSE_MAKEFILE=ON
            -DCMAKE_C_COMPILER_LAUNCHER=ccache
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
            -DCMAKE_C_LINKER_LAUNCHER=ccache
            -DCMAKE_CXX_LINKER_LAUNCHER=ccache
          parallel: ${{ steps.cpu-cores.outputs.count }}

      
      - name: Print info
        run: |
          ls -laR
          pwd

      - name: Generate raport
        run: |
          lcov --capture --directory ${{ github.workspace }}/../. --output-file coverage.info
          genhtml coverage.info --output-directory coverage-report

      - name: Collect coverage
        uses: codecov/codecov-action@v3
        with:
          verbose: true
