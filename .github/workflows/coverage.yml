name: Code coverage
on: [push, pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  Build:
    strategy:
      fail-fast: false
      matrix:
        os: ['ubuntu-20.04']
    runs-on: ${{ matrix.os }}
    steps:
      - name: Install python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Clone OpenVINO
        uses: actions/checkout@v3
        with:
          submodules: recursive
          lfs: true
          fetch-depth: 0

      - name: Install dependencies
        run: |
          mkdir build

          sudo apt --assume-yes update
          sudo apt --assume-yes install lcov clang
          pip install coverage

          chmod +x install_build_dependencies.sh
          sudo -E ./install_build_dependencies.sh

          # Python requirements
          pip install --upgrade pip
          pip install -r src/bindings/python/src/compatibility/openvino/requirements-dev.txt
          pip install -r src/bindings/python/wheel/requirements-dev.txt
          pip install -r src/bindings/python/requirements.txt

          # Tests req
          pip install -r src/frontends/tensorflow/tests/requirements.txt
          pip install -r src/frontends/onnx/tests/requirements.txt
          pip install -r src/frontends/tensorflow_lite/tests/requirements.txt
          # pip install -r src/frontends/paddle/tests/requirements.txt

          pip install -r tools/mo/requirements_mxnet.txt
          pip install -r tools/mo/requirements_caffe.txt
          pip install -r tools/mo/requirements_kaldi.txt
          pip install -r tools/mo/requirements_onnx.txt
          pip install -r tools/mo/requirements_tf2.txt
          pip install -r tools/mo/requirements_dev.txt

      - name: Build OpenVINO
        run: |
          cmake -DCMAKE_VERBOSE_MAKEFILE=ON \
                -DENABLE_OV_PDPD_FRONTEND=OFF \
                -DCMAKE_COMPILE_WARNING_AS_ERROR=ON \
                -DBUILD_SHARED_LIBS=OFF \
                -DENABLE_ONEDNN_FOR_GPU=OFF \
                -DENABLE_OV_ONNX_FRONTEND=ON \
                -DBUILD_nvidia_plugin=OFF \
                -DENABLE_STRICT_DEPENDENCIES=OFF \
                -DCMAKE_BUILD_TYPE=Release \
                -DENABLE_FASTER_BUILD=ON \
                -DENABLE_TESTS=ON \
                -DENABLE_PYTHON=ON \
                -DENABLE_COVERAGE=ON \
                -DENABLE_INTEL_GPU=OFF \
                -B build
                # -DCMAKE_TOOLCHAIN_FILE=../cmake/toolchains/ia32.linux.toolchain.cmake \
          cmake --build build --parallel --config Release

      - name: ls all
        run:  ls -laR .

      - name: Run Tests
        run: ctest -V
      
    # - name:  Run IR
    #   run: ctest -V -L IR_FE

    # - name: Run ONNX_FE
    #   run: ctest -V -L ONNX_FE

    # - name: Run PADDLE_FE
    #   run: ctest -V -L PADDLE_FE

    # - name: Run TF_FE
    #   run: ctest -V -L TF_FE

    # - name: Run CPU
    #   run: ctest -V -L CPU

    # - name: Run GPU
    #   run: ctest -V -L GPU

    # - name: Run GNA
    #   run: ctest -V -L GNA

      - name: Build coverage
        run:  cmake --build build --target ov_coverage

      - name: ls files
        run: ls -laR

      - name: Generate raport
        run: |
          lcov --capture --directory . --output-file coverage.info
          genhtml coverage.info --output-directory coverage-report

      - name: Collect coverage
        uses: codecov/codecov-action@v3
        with:
          verbose: true
