name: Code Coverage
on: [push, pull_request]
# push:
#   # branches:
#   #   - 'master'
#   #   - 'releases/*'
#   paths-ignore:
#     - '*/docs/*'
#     - 'docs/*'
#     - '*/*.md'
#     - '*.md'
#     - '*/layer_tests_summary/*'
#     - '*/conformance/*'
# pull_request:
#   branches:
#     - 'master'
#     - 'releases/*'
#   paths-ignore:
#     - '*/docs/*'
#     - 'docs/*'
#     - '*/*.md'
#     - '*.md'
#     - '*/layer_tests_summary/*'
#     - '*/conformance/*'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  OPENVINO_REPO_NAME: openvino
  OPENVINO_CONTRIB_REPO_NAME: openvino_contrib
  OPENVINO_TESTDATA_REPO_NAME: testdata
  CMAKE_BUILD_SHARED_LIBS: 'ON'
  PYTHON_STATIC_ARGS:
  CMAKE_CPACK_GENERATOR:
  SAMPLES_INSTALL_DIR: $(INSTALL_DIR)/samples
  PYTHON_SAMPLES_INSTALL_DIR: $(SAMPLES_INSTALL_DIR)/python
  RUN_PREFIX: . $(SETUPVARS) -pyver 3.8 &&
  system.debug: true
  VSTS_HTTP_RETRY: 5
  VSTS_HTTP_TIMEOUT: 200
  BUILD_TYPE: Release
  REPO_DIR: $(Build.Repository.LocalPath)
  OPENVINO_CONTRIB_REPO_DIR: $(REPO_DIR)/../openvino_contrib
  MODELS_PATH: $(REPO_DIR)/../testdata
  WORK_DIR: $(Pipeline.Workspace)/_w
  BUILD_DIR: $(WORK_DIR)/build
  BUILD_SAMPLES_DIR: $(WORK_DIR)/build_samples
  BUILD_LAYER_TESTS_DIR: $(WORK_DIR)/build_layer_tests
  BUILD_SAMPLES_TESTS_DIR: $(WORK_DIR)/build_samples_tests
  INSTALL_DIR: $(WORK_DIR)/install_pkg
  INSTALL_TEST_DIR: $(INSTALL_DIR)/tests
  LAYER_TESTS_DIR: $(INSTALL_TEST_DIR)/layer_tests
  SETUPVARS: $(INSTALL_DIR)/setupvars.sh
  TMP_DIR: /mnt/tmp
  SHARE_DIR: /mount/cinfsshare/onnxtestdata
  CCACHE_DIR: $(SHARE_DIR)/ccache/master/linux
  CMAKE_VERSION: 3.24.0
  BUILD_PYTHON: $(WORK_DIR)/build_python
  INSTALL_PYTHON: $(INSTALL_OPENVINO)/extras/python
  LD_LIBRARY_PATH: $(Agent.ToolsDirectory)/Python/$(OV_PYTHON_VERSION)/x64/lib
  OV_PYTHON_VERSION: 3.10.10 # Full version of Python its required for LD_LIBRARY_PATH. More details https://github.com/microsoft/azure-pipelines-tool-lib/blob/master/docs/overview.md#tool-cache


jobs:
  Code_Coverage:
    runs-on: ubuntu-20.04
    steps:
      - name: Print system information
        run: |
          curl -H Metadata:true --noproxy "*" "http://169.254.169.254/metadata/instance?api-version=2019-06-01"
          whoami
          uname -a
          echo Python3 info ; which python3 ; python3 --version
          echo Java info ; which java ; java -version
          echo gcc info ; which gcc ; gcc --version
          echo cmake info ; which cmake ; cmake --version
          lsb_release
          env
          cat /proc/cpuinfo
          cat /proc/meminfo
          cat /etc/fstab
          vmstat -s
          df
          lsblk -o NAME,HCTL,SIZE,MOUNTPOINT | grep -i "sd"
          free -h
          echo TargetBranch: $(System.PullRequest.TargetBranch)
          echo SourceBranch: $(Build.SourceBranch)

      - name: Setup directories
        run: |
          set -e
          env
          echo ${{ env.WORK_DIR }}
          rm -rf $WORK_DIR ; mkdir $WORK_DIR
          rm -rf $(BUILD_DIR) ; mkdir $(BUILD_DIR)
          rm -rf $(BUILD_SAMPLES_DIR) ; mkdir $(BUILD_SAMPLES_DIR)
          sudo rm -rf $(TMP_DIR) ; sudo mkdir $(TMP_DIR) ; sudo chmod 777 -R $(TMP_DIR)
          sudo mkdir -p $(SHARE_DIR)
          sudo apt --assume-yes update && sudo apt --assume-yes install nfs-common
          sudo mount -vvv -t nfs cinfsshare.file.core.windows.net:/cinfsshare/onnxtestdata $(SHARE_DIR) -o vers=4,minorversion=1,sec=sys
          mkdir -p $(CCACHE_DIR)

      - name: Install lcov
        #if: ${{ success() && $(CMAKE_BUILD_SHARED_LIBS) == 'ON'}}
        run: sudo apt --assume-yes install lcov

      - name: Clone OpenVINO
        uses: actions/checkout@v3
        with:
          clean: true
          submodule: recursive
          lfs: false
          path: ${OPENVINO_REPO_NAME}

      - name: Clone OpenVINO contrib
        uses: actions/checkout@v3
        with:
          repository: ${OPENVINO_CONTRIB_REPO_NAME}
          clean: true
          submodule: recursive
          lfs: false
          path: ${OPENVINO_CONTRIB_REPO_NAME}

      - name: Install cmake
        run: |
          wget "https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-linux-x86_64.sh"
          chmod +x ./cmake-${CMAKE_VERSION}-linux-x86_64.sh
          sudo ./cmake-${CMAKE_VERSION}-linux-x86_64.sh --prefix=/usr/local/ --skip-license
          rm -rf ./cmake-${CMAKE_VERSION}-linux-x86_64.sh

      - name: Install dependencies
        run: |      
          set -e
          $(REPO_DIR)/install_build_dependencies.sh
          # Move jdk into contrib
          # 'clang' compiler is to check that samples can be built using it
          sudo apt --assume-yes install openjdk-11-jdk libbz2-dev clang
          # For opencv-python: python3-setuptools and pip upgrade
          wget https://www.python.org/ftp/python/"$PYTHON_VERSION"/Python-"$PYTHON_VERSION".tgz
          tar -xzf Python-"$PYTHON_VERSION".tgz
          cd Python-"$PYTHON_VERSION" || exit
          ./configure --enable-optimizations --prefix=/usr/local --enable-shared LDFLAGS="-Wl,-rpath /usr/local/lib"
          make python
          sudo make install
          echo "LD_LIBRARY_PATH=/usr/local/lib:$(LD_LIBRARY_PATH)" >> $GITHUB_ENV
          /usr/local/bin/python3.10 -m venv $(PY_VENV)
          . $(PY_VENV)/bin/activate
          echo Python3 info ; which python3 ; python3 --version
          python3 --version
          python3.10 --version
          curl https://bootstrap.pypa.io/get-pip.py | python3
          python3 -m pip install --upgrade pip
          python3 -m pip install -r $(REPO_DIR)/src/bindings/python/src/compatibility/openvino/requirements.txt
          python3 -m pip install -r $(REPO_DIR)/src/bindings/python/wheel/requirements-dev.txt
          python3 -m pip install -r $(REPO_DIR)/src/bindings/python/requirements.txt
          # For running Python API tests
          python3 -m pip install -r $(REPO_DIR)/src/bindings/python/src/compatibility/openvino/requirements-dev.txt
          # For running Paddle frontend unit tests
          python3 -m pip install -r $(REPO_DIR)/src/frontends/paddle/tests/requirements.txt
          # For running ONNX frontend unit tests
          python3 -m pip install -r $(REPO_DIR)/src/frontends/onnx/tests/requirements.txt
          # For MO unit tests
          python3 -m pip install -r $(REPO_DIR)/tools/mo/requirements.txt
          python3 -m pip install -r $(REPO_DIR)/tools/mo/requirements_dev.txt
          # Speed up build
          wget https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-linux.zip
          unzip ninja-linux.zip
          sudo cp -v ninja /usr/local/bin/
          # Speed up tests
          git clone https://github.com/google/gtest-parallel.git
        working-directory: $(WORK_DIR)

      - name: Print system information
        run: |
          curl -H Metadata:true --noproxy "*" "http://169.254.169.254/metadata/instance?api-version=2019-06-01"
          whoami
          uname -a
          echo Python3 info ; which python3 ; python3 --version
          echo Java info ; which java ; java -version
          echo gcc info ; which gcc ; gcc --version
          echo cmake info ; which cmake ; cmake --version
          lsb_release
          env
          cat /proc/cpuinfo
          cat /proc/meminfo
          cat /etc/fstab
          vmstat -s
          df
          lsblk -o NAME,HCTL,SIZE,MOUNTPOINT | grep -i "sd"
          free -h
          echo TargetBranch: $(System.PullRequest.TargetBranch)
          echo SourceBranch: $(Build.SourceBranch)

      - name: Clone OpenVINO testdata
        uses: actions/checkout@v3
        with:
          repository: ${OPENVINO_TESTDATA_REPO_NAME}
          clean: true
          lfs: true
          path: ${OPENVINO_TESTDATA_REPO_NAME}

      - name: CMake OpenVINO
        run: |
          cmake -GNinja \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DCMAKE_BUILD_TYPE=$(BUILD_TYPE) \
            -DCMAKE_COMPILE_WARNING_AS_ERROR=ON \
            -DENABLE_PYTHON=ON \
            -DBUILD_SHARED_LIBS=$(CMAKE_BUILD_SHARED_LIBS) \
            -DENABLE_ONEDNN_FOR_GPU=$(CMAKE_BUILD_SHARED_LIBS) \
            -DPYTHON_EXECUTABLE=$(PY_VENV)/bin/python3.10 \
            -DENABLE_TESTS=ON \
            -DENABLE_OV_ONNX_FRONTEND=ON \
            -DENABLE_FASTER_BUILD=ON \
            -DENABLE_STRICT_DEPENDENCIES=OFF \
            -DENABLE_REQUIREMENTS_INSTALL=OFF \
            -DOPENVINO_EXTRA_MODULES=$(OPENVINO_CONTRIB_REPO_DIR)/modules \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DCMAKE_CXX_LINKER_LAUNCHER=ccache \
            -DCMAKE_C_LINKER_LAUNCHER=ccache \
            -DCPACK_GENERATOR=$(CMAKE_CPACK_GENERATOR) \
            -DBUILD_nvidia_plugin=OFF \
            -DENABLE_COVERAGE=$(CMAKE_BUILD_SHARED_LIBS) \
            -S $(REPO_DIR) \
            -B $(BUILD_DIR)
      
      - name: List temp SDKs
        run: ls -alR $(REPO_DIR)/temp/

      - name: Clean ccache stats
        run: ccache --zero-stats --max-size=50G --show-config

      - name: Build linux
        run: |  
          echo "CCACHE_DIR=$(CCACHE_DIR)" >> $GITHUB_ENV
          echo "CCACHE_TEMPDIR=$(TMP_DIR)/ccache" >> $GITHUB_ENV
          echo "CCACHE_BASEDIR=$(Pipeline.Workspace)" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=50G" >> $GITHUB_ENV
          ninja -C $(BUILD_DIR)

      - name: Show ccache stats
        run: ccache --show-stats

      - name: List bin files
        run: ls -alR $(REPO_DIR)/bin/

      - name:  CMake Layer Tests
        run: cmake -GNinja $(REPO_DIR)/tests/layer_tests
        working-directory: $(BUILD_LAYER_TESTS_DIR)

      - name: Build Layer Tests
        run: ninja -C $(BUILD_LAYER_TESTS_DIR)

      - name: Install wheel packages
        run: cmake -DCOMPONENT=python_wheels -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) -P $(BUILD_DIR)/cmake_install.cmake

      - name: Install Layer Tests
        run: cmake -DCOMPONENT=tests -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) -P $(BUILD_LAYER_TESTS_DIR)/cmake_install.cmake

      - name: Install python wheels
        run: |
          . $(PY_VENV)/bin/activate
          python3 -m pip install openvino-dev --find-links=$(INSTALL_DIR)/tools

      - name: Install tests
        run: |
          set -e
          cmake -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) -DCOMPONENT=tests -P $(BUILD_DIR)/cmake_install.cmake

      - name: List install test files
        run: ls -alR $(INSTALL_DIR)

      - name: nGraph and IE Python Bindings Tests
        run: |
          . $(PY_VENV)/bin/activate
          echo "DATA_PATH=$(MODELS_PATH)" >> $GITHUB_ENV
          echo "MODELS_PATH=$(MODELS_PATH)" >> $GITHUB_ENV
          # because of static build libgna is needed for python binary
          echo "LD_LIBRARY_PATH=$(REPO_DIR)/temp/gna_03.00.00.1815.1/linux/x64:$(LD_LIBRARY_PATH)" >> $GITHUB_ENV
          python3 -m pytest -s $(INSTALL_TEST_DIR)/pyngraph $(PYTHON_STATIC_ARGS) \
          --junitxml=$(INSTALL_TEST_DIR)/TEST-Pyngraph.xml \
          --ignore=$(INSTALL_TEST_DIR)/pyngraph/tests/test_onnx/test_zoo_models.py \
          --ignore=$(INSTALL_TEST_DIR)/pyngraph/tests/test_onnx/test_backend.py
        continue-on-error: false

      - name: Python API 2.0 Tests
        #if: ${{ success() }}
        run: |
          . $(PY_VENV)/bin/activate
          echo "DATA_PATH=$(MODELS_PATH)" >> $GITHUB_ENV
          echo "MODELS_PATH=$(MODELS_PATH)" >> $GITHUB_ENV
          # because of static build libgna is needed for python binary and mock_py frontend library
          echo "LD_LIBRARY_PATH=$(REPO_DIR)/temp/gna_03.00.00.1815.1/linux/x64:$(INSTALL_TEST_DIR):$(LD_LIBRARY_PATH)" >> $GITHUB_ENV
          # For python imports to import pybind_mock_frontend
          echo "PYTHONPATH=$(INSTALL_TEST_DIR):$(INSTALL_DIR)/python/python3.8:$(PYTHONPATH)" >> $GITHUB_ENV
          # For frontend manager to load mock_py library
          echo "OV_FRONTEND_PATH=$(INSTALL_TEST_DIR)" >> $GITHUB_ENV
          python3 -m pytest -sv $(INSTALL_TEST_DIR)/pyopenvino $(PYTHON_STATIC_ARGS) \
            --junitxml=$(INSTALL_TEST_DIR)/TEST-Pyngraph.xml \
            --ignore=$(INSTALL_TEST_DIR)/pyopenvino/tests/test_utils/test_utils.py \
            --ignore=$(INSTALL_TEST_DIR)/pyopenvino/tests/test_onnx/test_zoo_models.py \
            --ignore=$(INSTALL_TEST_DIR)/pyopenvino/tests/test_onnx/test_backend.py
        continue-on-error: false

      - name: Model Optimizer UT
        run: |
          . $(PY_VENV)/bin/activate
          # because of static build libgna is needed for python binary
          echo "LD_LIBRARY_PATH=$(REPO_DIR)/temp/gna_03.00.00.1815.1/linux/x64:$(LD_LIBRARY_PATH)" >> $GIHUB_ENV
          python3 -m pytest -s $(INSTALL_TEST_DIR)/mo/unit_tests --junitxml=$(INSTALL_TEST_DIR)/TEST-ModelOptimizer.xml
        continue-on-error: false

      - name: Install OpenVINO
        run: cmake -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR) -P $(BUILD_DIR)/cmake_install.cmake
        continue-on-error: false

      - name: List install files
        run: ls -alR $(INSTAL_DIR)

      - name: Build Cpp samples
        run: $(SAMPLES_INSTALL_DIR)/cpp/build_samples.sh -i $(INSTALL_DIR) -b $(BUILD_DIR)/cpp_samples
        continue-on-error: false

      - name: Build Cpp samples - clang
        run: |
          echo "CC=clang" >> $GITHUB_ENV
          echo "CXX=clang++" >> $GITHUB_ENV
          $(SAMPLES_INSTALL_DIR)/cpp/build_samples.sh -i $(INSTALL_DIR) -b $(BUILD_DIR)/cpp_samples
        continue-on-error: false

      - name: Build c samples
        run: |
          echo "VERBOSE=1" >> $GITHUB_ENV
          $(SAMPLES_INSTALL_DIR)/c/build_samples.sh -i $(INSTALL_DIR) -b $(BUILD_DIR)/c_samples
        continue-on-error: false

      - name: OV Core UT
        run: $(RUN_PREFIX) $(INSTALL_TEST_DIR)/ov_core_unit_tests --gtest_print_time=1 --gtest_filter=-*IE_GPU* --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-NGraphUT.xml
        continue-on-error: false

      - name: IR Frontend Tests
        run: $(RUN_PREFIX) $(INSTALL_TEST_DIR)/ov_ir_frontend_tests --gtest_print_time=1 --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-IRFrontend.xml
        continue-on-error: false

      - name: ONNX Frontend Tests
        run: $(RUN_PREFIX) $(INSTALL_TEST_DIR)/ov_onnx_frontend_tests --gtest_print_time=1 --gtest_filter=-*IE_GPU* --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-ONNXFrontend.xml
        continue-on-error: false

      - name: Paddle Frontent UT
        run: $(RUN_PREFIX) $(INSTALL_TEST_DIR)/paddle_tests --gtest_print_time=1 --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-Paddle.xml
        continue-on-error: false

      - name: TensorFlow Frontend Unit Tests
        run: |
          echo "OV_FRONTEND_PATH=$(INSTALL_TEST_DIR)" >> $GITHUB_ENV
          $(RUN_PREFIX) $(INSTALL_TEST_DIR)/ov_tensorflow_frontend_tests --gtest_print_time=1 --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-Tensorflow.xml
        continue-on-error: false

      - name: IE UT old
        run: $(RUN_PREFIX) $(INSTALL_TEST_DIR)/InferenceEngineUnitTests --gtest_print_time=1 --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-InferenceEngineUnitTests.xml
        continue-on-error: false

      - name: IE UT
        run: $(RUN_PREFIX) $(INSTALL_TEST_DIR)/ieUnitTests --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-ieUnitTests.xml
        continue-on-error: false

      - name: Intel CPU Unit Test
        run: $(RUN_PREFIX) $(INSTALL_TEST_DIR)/ov_cpu_unit_tests --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-ov_cpu_unit_tests.xml
        continue-on-error: false

      - name: GNA UT
        run: $(RUN_PREFIX) $(INSTALL_TEST_DIR)/ov_gna_unit_tests --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-ov_gna_unit_tests.xml
        continue-on-error: false

      - name: VPU UT
        run: $(RUN_PREFIX) $(INSTALL_TEST_DIR)/vpuUnitTests --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-vpuUnitTests.xml
        continue-on-error: false

      - name: XLink Tests
        run: $(RUN_PREFIX) $(INSTALL_TEST_DIR)/XLinkTests --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-XLinkTests.xml
        continue-on-error: false

      - name: MULTI UT
        run: $(RUN_PREFIX) $(INSTALL_TEST_DIR)/ieMultiPluginUnitTests --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-ieMultiPluginUnitTests.xml
        continue-on-error: false

      - name: IE FuncTests
        run: |
          # because of IR reader v7
          echo "LD_LIBRARY_PATH=$(INSTALL_TEST_DIR)" >> $GITHUB_ENV
          $(RUN_PREFIX) $(INSTALL_TEST_DIR)/ieFuncTests --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-ieFuncTests.xml
        continue-on-error: false

      - name: TEMPLATE FuncTests
        run: $(RUN_PREFIX) $(INSTALL_TEST_DIR)/ov_template_func_tests --gtest_filter=*smoke* --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-templateFuncTests.xml
        continue-on-error: false

      - name: IE CAPITests
        run: |
          echo "DATA_PATH=$(MODELS_PATH)" >> $GITHUB_ENV
          echo "MODELS_PATH=$(MODELS_PATH)" >> $GITHUB_ENV
          $(RUN_PREFIX) $(INSTALL_TEST_DIR)/InferenceEngineCAPITests --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-InferenceEngineCAPITests.xml
        continue-on-error: false

      - name: OV CAPITests
        run: |
          echo "DATA_PATH=$(MODELS_PATH)" >> $GITHUB_ENV
          echo "MODELS_PATH=$(MODELS_PATH) >> $GITHUB_ENV
          $(RUN_PREFIX) $(INSTALL_TEST_DIR)/ov_capi_test --gtest_output=xml:$(INSTALL_TEST_DIR)/TEST-ov_capi_test.xml
        continue-on-error: false

      - name: Build Coverage
        #if: ${{ success() }}
        run: |
          echo "CCACHE_DIR=$(CCACHE_DIR)" >> $GITHUB_ENV
          echo "CCACHE_TEMPDIR=$(TMP_DIR)/ccache" >> $GITHUB_ENV
          echo "CCACHE_BASEDIR=$(Pipeline.Workspace)" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=50G" >> $GITHUB_ENV
          cmake --build $(BUILD_DIR) --target ov_coverage -- -C $(BUILD_DIR)

      - name: Collect Coverage
        #if: ${{ success() }}
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          verbose: true
