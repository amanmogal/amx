name: Tests on Linux (Ubuntu 20.04, Python 3.11)
on:
  schedule:
    # at 00:00 on Wednesday and Saturday
    - cron: '0 0 * * 3,6'
  workflow_dispatch:
  pull_request:
    paths-ignore:
      - '**/docs/**'
      - 'docs/**'
      - '**/**.md'
      - '**.md'
      - '**/layer_tests_summary/**'
      - '**/conformance/**'
  push:
    paths-ignore:
      - '**/docs/**'
      - 'docs/**'
      - '**/**.md'
      - '**.md'
      - '**/layer_tests_summary/**'
      - '**/conformance/**'
    branches:
      - master

concurrency:
  group: ${{ github.head_ref || github.run_id }}-linux
  cancel-in-progress: true

jobs:
  Build:
    defaults:
      run:
        shell: bash
    runs-on: aks-linux-16-cores
    container:
      # image: openvino.azurecr.io/openvino_ci/ubuntu2004:python_311
      # image: ubuntu:22.04
      image: openvinogithubactions.azurecr.io/dockerhub/ubuntu:22.04
      volumes:
        - /mount/caches:/mount/caches
    env:
      CMAKE_BUILD_TYPE: 'Release'
      CMAKE_GENERATOR: 'Ninja'
      CMAKE_CXX_COMPILER_LAUNCHER: ccache
      CMAKE_C_COMPILER_LAUNCHER: ccache
      OPENVINO_REPO: ${{ github.workspace }}/openvino
      OPENVINO_CONTRIB_REPO: ${{ github.workspace }}/openvino_contrib
      INSTALL_DIR: ${{ github.workspace }}/install
      INSTALL_TEST_DIR: ${{ github.workspace }}/install/tests
      SAMPLES_INSTALL_DIR: ${{ github.workspace }}/install/samples
      LAYER_TESTS_INSTALL_DIR: ${{ github.workspace }}/install/tests/layer_tests
      MODEL_HUB_TESTS_INSTALL_DIR: ${{ github.workspace }}/install/tests/model_hub_tests
      BUILD_DIR: ${{ github.workspace }}/build
      DATA_PATH: ${{ github.workspace }}/testdata
      MODELS_PATH: ${{ github.workspace }}/testdata
      OV_TEMP: ${{ github.workspace }}/openvino_temp
      PYTHON_STATIC_ARGS: -m "not dynamic_library"
      CCACHE_DIR: /mount/caches/ccache/ubuntu22_x86_64_Release
      CCACHE_TEMPDIR: ${{ github.workspace }}/ccache_temp
      CCACHE_MAXSIZE: 50G
      TEST_USER_NAME: "ga_runner"
    steps:
      - name: Install git
        run: |
          apt-get update
          apt-get install -y git git-lfs

      - name: Clone OpenVINO
        uses: actions/checkout@v4
        with:
          path: ${{ env.OPENVINO_REPO }}
          submodules: 'recursive'

      - name: Clone OpenVINO Contrib
        uses: actions/checkout@v4
        with:
          repository: 'openvinotoolkit/openvino_contrib'
          path: ${{ env.OPENVINO_CONTRIB_REPO }}
          submodules: 'recursive'

      - name: Clone testdata for C API tests
        uses: actions/checkout@v4
        with:
          repository: 'openvinotoolkit/testdata'
          path: 'testdata'
          submodules: 'recursive'
          lfs: 'true'

      #
      # Dependencies
      #
      - name: Install build dependencies
        run: |
          bash ${OPENVINO_REPO}/install_build_dependencies.sh
          apt update
          apt --assume-yes install openjdk-11-jdk libbz2-dev clang unzip libpugixml-dev libtbb-dev intel-opencl-icd ocl-icd-opencl-dev opencl-headers

          wget https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-linux.zip
          unzip ninja-linux.zip
          cp -v ninja /usr/local/bin/

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install python dependencies
        run: |
          # For Python API
          python3 -m pip install --upgrade pip
          python3 -m pip install Scons
          python3 -m pip install -r ${OPENVINO_REPO}/src/bindings/python/wheel/requirements-dev.txt
          python3 -m pip install -r ${OPENVINO_REPO}/src/bindings/python/requirements.txt
          python3 -m pip install -r ${OPENVINO_REPO}/src/bindings/python/requirements_test.txt

          # For running Python API tests
          python3 -m pip install -r ${OPENVINO_REPO}/src/bindings/python/src/compatibility/openvino/requirements-dev.txt

          # For running ONNX frontend unit tests
          python3 -m pip install --force-reinstall -r ${OPENVINO_REPO}/src/frontends/onnx/tests/requirements.txt

          # For running TensorFlow frontend unit tests
          python3 -m pip install -r ${OPENVINO_REPO}/src/frontends/tensorflow/tests/requirements.txt

          # For running Paddle frontend unit tests
          python3 -m pip install -r ${OPENVINO_REPO}/src/frontends/paddle/tests/requirements.txt

      - name: Install MO dependencies
        run: |
          python3 -m pip install -r ${OPENVINO_REPO}/tools/mo/requirements_mxnet.txt
          python3 -m pip install -r ${OPENVINO_REPO}/tools/mo/requirements_caffe.txt
          python3 -m pip install -r ${OPENVINO_REPO}/tools/mo/requirements_kaldi.txt
          python3 -m pip install -r ${OPENVINO_REPO}/tools/mo/requirements_onnx.txt
          python3 -m pip install -r ${OPENVINO_REPO}/tools/mo/requirements_tf2.txt
          python3 -m pip install -r ${OPENVINO_REPO}/tools/mo/requirements_dev.txt

      #
      # Build
      #

      # - name: Setup ccache
      #   uses: hendrikmuhs/ccache-action@v1.2
      #   with:
      #     max-size: "2000M"
      #     # Should save cache only if run in the master branch of the base repo
      #     # github.ref_name is 'ref/PR_#' in case of the PR, and 'branch_name' when executed on push
      #     save: ${{ github.ref_name == 'master' && 'true' || 'false'  }}
      #     verbose: 2
      #     key: ${{ github.job }}-linux
      #     restore-keys: |
      #       ${{ github.job }}-linux

      - name: Setup ccache
        run: |
          mkdir -p $CCACHE_DIR
          echo "this is from pipeline" >> $CCACHE_DIR/testfile

      - name: Get number of CPU cores
        uses: SimenB/github-actions-cpu-cores@v2
        id: cpu-cores

      - name: CMake configure
        run: |
          cmake \
            -GNinja \
            -DENABLE_CPPLINT=OFF \
            -DENABLE_NCC_STYLE=OFF \
            -DENABLE_TESTS=ON \
            -DENABLE_PYTHON=ON \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=ON \
            -DENABLE_ONEDNN_FOR_GPU=OFF \
            -DENABLE_OV_ONNX_FRONTEND=ON \
            -DCMAKE_COMPILE_WARNING_AS_ERROR=OFF \
            -DENABLE_STRICT_DEPENDENCIES=OFF \
            -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
            -DCMAKE_C_COMPILER_LAUNCHER=ccache \
            -DENABLE_SYSTEM_SNAPPY=ON \
            -DENABLE_SYSTEM_TBB=ON \
            -DBUILD_nvidia_plugin=OFF \
            -DENABLE_DEBUG_CAPS=ON \
            -DCUSTOM_OPERATIONS="calculate_grid;complex_mul;fft;grid_sample;sparse_conv;sparse_conv_transpose" \
            -DOPENVINO_EXTRA_MODULES=${OPENVINO_CONTRIB_REPO}/modules \
            -S ${OPENVINO_REPO} \
            -B ${BUILD_DIR}

      - name: Build
        run: cmake --build ${BUILD_DIR} --parallel ${{ steps.cpu-cores.outputs.count }} --config Release

      - name: Show ccache stats
        run: ccache --show-stats

      - name: Cmake Layer Tests
        run: cmake -GNinja -S ${OPENVINO_REPO}/tests/layer_tests -B ${BUILD_DIR}/layer_tests

      - name: Cmake Model Hub Tests
        run: cmake -GNinja -S ${OPENVINO_REPO}/tests/model_hub_tests -B ${BUILD_DIR}/model_hub_tests

      - name: Build Layer Tests
        run: cmake --build ${BUILD_DIR}/layer_tests --parallel --config Release

      - name: Build Model Hub Tests
        run: cmake --build ${BUILD_DIR}/model_hub_tests --parallel --config Release

      - name: Install wheel packages
        run: cmake -DCOMPONENT=python_wheels -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} -P ${BUILD_DIR}/cmake_install.cmake

      - name: Install Layer Tests
        run: cmake -DCOMPONENT=tests -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} -P ${BUILD_DIR}/layer_tests/cmake_install.cmake

      - name: Install Model Hub Tests
        run: cmake -DCOMPONENT=tests -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} -P ${BUILD_DIR}/model_hub_tests/cmake_install.cmake

      - name: Install python wheels
        run: python3 -m pip install openvino-dev --find-links=${INSTALL_DIR}/tools

      - name: Install tests
        run: cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} -DCOMPONENT=tests -P ${BUILD_DIR}/cmake_install.cmake

      - name: Install OpenVINO
        run: cmake -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} -P ${BUILD_DIR}/cmake_install.cmake

      - name: CMake Samples Tests
        run: cmake -GNinja -S ${OPENVINO_REPO}/tests/samples_tests -B ${BUILD_DIR}/samples_tests

      - name: Build Samples Tests
        run: cmake --build ${BUILD_DIR}/samples_tests --config Release

      - name: Install Samples Tests
        run: cmake -DCOMPONENT=tests -DCMAKE_INSTALL_PREFIX=${INSTALL_DIR} -P ${BUILD_DIR}/samples_tests/cmake_install.cmake

      - name: Pack Artifacts
        run: |
          pushd ${INSTALL_DIR}
            tar -czvf ${BUILD_DIR}/openvino_package.tar.gz --exclude=tests *
          popd

          pushd ${INSTALL_DIR}
            tar -czvf ${BUILD_DIR}/openvino_tests.tar.gz tests/
          popd

      - name: Build cpp samples
        run: ${SAMPLES_INSTALL_DIR}/cpp/build_samples.sh -i ${INSTALL_DIR} -b ${BUILD_DIR}/cpp_samples

      - name: Build c samples
        run: ${SAMPLES_INSTALL_DIR}/c/build_samples.sh -i ${INSTALL_DIR} -b ${BUILD_DIR}/c_samples

      #
      # Tests
      #

      - name: Samples tests
        run: |
          export WORKSPACE=${INSTALL_DIR}
          export IE_APP_PATH=${INSTALL_DIR}/samples_bin
          export IE_APP_PYTHON_PATH=${INSTALL_DIR}/samples/python
          export SHARE=${INSTALL_TEST_DIR}/smoke_tests/samples_smoke_tests_data

          python3 -m pip install --ignore-installed PyYAML -r ${INSTALL_TEST_DIR}/smoke_tests/requirements.txt
          export LD_LIBRARY_PATH=${{ env.IE_APP_PATH }}:$LD_LIBRARY_PATH

          source ${INSTALL_DIR}/setupvars.sh

          python3 -m pytest -sv ${INSTALL_TEST_DIR}/smoke_tests \
            --env_conf ${INSTALL_TEST_DIR}/smoke_tests/env_config.yml \
            --junitxml=${INSTALL_TEST_DIR}/TEST-SamplesSmokeTests.xml

      # Present in the "Build" job due to the fact that these tests require build directory
      - name: ONNX frontend tests
        run: |
          source ${INSTALL_DIR}/setupvars.sh
          ${INSTALL_TEST_DIR}/ov_onnx_frontend_tests --gtest_print_time=1 --gtest_filter=-*IE_GPU*:*FrontEndLoadFromTest.testLoadFromTwoStreams*:*FrontEndLoadFromTest.testLoadFromTwoFiles* \
                --gtest_output=xml:${INSTALL_TEST_DIR}/TEST-ONNXFrontend.xml

      #
      # Upload build artifacts
      #

      - name: Upload openvino package
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: openvino_package
          path: ${{ env.BUILD_DIR }}/openvino_package.tar.gz
          if-no-files-found: 'error'

      - name: Upload openvino tests package
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: openvino_tests
          path: ${{ env.BUILD_DIR }}/openvino_tests.tar.gz
          if-no-files-found: 'error'

  CXX_Unit_Tests:
    needs: Build
    defaults:
      run:
        shell: bash
    runs-on: aks-linux-4-cores
    container:
      image: openvinogithubactions.azurecr.io/dockerhub/ubuntu:22.04
      volumes:
        - /mount/caches:/mount/caches
    env:
      INSTALL_DIR: ${{ github.workspace }}/install
      INSTALL_TEST_DIR: ${{ github.workspace }}/install/tests

    steps:
      - name: Create Directories
        run: |
          mkdir -p ${INSTALL_DIR} ${INSTALL_TEST_DIR}

      #
      # Dependencies
      #

      - name: Install dependencies
        run: |
          apt update
          apt --assume-yes install openjdk-11-jdk libbz2-dev clang unzip libpugixml-dev libtbb-dev intel-opencl-icd ocl-icd-opencl-dev opencl-headers libsnappy-dev

      - name: Download OpenVINO package
        uses: actions/download-artifact@v3
        with:
          name: openvino_package
          path: ${{ env.INSTALL_DIR }}

      - name: Download OpenVINO tests package
        uses: actions/download-artifact@v3
        with:
          name: openvino_tests
          path: ${{ env.INSTALL_TEST_DIR }}

      - name: Extract OpenVINO packages
        run: |
          pushd ${INSTALL_DIR}
            tar -xzf openvino_package.tar.gz -C ${INSTALL_DIR} && rm openvino_package.tar.gz || exit 1
          popd
          pushd ${INSTALL_TEST_DIR}
            tar -xzf openvino_tests.tar.gz -C ${INSTALL_DIR} && rm openvino_tests.tar.gz || exit 1
          popd

      #
      # Tests
      #

      - name: OpenVINO Core Unit Tests
        run: |
          source ${INSTALL_DIR}/setupvars.sh
          ${INSTALL_TEST_DIR}/ov_core_unit_tests --gtest_print_time=1 --gtest_filter=-*IE_GPU* \
                --gtest_output=xml:${INSTALL_TEST_DIR}/TEST-OVCoreUT.xml

      - name: OpenVINO Inference Functional Tests
        run: |
          source ${INSTALL_DIR}/setupvars.sh
          ${INSTALL_TEST_DIR}/ov_inference_functional_tests --gtest_print_time=1 \
                --gtest_output=xml:${INSTALL_TEST_DIR}/TEST-InferenceFunc.xml

      - name: OpenVINO Inference Unit Tests
        run: |
          source ${INSTALL_DIR}/setupvars.sh
          ${INSTALL_TEST_DIR}/ov_inference_unit_tests --gtest_print_time=1 \
                --gtest_output=xml:${INSTALL_TEST_DIR}/TEST-InferenceUnit.xml

      - name: Low Precision Transformations Tests
        run: |
          source ${INSTALL_DIR}/setupvars.sh
          ${INSTALL_TEST_DIR}/ov_lp_transformations_tests --gtest_print_time=1 \
                --gtest_output=xml:${INSTALL_TEST_DIR}/TEST-LpTransformations.xml

      - name: OpenVINO Conditional compilation tests
        run: |
          source ${INSTALL_DIR}/setupvars.sh
          ${INSTALL_TEST_DIR}/ov_conditional_compilation_tests --gtest_print_time=1 \
                --gtest_output=xml:${INSTALL_TEST_DIR}/TEST-ConditionalCompilation.xml

      - name: IR frontend tests
        run: |
          source ${INSTALL_DIR}/setupvars.sh
          ${INSTALL_TEST_DIR}/ov_ir_frontend_tests --gtest_print_time=1 \
                --gtest_output=xml:${INSTALL_TEST_DIR}/TEST-IRFrontend.xml

      # Disabled in Azure: https://github.com/openvinotoolkit/openvino/blob/master/.ci/azure/linux.yml#L403
      # - name: PaddlePaddle frontend tests
      #   run: |
      #     source ${INSTALL_DIR}/setupvars.sh
      #     ${INSTALL_TEST_DIR}/paddle_tests --gtest_print_time=1 --gtest_filter=*smoke* \
      #           --gtest_output=xml:${INSTALL_TEST_DIR}/TEST-PaddleTests.xml

      # Present in the "Build" job as these tests require build directory
      # - name: ONNX frontend tests
      #   run: |
      #     source ${INSTALL_DIR}/setupvars.sh
      #     ${INSTALL_TEST_DIR}/ov_onnx_frontend_tests --gtest_print_time=1 --gtest_filter=-*IE_GPU*:*FrontEndLoadFromTest.testLoadFromTwoStreams*:*FrontEndLoadFromTest.testLoadFromTwoFiles* \
      #           --gtest_output=xml:${INSTALL_TEST_DIR}/TEST-ONNXFrontend.xml

      - name: TensorFlow Common tests
        run: |
          source ${INSTALL_DIR}/setupvars.sh
          ${INSTALL_TEST_DIR}/ov_tensorflow_common_tests --gtest_print_time=1 \
                --gtest_output=xml:${INSTALL_TEST_DIR}/TEST-TensorFlowCommonFrontend.xml

      - name: TensorFlow frontend tests
        run: |
          source ${INSTALL_DIR}/setupvars.sh
          ${INSTALL_TEST_DIR}/ov_tensorflow_frontend_tests --gtest_print_time=1 \
                --gtest_output=xml:${INSTALL_TEST_DIR}/TEST-TensorFlowFrontend.xml

      - name: TensorFlow Lite frontend tests
        run: |
          source ${INSTALL_DIR}/setupvars.sh
          ${INSTALL_TEST_DIR}/ov_tensorflow_lite_frontend_tests --gtest_print_time=1 \
                --gtest_output=xml:${INSTALL_TEST_DIR}/TEST-TensorFlowLiteFrontend.xml

      - name: Transformations Tests
        run: |
          source ${INSTALL_DIR}/setupvars.sh
          ${INSTALL_TEST_DIR}/ov_transformations_tests --gtest_print_time=1 \
                --gtest_output=xml:${INSTALL_TEST_DIR}/TEST-Transformations.xml

      - name: Common test utils tests
        run: |
          source ${INSTALL_DIR}/setupvars.sh
          ${INSTALL_TEST_DIR}/ov_util_tests --gtest_print_time=1 \
                --gtest_output=xml:${INSTALL_TEST_DIR}/TEST-CommonUtilTests.xml

      - name: Snippets func tests
        run: |
          source ${INSTALL_DIR}/setupvars.sh
          ${INSTALL_TEST_DIR}/ov_snippets_func_tests --gtest_print_time=1 \
                --gtest_output=xml:${INSTALL_TEST_DIR}/TEST-SnippetsFuncTests.xml

      - name: CPU plugin unit tests
        run: |
          source ${INSTALL_DIR}/setupvars.sh
          ${INSTALL_TEST_DIR}/ov_cpu_unit_tests --gtest_print_time=1 \
                --gtest_output=xml:${INSTALL_TEST_DIR}/TEST-CPUUnitTests.xml

      # Disabled in Azure: https://github.com/openvinotoolkit/openvino/blob/master/.ci/azure/linux.yml#L409
      # - name: GNA plugin unit tests
      #   run: |
      #     source ${INSTALL_DIR}/setupvars.sh
      #     ${INSTALL_TEST_DIR}/ov_gna_unit_tests --gtest_print_time=1 \
      #           --gtest_output=xml:${INSTALL_TEST_DIR}/TEST-GNAUnitTests.xml

      - name: AUTO UT
        run: |
          source ${INSTALL_DIR}/setupvars.sh
          ${INSTALL_TEST_DIR}/ov_auto_unit_tests --gtest_print_time=1 \
                --gtest_output=xml:${INSTALL_TEST_DIR}/TEST-ov_auto_unit_tests.xml

      - name: Template plugin tests
        run: |
          source ${INSTALL_DIR}/setupvars.sh
          ${INSTALL_TEST_DIR}/ov_template_func_tests --gtest_print_time=1 \
                --gtest_filter=*smoke* \
                --gtest_output=xml:${INSTALL_TEST_DIR}/TEST-TemplateFuncTests.xml

      - name: Inference Engine C API tests
        run: |
          source ${INSTALL_DIR}/setupvars.sh
          ${INSTALL_TEST_DIR}/InferenceEngineCAPITests --gtest_print_time=1 \
                --gtest_output=xml:${INSTALL_TEST_DIR}/TEST-InferenceEngineCAPITests.xml

      - name: OpenVINO C API tests
        run: |
          source ${INSTALL_DIR}/setupvars.sh
          ${INSTALL_TEST_DIR}/ov_capi_test --gtest_print_time=1 \
                --gtest_output=xml:${INSTALL_TEST_DIR}/TEST-OpenVINOCAPITests.xml

      - name: AutoBatch FuncTests
        run: |
          source ${INSTALL_DIR}/setupvars.sh
          ${INSTALL_TEST_DIR}/ov_auto_batch_func_tests --gtest_output=xml:${INSTALL_TEST_DIR}/TEST-ov_auto_batch_func_tests.xml

      - name: Proxy Plugin Tests
        run: |
          source ${INSTALL_DIR}/setupvars.sh
          ${INSTALL_TEST_DIR}/ov_proxy_plugin_tests --gtest_print_time=1 --gtest_output=xml:${INSTALL_TEST_DIR}/TEST-OVProxyTests.xml

      - name: Hetero Unit Tests
        run: |
          source ${{ env.INSTALL_DIR }}/setupvars.sh
          ${{ env.INSTALL_TEST_DIR }}/ov_hetero_unit_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-OVHeteroUnitTests.xml

      - name: Hetero Func Tests
        run: |
          source ${INSTALL_DIR}/setupvars.sh
          ${INSTALL_TEST_DIR}/ov_hetero_func_tests --gtest_print_time=1 --gtest_output=xml:${INSTALL_TEST_DIR}/TEST-OVHeteroFuncTests.xml

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: test-results-cpp
          path: ${{ env.INSTALL_TEST_DIR }}/TEST*.xml
          if-no-files-found: 'error'

  Python_Unit_Tests:
    needs: Build
    defaults:
      run:
        shell: bash
    runs-on: aks-linux-4-cores
    container:
      image: openvinogithubactions.azurecr.io/dockerhub/ubuntu:22.04
      volumes:
        - /mount/caches:/mount/caches
      # options: -u 1001:1001

    env:
      OPENVINO_REPO: ${{ github.workspace }}/openvino
      OPENVINO_CONTRIB_REPO: ${{ github.workspace }}/openvino_contrib
      INSTALL_DIR: ${{ github.workspace }}/install
      INSTALL_TEST_DIR: ${{ github.workspace }}/install/tests
      SAMPLES_INSTALL_DIR: ${{ github.workspace }}/install/samples
      LAYER_TESTS_INSTALL_DIR: ${{ github.workspace }}/install/tests/layer_tests
      MODEL_HUB_TESTS_INSTALL_DIR: ${{ github.workspace }}/install/tests/model_hub_tests
      BUILD_DIR: ${{ github.workspace }}/build
      DATA_PATH: ${{ github.workspace }}/testdata
      MODELS_PATH: ${{ github.workspace }}/testdata
      OV_TEMP: ${{ github.workspace }}/openvino_temp
      PYTHON_STATIC_ARGS: -m "not dynamic_library"
      TEST_USER_NAME: "ga_runner"

    steps:
      - name: Create test user
        run: |
          export USER_UID=1000
          export USER_GID=$USER_UID
          groupadd --gid $USER_GID ${{ env.TEST_USER_NAME }}
          useradd --uid $USER_UID --gid $USER_GID -m ${{ env.TEST_USER_NAME }}
          apt-get update && apt-get install -y sudo
          echo ${{ env.TEST_USER_NAME }} ALL=\(root\) NOPASSWD:ALL > /etc/sudoers.d/${{ env.TEST_USER_NAME }}
          chmod 0440 /etc/sudoers.d/${{ env.TEST_USER_NAME }}

      - name: Create Directories
        run: |
          mkdir -p ${{ env.INSTALL_DIR }} && chown ${{ env.TEST_USER_NAME }} ${{ env.INSTALL_DIR }}
          mkdir -p ${{ env.INSTALL_TEST_DIR }} && chown ${{ env.TEST_USER_NAME }} ${{ env.INSTALL_TEST_DIR }}

      - name: Install git
        run: |
          sudo apt update
          sudo apt --assume-yes install git git-lfs

      - name: Clone OpenVINO
        uses: actions/checkout@v4
        with:
          path: 'openvino'
          submodules: 'recursive'

      #
      # Dependencies
      #

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt --assume-yes install openjdk-11-jdk libbz2-dev clang unzip libpugixml-dev libtbb-dev intel-opencl-icd ocl-icd-opencl-dev opencl-headers libsnappy-dev

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install python dependencies
        run: |
          # For Python API
          pip install --upgrade pip
          pip install -r ${OPENVINO_REPO}/src/bindings/python/wheel/requirements-dev.txt
          pip install -r ${OPENVINO_REPO}/src/bindings/python/requirements.txt

          # For running Python API tests
          python3 -m pip install -r ${OPENVINO_REPO}/src/bindings/python/src/compatibility/openvino/requirements-dev.txt

          # For running ONNX frontend unit tests
          python3 -m pip install --force-reinstall -r ${OPENVINO_REPO}/src/frontends/onnx/tests/requirements.txt

          # For running TensorFlow frontend unit tests
          python3 -m pip install -r ${OPENVINO_REPO}/src/frontends/tensorflow/tests/requirements.txt

          # For running Paddle frontend unit tests
          python3 -m pip install -r ${OPENVINO_REPO}/src/frontends/paddle/tests/requirements.txt

          # For torchvision to OpenVINO preprocessing converter
          python3 -m pip install -r ${OPENVINO_REPO}/src/bindings/python/src/openvino/preprocess/torchvision/requirements.txt

      - name: Install MO dependencies
        run: |
          python3 -m pip install -r ${OPENVINO_REPO}/tools/mo/requirements_mxnet.txt
          python3 -m pip install -r ${OPENVINO_REPO}/tools/mo/requirements_caffe.txt
          python3 -m pip install -r ${OPENVINO_REPO}/tools/mo/requirements_kaldi.txt
          python3 -m pip install -r ${OPENVINO_REPO}/tools/mo/requirements_onnx.txt
          python3 -m pip install -r ${OPENVINO_REPO}/tools/mo/requirements_tf2.txt
          python3 -m pip install -r ${OPENVINO_REPO}/tools/mo/requirements_dev.txt

      - name: Download OpenVINO package
        uses: actions/download-artifact@v3
        with:
          name: openvino_package
          path: ${{ env.INSTALL_DIR }}

      - name: Download OpenVINO tests package
        uses: actions/download-artifact@v3
        with:
          name: openvino_tests
          path: ${{ env.INSTALL_TEST_DIR }}

      - name: Extract OpenVINO packages
        run: |

          pushd ${INSTALL_DIR}
            tar -xzf openvino_package.tar.gz -C ${INSTALL_DIR} && rm openvino_package.tar.gz || exit 1
          popd

          pushd ${INSTALL_TEST_DIR}
            tar -xzf openvino_tests.tar.gz -C ${INSTALL_DIR} && rm openvino_tests.tar.gz || exit 1
          popd

      - name: Install Python wheels
        run: |
          python3 -m pip install openvino-dev --find-links=${INSTALL_DIR}/tools

      - name: nGraph and IE Python Bindings Tests
        run: |
          source ${INSTALL_DIR}/setupvars.sh
          python3 -m pytest -s ${INSTALL_TEST_DIR}/pyngraph  ${{ env.PYTHON_STATIC_ARGS }} \
            --junitxml=${INSTALL_TEST_DIR}/TEST-Pyngraph.xml \
            --ignore=${INSTALL_TEST_DIR}/pyngraph/tests/test_onnx/test_zoo_models.py \
            --ignore=${INSTALL_TEST_DIR}/pyngraph/tests/test_onnx/test_backend.py

      - name: Python API 2.0 Tests
        run: |
          # For python imports to import pybind_mock_frontend
          export PYTHONPATH=${INSTALL_TEST_DIR}:$PYTHONPATH
          source ${INSTALL_DIR}/setupvars.sh
          export LD_LIBRARY_PATH=${INSTALL_TEST_DIR}:$LD_LIBRARY_PATH

          python3 -m pytest -sv ${{ env.INSTALL_TEST_DIR }}/pyopenvino ${{ env.PYTHON_STATIC_ARGS }} \
            --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-Pyngraph.xml \
            --ignore=${{ env.INSTALL_TEST_DIR }}/pyopenvino/tests/test_utils/test_utils.py \
            --ignore=${{ env.INSTALL_TEST_DIR }}/pyopenvino/tests/test_onnx/test_zoo_models.py \
            --ignore=${{ env.INSTALL_TEST_DIR }}/pyopenvino/tests/test_onnx/test_backend.py

      - name: Python API snippets
        run: |
          source ${{ env.INSTALL_DIR }}/setupvars.sh
          export PYTHONPATH=${{ env.INSTALL_TEST_DIR }}:${{ github.workspace }}/openvino/docs/:$PYTHONPATH
          export LD_LIBRARY_PATH=${{ env.INSTALL_TEST_DIR }}:$LD_LIBRARY_PATH

          python3 ${{ github.workspace }}/openvino/docs/snippets/main.py

      - name: Model Optimizer UT
        run: |
          export PYTHONPATH=${OPENVINO_REPO}/tools/mo/:${LAYER_TESTS_INSTALL_DIR}:${INSTALL_TEST_DIR}:${INSTALL_DIR}/python/python3.11:$PYTHONPATH

          # TODO: figure out why they need to be reinstalled
          python3 -m pip install -r ${OPENVINO_REPO}/tools/mo/requirements_mxnet.txt
          python3 -m pip install -r ${OPENVINO_REPO}/tools/mo/requirements_caffe.txt
          python3 -m pip install -r ${OPENVINO_REPO}/tools/mo/requirements_kaldi.txt
          python3 -m pip install -r ${OPENVINO_REPO}/tools/mo/requirements_onnx.txt
          python3 -m pip install -r ${OPENVINO_REPO}/tools/mo/requirements_tf2.txt
          python3 -m pip install -r ${OPENVINO_REPO}/tools/mo/requirements_dev.txt

          source ${INSTALL_DIR}/setupvars.sh
          python3 -m pytest -s ${INSTALL_TEST_DIR}/mo/unit_tests --junitxml=${INSTALL_TEST_DIR}/TEST-ModelOptimizer.xml

      - name: PyTorch Layer Tests
        run: |
          python3 -m pip install -r ${LAYER_TESTS_INSTALL_DIR}/requirements.txt
          export PYTHONPATH=${OPENVINO_REPO}/tools/mo/:${LAYER_TESTS_INSTALL_DIR}:$PYTHONPATH
          source ${INSTALL_DIR}/setupvars.sh

          python3 -m pytest ${LAYER_TESTS_INSTALL_DIR}/pytorch_tests -m precommit --junitxml=${INSTALL_TEST_DIR}/TEST-pytorch.xml
        env:
          TEST_DEVICE: CPU
          TEST_PRECISION: FP16

      - name: TensorFlow 1 Layer Tests - TF FE
        run: |
          python3 -m pip install -r ${LAYER_TESTS_INSTALL_DIR}/requirements.txt

          export PYTHONPATH=${OPENVINO_REPO}/tools/mo/:${LAYER_TESTS_INSTALL_DIR}:$PYTHONPATH

          source ${INSTALL_DIR}/setupvars.sh

          python3 -m pytest ${LAYER_TESTS_INSTALL_DIR}/tensorflow_tests/ --use_new_frontend -m precommit_tf_fe --junitxml=${INSTALL_TEST_DIR}/TEST-tf_fe.xml
        env:
          TEST_DEVICE: CPU
          TEST_PRECISION: FP16

      - name: TensorFlow 2 Layer Tests - TF FE
        run: |
          python3 -m pip install -r ${LAYER_TESTS_INSTALL_DIR}/requirements.txt
          export PYTHONPATH=${OPENVINO_REPO}/tools/mo/:${LAYER_TESTS_INSTALL_DIR}:$PYTHONPATH

          source ${INSTALL_DIR}/setupvars.sh

          python3 -m pytest ${LAYER_TESTS_INSTALL_DIR}/tensorflow2_keras_tests/ --use_new_frontend -m precommit_tf_fe --junitxml=${INSTALL_TEST_DIR}/TEST-tf2_fe.xml
        env:
          TEST_DEVICE: CPU
          TEST_PRECISION: FP16

      - name: JAX Layer Tests - TF FE
        run: |
          python3 -m pip install -r ${LAYER_TESTS_INSTALL_DIR}/requirements.txt
          export PYTHONPATH=${LAYER_TESTS_INSTALL_DIR}:$PYTHONPATH

          source ${INSTALL_DIR}/setupvars.sh

          python3 -m pytest ${LAYER_TESTS_INSTALL_DIR}/jax_tests/ -m precommit --junitxml=${INSTALL_TEST_DIR}/TEST-jax.xml
        env:
          TEST_DEVICE: CPU

      - name: TensorFlow 1 Layer Tests - Legacy FE
        run: |
          python3 -m pip install -r ${LAYER_TESTS_INSTALL_DIR}/requirements.txt
          export PYTHONPATH=${OPENVINO_REPO}/tools/mo/:${LAYER_TESTS_INSTALL_DIR}:$PYTHONPATH
          source ${INSTALL_DIR}/setupvars.sh

          python3 -m pytest ${LAYER_TESTS_INSTALL_DIR}/tensorflow_tests/test_tf_Roll.py --ir_version=10 --junitxml=${INSTALL_TEST_DIR}/TEST-tf_Roll.xml

      - name: TensorFlow 2 Layer Tests - Legacy FE
        run: |
          python3 -m pip install -r ${LAYER_TESTS_INSTALL_DIR}/requirements.txt
          export PYTHONPATH=${OPENVINO_REPO}/tools/mo/:${LAYER_TESTS_INSTALL_DIR}:$PYTHONPATH
          source ${INSTALL_DIR}/setupvars.sh

          python3 -m pytest ${LAYER_TESTS_INSTALL_DIR}/tensorflow2_keras_tests/test_tf2_keras_activation.py \
              --ir_version=11 --junitxml=${INSTALL_TEST_DIR}/TEST-tf2_Activation.xml -k "sigmoid"
        env:
          TEST_DEVICE: CPU
          TEST_PRECISION: FP16

      - name: TensorFlow Lite Layer Tests - TFL FE
        run: |
          python3 -m pip install -r ${LAYER_TESTS_INSTALL_DIR}/requirements.txt
          export PYTHONPATH=${OPENVINO_REPO}/tools/mo/:${LAYER_TESTS_INSTALL_DIR}:$PYTHONPATH
          source ${INSTALL_DIR}/setupvars.sh

          python3 -m pytest ${LAYER_TESTS_INSTALL_DIR}/tensorflow_lite_tests/ --junitxml=${INSTALL_TEST_DIR}/TEST-tfl_fe.xml
        env:
          TEST_DEVICE: CPU
          TEST_PRECISION: FP16

      - name: MO Python API Tests
        run: |
          python3 -m pip install -r ${LAYER_TESTS_INSTALL_DIR}/requirements.txt
          export PYTHONPATH=${OPENVINO_REPO}/tools/mo/:${LAYER_TESTS_INSTALL_DIR}:$PYTHONPATH
          source ${INSTALL_DIR}/setupvars.sh

          python3 -m pytest ${LAYER_TESTS_INSTALL_DIR}/mo_python_api_tests --junitxml=${INSTALL_TEST_DIR}/TEST-test_mo_convert.xml
        env:
          TEST_DEVICE: CPU
          TEST_PRECISION: FP16

      - name: Python Frontend tests
        run: |
          python3 -m pip install -r ${LAYER_TESTS_INSTALL_DIR}/requirements.txt
          export PYTHONPATH=${OPENVINO_REPO}/tools/mo/:${LAYER_TESTS_INSTALL_DIR}:$PYTHONPATH
          source ${INSTALL_DIR}/setupvars.sh

          python3 -m pytest ${LAYER_TESTS_INSTALL_DIR}/py_frontend_tests --junitxml=${INSTALL_TEST_DIR}/TEST-test_py_fontend.xml

      - name: Conversion UT
        run: |
          # For python imports to import pybind_mock_frontend
          export PYTHONPATH=${INSTALL_TEST_DIR}:$PYTHONPATH
          source ${INSTALL_DIR}/setupvars.sh

          python3 -m pytest -s ${OPENVINO_REPO}/tools/ovc/unit_tests --junitxml=${INSTALL_TEST_DIR}/TEST-OpenVinoConversion.xml

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: test-results-python
          path: |
            ${{ env.INSTALL_TEST_DIR }}/TEST*.html
            ${{ env.INSTALL_TEST_DIR }}/TEST*.xml
          if-no-files-found: 'error'

  CPU_Functional_Tests:
    needs: Build
    defaults:
      run:
        shell: bash
    runs-on: aks-linux-4-cores
    container:
      image: openvinogithubactions.azurecr.io/dockerhub/ubuntu:22.04
      volumes:
        - /mount/caches:/mount/caches
    env:
      INSTALL_DIR: ${{ github.workspace }}/install
      INSTALL_TEST_DIR: ${{ github.workspace }}/install/tests
      PARALLEL_TEST_SCRIPT: ${{ github.workspace }}/install/tests/functional_test_utils/run_parallel.py
      PARALLEL_TEST_CACHE: ${{ github.workspace }}/install/tests/test_cache.lst

    steps:
      - name: Create Directories
        run: mkdir -p ${INSTALL_DIR} ${INSTALL_TEST_DIR}

      - name: Install dependencies
        run: |
          apt update
          apt --assume-yes install openjdk-11-jdk libbz2-dev clang unzip libpugixml-dev libtbb-dev intel-opencl-icd ocl-icd-opencl-dev opencl-headers

      - name: Download OpenVINO package
        uses: actions/download-artifact@v3
        with:
          name: openvino_package
          path: ${{ env.INSTALL_DIR }}

      - name: Download OpenVINO tests package
        uses: actions/download-artifact@v3
        with:
          name: openvino_tests
          path: ${{ env.INSTALL_TEST_DIR }}

      - name: Extract OpenVINO packages
        run: |
          pushd ${INSTALL_DIR}
            tar -xzf openvino_package.tar.gz -C ${INSTALL_DIR} && rm openvino_package.tar.gz || exit 1
          popd
          pushd ${INSTALL_TEST_DIR}
            tar -xzf openvino_tests.tar.gz -C ${INSTALL_DIR} && rm openvino_tests.tar.gz || exit 1
          popd

      - name: Cache Tests Execution Time
        id: tests-functional-cpu-cache
        uses: actions/cache@v3
        with:
          path: ${{ env.PARALLEL_TEST_CACHE }}
          key: ${{ runner.os }}-tests-functional-cpu-cache

      - name: Intel CPU plugin func tests (parallel)
        run: |
          source ${{ env.INSTALL_DIR }}/setupvars.sh
          python3 ${{ env.PARALLEL_TEST_SCRIPT }} -e ${{ env.INSTALL_TEST_DIR }}/ov_cpu_func_tests -c ${{ env.PARALLEL_TEST_CACHE }} -w ${{ env.INSTALL_TEST_DIR }} -s suite -rf 0 -- --gtest_print_time=1 --gtest_filter=*smoke*
        timeout-minutes: 25

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: test-results-functional-cpu
          path: |
            ${{ env.INSTALL_TEST_DIR }}/logs/failed/*.log
            ${{ env.INSTALL_TEST_DIR }}/logs/crashed/*.log
            ${{ env.INSTALL_TEST_DIR }}/logs/hanged/*.log
            ${{ env.INSTALL_TEST_DIR }}/logs/interapted/*.log
            ${{ env.INSTALL_TEST_DIR }}/logs/disabled_tests.log
          if-no-files-found: 'error'

  Python_Unit_Tests-Model_Optimizer_UT:
    needs: Build
    defaults:
      run:
        shell: bash
    runs-on: aks-linux-4-cores
    container:
      image: openvinogithubactions.azurecr.io/dockerhub/ubuntu:22.04
      volumes:
        - /mount/caches:/mount/caches
    env:
      OPENVINO_REPO: ${{ github.workspace }}/openvino
      INSTALL_DIR: ${{ github.workspace }}/install
      INSTALL_TEST_DIR: ${{ github.workspace }}/install/tests
      TMPDIR: /tmp

    steps:
      - name: Test Prerequisites
        run: |
          mkdir -p ${{ env.INSTALL_DIR }} ${{ env.INSTALL_TEST_DIR }}
          mkdir -p ${TMPDIR}/not_writable_dir && sudo chattr +i ${TMPDIR}/not_writable_dir
          mkdir -p ${TMPDIR}/another_not_writable_dir && sudo chattr +i ${TMPDIR}/another_not_writable_dir

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Download OpenVINO package
        uses: actions/download-artifact@v3
        with:
          name: openvino_package
          path: ${{ env.INSTALL_DIR }}

      - name: Download OpenVINO tests package
        uses: actions/download-artifact@v3
        with:
          name: openvino_tests
          path: ${{ env.INSTALL_TEST_DIR }}

      - name: Extract OpenVINO packages
        run: |
          pushd ${{ env.INSTALL_DIR }}
            tar -xzf openvino_package.tar.gz -C ${{ env.INSTALL_DIR }} && rm openvino_package.tar.gz || exit 1
          popd

          pushd ${{ env.INSTALL_TEST_DIR }}
            tar -xzf openvino_tests.tar.gz -C ${{ env.INSTALL_DIR }} && rm openvino_tests.tar.gz || exit 1
          popd

      - name: Install Python wheels
        run: |
          python3 -m pip install openvino --find-links=${{ env.INSTALL_DIR }}/tools

      - name: Install MO dependencies
        run: |
          pip install -r ${OPENVINO_REPO}/tools/mo/requirements_mxnet.txt
          pip install -r ${OPENVINO_REPO}/tools/mo/requirements_caffe.txt
          pip install -r ${OPENVINO_REPO}/tools/mo/requirements_kaldi.txt
          pip install -r ${OPENVINO_REPO}/tools/mo/requirements_onnx.txt
          pip install -r ${OPENVINO_REPO}/tools/mo/requirements_tf2.txt
          pip install -r ${OPENVINO_REPO}/tools/mo/requirements_dev.txt

      - name: Model Optimizer UT
        run: |
          export PYTHONPATH=${OPENVINO_REPO}/tools/mo/:${LAYER_TESTS_INSTALL_DIR}:${INSTALL_TEST_DIR}:${INSTALL_DIR}/python/python3.11:$PYTHONPATH
          source ${INSTALL_DIR}/setupvars.sh
          python3 -m pytest -s ${INSTALL_TEST_DIR}/mo/unit_tests --junitxml=${INSTALL_TEST_DIR}/TEST-ModelOptimizer.xml

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: test-results-python
          path: |
            ${{ env.INSTALL_TEST_DIR }}/TEST*.html
            ${{ env.INSTALL_TEST_DIR }}/TEST*.xml
          if-no-files-found: 'error'

  TensorFlow_Hub_Models_Tests:
    needs: Build
    defaults:
      run:
        shell: bash
    runs-on: ${{ github.event_name == 'schedule' && 'ubuntu-20.04-8-cores' || 'ubuntu-20.04'}}
    env:
      INSTALL_DIR: ${{ github.workspace }}/install
      INSTALL_TEST_DIR: ${{ github.workspace }}/install/tests
      MODEL_HUB_TESTS_INSTALL_DIR: ${{ github.workspace }}/install/tests/model_hub_tests

    steps:
      - name: Create Directories
        run: |
          mkdir -p ${{ env.INSTALL_DIR }} ${{ env.INSTALL_TEST_DIR }}

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Download OpenVINO package
        uses: actions/download-artifact@v3
        with:
          name: openvino_package
          path: ${{ env.INSTALL_DIR }}

      - name: Download OpenVINO tests package
        uses: actions/download-artifact@v3
        with:
          name: openvino_tests
          path: ${{ env.INSTALL_TEST_DIR }}

      - name: Extract OpenVINO packages
        run: |
          pushd ${{ env.INSTALL_DIR }}
            tar -xzf openvino_package.tar.gz -C ${{ env.INSTALL_DIR }} && rm openvino_package.tar.gz || exit 1
          popd

          pushd ${{ env.INSTALL_TEST_DIR }}
            tar -xzf openvino_tests.tar.gz -C ${{ env.INSTALL_DIR }} && rm openvino_tests.tar.gz || exit 1
          popd

      - name: Install Python wheels
        run: |
          python3 -m pip install openvino --find-links=${{ env.INSTALL_DIR }}/tools

      - name: TensorFlow Hub Tests - TF FE
        run: |
          python3 -m pip install -r ${{ env.MODEL_HUB_TESTS_INSTALL_DIR }}/tf_hub_tests/requirements.txt

          export PYTHONPATH=${{ env.MODEL_HUB_TESTS_INSTALL_DIR }}:$PYTHONPATH

          python3 -m pytest ${{ env.MODEL_HUB_TESTS_INSTALL_DIR }}/tf_hub_tests/ -m ${{ env.TYPE }} --html=${{ env.INSTALL_TEST_DIR }}/TEST-tf_hub_tf_fe.html --self-contained-html
        env:
          TYPE: ${{ github.event_name == 'schedule' && 'nightly' || 'precommit'}}
          TEST_DEVICE: CPU

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: test-results-tensorflow-hub-models
          path: |
            ${{ env.INSTALL_TEST_DIR }}/TEST*.html
          if-no-files-found: 'error'

  PyTorch_Models_Tests:
    needs: Build
    defaults:
      run:
        shell: bash
    runs-on: ${{ github.event_name == 'schedule' && 'ubuntu-20.04-8-cores' || 'ubuntu-20.04'}}
    env:
      INSTALL_DIR: ${{ github.workspace }}/install
      INSTALL_TEST_DIR: ${{ github.workspace }}/install/tests
      MODEL_HUB_TESTS_INSTALL_DIR: ${{ github.workspace }}/install/tests/model_hub_tests

    steps:
      - name: Create Directories
        run: |
          mkdir -p ${{ env.INSTALL_DIR }} ${{ env.INSTALL_TEST_DIR }}
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Download OpenVINO package
        uses: actions/download-artifact@v3
        with:
          name: openvino_package
          path: ${{ env.INSTALL_DIR }}

      - name: Download OpenVINO tests package
        uses: actions/download-artifact@v3
        with:
          name: openvino_tests
          path: ${{ env.INSTALL_TEST_DIR }}

      - name: Extract OpenVINO packages
        run: |
          pushd ${{ env.INSTALL_DIR }}
            tar -xzf openvino_package.tar.gz -C ${{ env.INSTALL_DIR }} && rm openvino_package.tar.gz || exit 1
          popd
          pushd ${{ env.INSTALL_TEST_DIR }}
            tar -xzf openvino_tests.tar.gz -C ${{ env.INSTALL_DIR }} && rm openvino_tests.tar.gz || exit 1
          popd
      - name: Install Python wheels
        run: |
          python3 -m pip install openvino --find-links=${{ env.INSTALL_DIR }}/tools
      - name: PyTorch Models Tests
        run: |
          python3 -m pip install -r ${{ env.MODEL_HUB_TESTS_INSTALL_DIR }}/torch_tests/requirements.txt
          export PYTHONPATH=${{ env.MODEL_HUB_TESTS_INSTALL_DIR }}:$PYTHONPATH
          python3 -m pytest ${{ env.MODEL_HUB_TESTS_INSTALL_DIR }}/torch_tests/ -m ${{ env.TYPE }} --html=${{ env.INSTALL_TEST_DIR }}/TEST-torch_model_tests.html --self-contained-html
        env:
          TYPE: ${{ github.event_name == 'schedule' && 'nightly' || 'precommit'}}
          TEST_DEVICE: CPU

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: test-results-torch-models
          path: |
            ${{ env.INSTALL_TEST_DIR }}/TEST*.html
          if-no-files-found: 'error'
