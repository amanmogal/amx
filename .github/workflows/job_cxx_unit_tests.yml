name: C++ Unit Tests

on:
  workflow_call:
    inputs:
      runner:
        description: 'Machine on which the tests would run'
        type: string
        required: true
      image:
        description: 'Docker image in which the tests would run'
        type: string
        required: false
        default: null
      affected-components:
        description: 'Components that are affected by changes in the commit defined by the Smart CI Action'
        type: string
        required: true
      os:
        description: 'OS that is used for testing in the form of "ubuntu_20_04"'
        type: string
        required: true

permissions: read-all

jobs:
  CXX_Unit_Tests:
    name: C++ unit tests
    timeout-minutes: ${{ contains(inputs.runner, 'win') && 50 || 35 }}
    runs-on: ${{ inputs.runner }}
    container:
      image: ${{ inputs.image }}
    defaults:
      run:
        shell: ${{ contains(inputs.runner, 'win') && 'pwsh' || 'bash' }}
    env:
      DEBIAN_FRONTEND: noninteractive # to prevent apt-get from waiting user input
      INSTALL_DIR: ${{ github.workspace }}/install
      INSTALL_TEST_DIR: ${{ github.workspace }}/install/tests
      SOURCE_COMMAND: ${{ contains(inputs.runner, 'linux') && 'source' || '.' }}
      SETUPVARS: ${{ contains(inputs.runner, 'win') && 'setupvars.ps1' || 'setupvars.sh' }}
    strategy:
      max-parallel: 5
      fail-fast: false
      matrix:
        include:
          - name: 'OpenVINO Core Unit Tests'
            condition: ${{ fromJSON(inputs.affected-components).Core.test && inputs.os != 'debian_10' }} # Ticket: 153150
            test_binary: ov_core_unit_tests
            test_args: --gtest_print_time=1 --gtest_filter=-*IE_GPU* --gtest_output=xml:TEST-OVCoreUT.xml
            
          - name: OpenVINO Inference Functional Tests
            condition: ${{ fromJSON(inputs.affected-components).inference.test && inputs.os != 'debian_10' }} # Ticket: 153151
            test_binary: ov_inference_functional_tests 
            test_args: --gtest_print_time=1 --gtest_output=xml:TEST-InferenceFunc.xml
          
          - name: OpenVINO Inference Unit Tests
            condition: fromJSON(inputs.affected-components).inference.test
            test_binary: ov_inference_unit_tests
            test_args: --gtest_print_time=1 --gtest_output=xml:TEST-InferenceUnit.xml
            
          - name: Low Precision Transformations Tests
            condition: fromJSON(inputs.affected-components).LP_transformations.test
            test_binary: ov_lp_transformations_tests
            test_args: --gtest_print_time=1 --gtest_output=xml:TEST-LpTransformations.xml
            
          - name: OpenVINO Conditional compilation tests
            condition: fromJSON(inputs.affected-components).Core.test
            test_binary: ov_conditional_compilation_tests
            test_args: --gtest_print_time=1 --gtest_output=xml:TEST-ConditionalCompilation.xml
              
          - name: IR frontend tests
            condition: fromJSON(inputs.affected-components).IR_FE.test
            test_binary: ov_ir_frontend_tests
            test_args: --gtest_print_time=1 --gtest_output=xml:TEST-IRFrontend.xml
              
          - name: PaddlePaddle frontend tests
            condition: fromJSON(inputs.affected-components).PDPD_FE.test && runner.os != 'Windows' # Ticket: 149651
            test_binary: paddle_tests
            test_args: --gtest_print_time=1 --gtest_output=xml:TEST-PaddleTests.xml
            
          - name: ONNX frontend tests
            condition: fromJSON(inputs.affected-components).ONNX_FE.test && runner.arch != 'ARM64' # Ticket for macOS ARM64: 122663, for Linux ARM64: 126280, 153161
            test_binary: ov_onnx_frontend_tests
            test_args: --gtest_print_time=1 --gtest_filter=-*IE_GPU* --gtest_output=xml:TEST-ONNXFrontend.xml
            
          - name: TensorFlow Common frontend tests
            condition: fromJSON(inputs.affected-components).TF_FE.test || fromJSON(inputs.affected-components).TFL_FE.test && (runner.os != 'macOS' && runner.arch != 'ARM64')
            test_binary: ov_tensorflow_common_tests
            test_args: --gtest_print_time=1 --gtest_output=xml:TEST-TensorFlowCommonFrontend.xml
            
          - name: TensorFlow frontend tests
            condition: fromJSON(inputs.affected-components).TF_FE.test
            test_binary: ov_tensorflow_frontend_tests
            test_args: --gtest_print_time=1 --gtest_output=xml:TEST-TensorFlowFrontend.xml
            
          - name: TensorFlow Lite frontend tests
            condition: ${{ fromJSON(inputs.affected-components).TFL_FE.test }} 
            test_binary: ov_tensorflow_lite_frontend_tests
            test_args: --gtest_print_time=1 --gtest_output=xml:TEST-TensorFlowLiteFrontend.xml
            
          - name: Transformations func tests
            condition: fromJSON(inputs.affected-components).transformations.test && runner.arch != 'ARM64' # Ticket: 126281
            test_binary: ov_transformations_tests
            test_args: --gtest_print_time=1 --gtest_output=xml:TEST-Transformations.xml \
            
          - name: Common test utils tests
            condition: runner.os != 'macOS' # Ticket: 134469 
            test_binary: ov_util_tests
            test_args: --gtest_print_time=1 --gtest_output=xml:TEST-CommonUtilTests.xml
            
          - name: Snippets func tests
            condition: fromJSON(inputs.affected-components).CPU.test
            test_binary: ov_snippets_func_tests
            test_args: --gtest_print_time=1 --gtest_output=xml:TEST-SnippetsFuncTests.xml
            
          - name: CPU plugin unit tests
            condition: fromJSON(inputs.affected-components).CPU.test
            test_binary: ov_cpu_unit_tests
            test_args: --gtest_print_time=1 --gtest_output=xml:TEST-CPUUnitTests.xml
            
          - name: Subgraphs Dumper tests
            condition: true
            test_binary: ov_subgraphs_dumper_tests
            test_args: --gtest_print_time=1 --gtest_output=xml:TEST-ov_subgraphs_dumper_tests.xml
            
          - name: Template OpImpl tests
            condition: true
            test_binary: ov_op_conformance_tests
            test_args: --gtest_print_time=1 --device=TEMPLATE --gtest_filter=*OpImpl*--gtest_output=xml:TEST-OpImplTests.xml 
            
          - name: AUTO unit tests
            condition: fromJSON(inputs.affected-components).AUTO.test
            test_binary: ov_auto_unit_tests
            test_args: --gtest_print_time=1 --gtest_output=xml:TEST-ov_auto_unit_tests.xml
            
          - name: AUTO func Tests
            condition: fromJSON(inputs.affected-components).AUTO.test
            test_binary: ov_auto_func_tests
            test_args: --gtest_print_time=1 --gtest_output=xml:TEST-ov_auto_func_tests.xml
            
          - name: Template plugin func tests
            condition: fromJSON(inputs.affected-components).TEMPLATE.tes
            test_binary: ov_template_func_tests
            test_args: --gtest_print_time=1 --gtest_filter=*smoke* --gtest_output=xml:TEST-TemplateFuncTests.xml
            
          - name: OV utils unit tests 
            condition: runner.os != 'macOS' # Ticket: 134469
            test_binary: ov_util_tests
            test_args: --gtest_print_time=1 --gtest_output=xml:TEST-ov_util_tests.xml
             
          - name: OpenVINO C API tests
            condition: ${{ fromJSON(inputs.affected-components).C_API.test && inputs.os != 'debian_10' }} # Ticket: 153169
            test_binary: ov_capi_test
            test_args: --gtest_print_time=1 --gtest_output=xml:TEST-OpenVINOCAPITests.xml
            
          - name: AutoBatch unit tests
            condition: fromJSON(inputs.affected-components).AUTO_BATCH.test
            test_binary: ov_auto_batch_unit_tests
            test_args: --gtest_output=xml:TEST-ov_auto_batch_unit_tests.xml
            
          - name: AutoBatch func tests
            condition: fromJSON(inputs.affected-components).AUTO_BATCH.test
            test_binary: ov_auto_batch_func_tests
            test_args: --gtest_filter="*smoke*" --gtest_output=xml:TEST-ov_auto_batch_func_tests.xml
            
          - name: Proxy Plugin func tests
            condition: fromJSON(inputs.affected-components).PROXY.test
            test_binary: ov_proxy_plugin_tests
            test_args: --gtest_print_time=1 --gtest_output=xml:TEST-OVProxyTests.xml
            
          - name: Hetero unit tests
            condition: fromJSON(inputs.affected-components).HETERO.test
            test_binary: ov_hetero_unit_tests
            test_args: --gtest_print_time=1 --gtest_output=xml:TEST-OVHeteroUnitTests.xml
            
          - name: Hetero func tests
            condition: ${{ fromJSON(inputs.affected-components).HETERO.test && inputs.os != 'debian_10' }} # Ticket: 153170
            test_binary: ov_hetero_func_tests
            test_args: --gtest_print_time=1 --gtest_output=xml:TEST-OVHeteroFuncTests.xml --gtest_filter="*smoke*"
          
    steps:
      - name: Download OpenVINO package
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: openvino_package
          path: ${{ env.INSTALL_DIR }}

      - name: Download OpenVINO tests package
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
        with:
          name: openvino_tests
          path: ${{ env.INSTALL_TEST_DIR }}

      # Needed as ${{ github.workspace }} is not working correctly when using Docker
      - name: Setup Variables (Unix)
        if: ${{ runner.os != 'Windows' }}
        run: |
          echo "INSTALL_DIR=$GITHUB_WORKSPACE/install" >> "$GITHUB_ENV"
          echo "INSTALL_TEST_DIR=$GITHUB_WORKSPACE/install/tests" >> "$GITHUB_ENV"
          echo "SETUPVARS_COMMAND=${{ env.SOURCE_COMMAND }} $GITHUB_WORKSPACE/install/${{ env.SETUPVARS }}" >> "$GITHUB_ENV"

      - name: Install OpenVINO dependencies (mac)
        if: runner.os == 'macOS'
        run: brew install pigz
          
      - name: Setup Variables (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: Add-Content -Path $env:GITHUB_ENV -Value "SETUPVARS_COMMAND=${{ env.SOURCE_COMMAND }} ${{ github.workspace }}/install/${{ env.SETUPVARS }}"

      - name: Extract OpenVINO packages (Unix)
        if: ${{ runner.os != 'Windows' }}
        run: |
          pushd $INSTALL_DIR
            pigz -dc openvino_package.tar.gz | tar -xf - -C ${INSTALL_DIR}
          popd
          pushd $INSTALL_TEST_DIR
            pigz -dc openvino_tests.tar.gz | tar -xf - -C ${INSTALL_DIR}
          popd

      - name: Extract OpenVINO packages (Windows)
        if: ${{ runner.os == 'Windows' }}
        run: |
          pushd ${{ env.INSTALL_DIR }}
            Expand-Archive openvino_package.zip -DestinationPath "${{ env.INSTALL_DIR }}"
          popd
          pushd ${{ env.INSTALL_TEST_DIR }}
            Expand-Archive openvino_tests.zip -DestinationPath "${{ env.INSTALL_DIR }}"
          popd

      #
      # Tests
      #
      
      - name: ${{ matrix.name }}
        if: ${{ matrix.condition}}
        run: |
          ${{ env.SETUPVARS_COMMAND }}
          ${{ matrix.test_binary }} ${{ matrix.test_args }}
        working-directory: ${{ env.INSTALL_TEST_DIR }}

      - name: Upload Test Results
        uses: actions/upload-artifact@b4b15b8c7c6ac21ea08fcf65892d2ee8f75cf882 # v4.4.3
        if: ${{ !cancelled() }}
        with:
          name: test-results-${{ matrix.test_binary }}
          path: ${{ env.INSTALL_TEST_DIR }}/TEST*.xml
          if-no-files-found: 'warn'
