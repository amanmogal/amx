name: Python unit tests

on:
  workflow_call:
    inputs:
      runner:
        description: 'Machine on which the tests would run'
        type: string
        required: true
      container:
        description: 'JSON to be converted to the value of the "container" configuration for the job'
        type: string
        required: false
        default: '{"image": null}'
      affected-components:
        description: 'Components that are affected by changes in the commit defined by the Smart CI Action'
        type: string
        required: true

env:
  PIP_CACHE_PATH: /mount/caches/pip/linux
  PYTHON_VERSION: '3.11'

jobs:
  Python_Unit_Tests:
    name: Python unit tests
    timeout-minutes: 60
    runs-on: ${{ inputs.runner }}
    container: ${{ fromJSON(inputs.container) }}
    defaults:
      run:
        shell: bash
    env:
      DEBIAN_FRONTEND: noninteractive # to prevent apt-get from waiting user input
      OPENVINO_REPO: ${{ github.workspace }}/openvino
      INSTALL_DIR: ${{ github.workspace }}/install
      INSTALL_TEST_DIR: ${{ github.workspace }}/install/tests
      LAYER_TESTS_INSTALL_DIR: ${{ github.workspace }}/install/tests/layer_tests
    steps:
      - name: Set apt retries
        if: runner.os == 'Linux'
        run: echo 'Acquire::Retries "10";' > /etc/apt/apt.conf.d/80-retries

      - name: Download OpenVINO package
        uses: actions/download-artifact@v4
        with:
          name: openvino_package
          path: ${{ env.INSTALL_DIR }}

      - name: Download OpenVINO tests package
        uses: actions/download-artifact@v4
        with:
          name: openvino_tests
          path: ${{ env.INSTALL_TEST_DIR }}

      # Needed as ${{ github.workspace }} is not working correctly when using Docker
      - name: Setup Variables
        run: |
          echo "OPENVINO_REPO=$GITHUB_WORKSPACE/openvino" >> "$GITHUB_ENV"
          echo "INSTALL_DIR=$GITHUB_WORKSPACE/install" >> "$GITHUB_ENV"
          echo "INSTALL_TEST_DIR=$GITHUB_WORKSPACE/install/tests" >> "$GITHUB_ENV"
          echo "LAYER_TESTS_INSTALL_DIR=$GITHUB_WORKSPACE/install/tests/layer_tests" >> "$GITHUB_ENV"

      - name: Extract OpenVINO packages
        run: |
          pushd $INSTALL_DIR
            tar -xzf openvino_package.tar.gz -C $INSTALL_DIR
          popd
          pushd $INSTALL_TEST_DIR
            tar -xzf openvino_tests.tar.gz -C $INSTALL_DIR
          popd

      - name: Install OpenVINO dependencies (Linux)
        if: runner.os == 'Linux'
        run: $INSTALL_DIR/install_dependencies/install_openvino_dependencies.sh -c=core -c=dev -y -c=gpu

      - name: Fetch setup_python action
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github/actions/setup_python/action.yml
          sparse-checkout-cone-mode: false
          path: 'action_root'

      - name: Setup Python ${{ env.PYTHON_VERSION }}
        uses: ./action_root/.github/actions/setup_python
        with:
          version: ${{ env.PYTHON_VERSION }}
          pip-cache-path: ${{ runner.os == 'Linux' && env.PIP_CACHE_PATH || '' }}
          should-setup-pip-paths: ${{ runner.os == 'Linux' }}
          self-hosted-runner: ${{ runner.os == 'Linux' }}

      #
      # Tests
      #

      - name: Install OpenVINO Python wheels
        run: |
          # Install the core OV wheel
          python3 -m pip install ${INSTALL_DIR}/tools/openvino-*.whl

          extras_to_install="caffe,kaldi,onnx,tensorflow2,pytorch"

          if [[ "${{ runner.arch }}" != "ARM64" ]]; then
            extras_to_install="mxnet,$extras_to_install"
          fi

          # Find and install OV dev wheel
          pushd ${INSTALL_DIR}/tools
            ov_dev_wheel_name=$(find . -name 'openvino_dev*.whl')
            python3 -m pip install $ov_dev_wheel_name[$extras_to_install]
          popd

      - name: Install Python API tests dependencies
        run: |
          # To enable pytest parallel features
          python3 -m pip install pytest-xdist[psutil]
          # For torchvision to OpenVINO preprocessing converter
          python3 -m pip install -r ${INSTALL_TEST_DIR}/python/preprocess/torchvision/requirements.txt

          # TODO: replace with Python API tests requirements
          python3 -m pip install -r ${INSTALL_TEST_DIR}/mo/requirements_dev.txt

      - name: Clone API snippets
        if: runner.os != 'macOS'
        uses: actions/checkout@v4
        with:
          sparse-checkout: openvino/docs/snippets
          path: ${{ env.OPENVINO_REPO }}
          submodules: 'false'
          sparse-checkout-cone-mode: false

      - name: Docs Python snippets
        if: runner.os != 'macOS'
        run: |
          # to find 'snippets' module in docs
          export PYTHONPATH=${{ env.OPENVINO_REPO }}/docs
          # for 'template' extension
          export LD_LIBRARY_PATH=${INSTALL_TEST_DIR}:$LD_LIBRARY_PATH
          python3 ${{ env.OPENVINO_REPO }}/docs/snippets/main.py

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: test-results-python
          path: |
            ${{ env.INSTALL_TEST_DIR }}/TEST*.html
            ${{ env.INSTALL_TEST_DIR }}/TEST*.xml
          if-no-files-found: 'warn'
