name: Linux Conditional Compilation (Ubuntu 22.04, Python 3.11)
on:
  workflow_dispatch:
  pull_request:
    paths-ignore:
      - '**/docs/**'
      - 'docs/**'
      - '**/**.md'
      - '**.md'
      - '**/layer_tests_summary/**'
      - '**/conformance/**'
  push:
    paths-ignore:
      - '**/docs/**'
      - 'docs/**'
      - '**/**.md'
      - '**.md'
      - '**/layer_tests_summary/**'
      - '**/conformance/**'
    branches:
      - master

concurrency:
  # github.ref is not unique in post-commit
  group: ${{ github.event_name == 'push' && github.run_id || github.ref }}-linux-cc
  cancel-in-progress: true

jobs:
  Build:
    defaults:
      run:
        shell: bash
    runs-on: aks-linux-16-cores
    container:
      image: openvinogithubactions.azurecr.io/dockerhub/ubuntu:22.04
      volumes:
        - /mount/caches:/mount/caches
    env:
      DEBIAN_FRONTEND: noninteractive # to prevent apt-get from waiting user input
      CMAKE_BUILD_TYPE: 'Release'
      CMAKE_GENERATOR: 'Ninja Multi-Config'
      CMAKE_CXX_COMPILER_LAUNCHER: ccache
      CMAKE_C_COMPILER_LAUNCHER: ccache
      GITHUB_WORKSPACE: '/__w/openvino/openvino'
      OPENVINO_REPO: /__w/openvino/openvino/openvino
      BUILD_DIR: /__w/openvino/openvino/openvino_build
      MODELS_PATH: /__w/openvino/openvino/testdata
      CCACHE_DIR: /mount/caches/ccache/ubuntu22_x86_64_cc_Release
      CCACHE_TEMPDIR: /__w/openvino/openvino/ccache_temp
      CCACHE_MAXSIZE: 50G
    steps:

      - name: Install git
        run: |
          apt-get update
          apt-get install --assume-yes --no-install-recommends git ca-certificates git-lfs

      - name: Clone OpenVINO
        uses: actions/checkout@v4
        with:
          path: ${{ env.OPENVINO_REPO }}
          submodules: 'true'

      - name: Clone test models
        uses: actions/checkout@v4
        with:
          repository: 'openvinotoolkit/testdata'
          path: ${{ env.MODELS_PATH }}
          lfs: 'true'

      #
      # Dependencies
      #

      - name: Install build dependencies
        run: |
          bash ${OPENVINO_REPO}/install_build_dependencies.sh

      #
      # Build
      #

      - name: CMake configure CC COLLECT
        run: |
          cmake \
            -G "${{ env.CMAKE_GENERATOR }}" \
            -DENABLE_CPPLINT=OFF \
            -DENABLE_GAPI_PREPROCESSING=OFF \
            -DCMAKE_VERBOSE_MAKEFILE=ON \
            -DCMAKE_COMPILE_WARNING_AS_ERROR=OFF \
            -DENABLE_FASTER_BUILD=ON \
            -DENABLE_PROFILING_ITT=ON \
            -DSELECTIVE_BUILD=COLLECT \
            -S ${OPENVINO_REPO} \
            -B ${BUILD_DIR}

      - name: Build CC COLLECT
        run: cmake --build ${BUILD_DIR} --parallel --config ${{ env.CMAKE_BUILD_TYPE }} --target openvino_intel_cpu_plugin openvino_ir_frontend benchmark_app sea_itt_lib

      - name: Show ccache stats
        run: ccache --show-stats

      - name: Code usage analysis
        run: |
          python3 ${OPENVINO_REPO}/thirdparty/itt_collector/runtool/sea_runtool.py \
            --bindir ${OPENVINO_REPO}/bin/intel64/Release -o ${BUILD_DIR}/itt_stat ! \
          ${OPENVINO_REPO}/bin/intel64/Release/benchmark_app -niter 1 -nireq 1 \
            -m ${MODELS_PATH}/models/test_model/test_model_fp32.xml -d CPU

      - name: CMake configure with CC ON
        run: cmake -DSELECTIVE_BUILD=ON -DSELECTIVE_BUILD_STAT=${BUILD_DIR}/*.csv -S ${OPENVINO_REPO} -B ${BUILD_DIR}

      - name: Build with CC ON
        run: cmake --build ${BUILD_DIR} --parallel --config ${{ env.CMAKE_BUILD_TYPE }} --target openvino_intel_cpu_plugin openvino_ir_frontend

      - name: Use OpenVINO after CC
        run: |
          ${OPENVINO_REPO}/bin/intel64/Release/benchmark_app -niter 1 -nireq 1 \
            -m ${MODELS_PATH}/models/test_model/test_model_fp32.xml -d CPU
