"""Entry point for comparison of ov_models through e2e framework

Default run:
$ pytest test.py

Options[*]:
--modules       Paths to tests
--env_conf      Path to environment config
--test_conf     Path to test config

[*] For more information see conftest.py
"""
# pylint:disable=invalid-name
import logging as log

from openvino.runtime import Core
from openvino.runtime import serialize

from IRs_comparator.utils import compare_ov_functions
from common_utils.logger import get_logger
from utils.e2e.common.pipeline import Pipeline

pytest_plugins = ('e2e_oss.plugins.e2e_test.conftest',)

log = get_logger(__name__)


def test_run(instance, prepare_test_info, copy_input_files):
    """Parameterized test.

    :param instance: test instance
    """
    api_2 = instance.api_2
    prepare_test_info['pytestEntrypoint'] = 'E2E: compare ov_model through E2E'
    if not api_2:
        prepare_test_info['pytestEntrypoint'] += ' old API'

    log.info("Running {test_id} test".format(test_id=instance.test_id))
    instance.prepare_prerequisites()
    instance.ie_pipeline.pop('infer', None)

    instance.use_mo_cmd_tool = True
    instance_ref_pipeline = instance.ie_pipeline
    instance_ref_pipeline["get_ir"]["mo"].update({"use_mo_cmd_tool": instance.use_mo_cmd_tool})

    ref_pipeline = Pipeline(instance_ref_pipeline)
    ref_pipeline.run()

    instance.use_mo_cmd_tool = False
    instance_test_pipeline = instance.ie_pipeline
    instance_test_pipeline["get_ir"]["mo"].update({"use_mo_cmd_tool": instance.use_mo_cmd_tool})

    test_pipeline = Pipeline(instance_test_pipeline)
    test_pipeline.run()

    ref_model = ref_pipeline.details.xml
    test_model = test_pipeline.details.xml

    ie = Core()
    ref_model = ie.read_model(ref_model)
    test_model = ie.read_model(test_model)

    log.info("Running comparators:")
    flag, status = compare_ov_functions(model_to_compare=test_model, reference_model=ref_model)
    assert flag, status

    log.info("IRs generated by MO CLI tool and mo_convert are equal")



