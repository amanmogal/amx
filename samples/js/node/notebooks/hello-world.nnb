{
    "cells": [
        {
            "language": "markdown",
            "source": [
                "# Hello Image Classification\n\nThis basic introduction to OpenVINOâ„¢ shows how to do inference with an image classification model.\n\n A pre-trained [MobileNetV3 model](https://docs.openvino.ai/2023.0/omz_models_model_mobilenet_v3_small_1_0_224_tf.html) from [Open Model Zoo](https://github.com/openvinotoolkit/open_model_zoo/) is used in this tutorial. For more information about how OpenVINO IR models are created, refer to the [TensorFlow to OpenVINO](../tensorflow-to-openvino/tensorflow-to-openvino.ipynb) tutorial.\n   "
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Imports"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const { cv } = require('opencv-wasm');\nconst { display } = require('node-kernel');\nconst { addon: ov } = require('openvino-node');\n\nconst Image = require('../image.js');\nconst imagenetClassesMap = require('../../assets/datasets/imagenet_class_index.json');\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Initialize parameters"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const modelXMLPath = '../../assets/models/v3-small_224_1.0_float.xml';"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Load the Model"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const core = new ov.Core();\nconst model = await core.readModel(modelXMLPath);\nconst compiledModel = await core.compileModel(model, 'CPU');\n\nconst inputLayer = compiledModel.inputs[0];\nconst outputLayer = compiledModel.outputs[0];\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Load an Image"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const img = await Image.load('../../assets/images/coco.jpg');\n\nimg.display(display);\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Create a tensor"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const [N, inputHeight, inputWidth] = inputLayer.shape;\nconst resizedImg = img.resize(inputWidth, inputHeight);\nconst tensor = new ov.Tensor(ov.element.f32, inputLayer.shape, new Float32Array(resizedImg.rgb));\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Do inference"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const inferRequest = compiledModel.createInferRequest();\nconst result = await inferRequest.inferAsync([tensor]);\n\nconst outputData = result[outputLayer].data;\nconst resultIndex = outputData.indexOf(Math.max(...outputData));\n"
            ],
            "outputs": []
        },
        {
            "language": "markdown",
            "source": [
                "## Display result based on maximum probability"
            ],
            "outputs": []
        },
        {
            "language": "javascript",
            "source": [
                "const imagenetClassesMap = require('../../assets/datasets/imagenet_class_index.json');\nconst imagenetClasses = ['background', ...Object.values(imagenetClassesMap)];\n\nconsole.log(`Result: ${imagenetClasses[resultIndex][1]}`);\n"
            ],
            "outputs": []
        }
    ]
}