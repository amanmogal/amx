trigger:
  branches:
    include:
    - 'master'
    - 'releases/*'
  paths:
    exclude:
    - '*/docs/*'
    - 'docs/*'
    - '*/*.md'
    - '*.md'
    - '*/layer_tests_summary/*'
    - '*/conformance/*'
    - 'tools/*'
    - 'tests/layer_tests/*'

pr:
  drafts: 'false'
  branches:
    include:
    - 'master'
    - 'releases/*'
  paths:
    exclude:
    - '*/docs/*'
    - 'docs/*'
    - '*/*.md'
    - '*.md'
    - '*/layer_tests_summary/*'
    - '*/conformance/*'
    - 'tools/*'
    - 'tests/layer_tests/*'

variables:
  - group: github

jobs:
- job: linux_arm64
  # About 150% of total time
  timeoutInMinutes: '120'

  pool:
    name: LIN_VMSS_VENV_F16S_U20_WU2

  variables:
    system.debug: true
    VSTS_HTTP_RETRY: 5
    VSTS_HTTP_TIMEOUT: 200
    NUM_PROC: 2
    BUILD_TYPE: Release
    OPENVINO_REPO_DIR: $(Build.Repository.LocalPath)
    BUILD_OPENVINO: $(WORK_DIR)/build
    INSTALL_OPENVINO: $(WORK_DIR)/install_openvino
    WORK_DIR: $(Pipeline.Workspace)/_w
    SHARE_DIR: /mount/cinfsshare/onnxtestdata
    TMP_DIR: /mnt/tmp
    OPENVINO_CCACHE_DIR: $(SHARE_DIR)/ccache/master/linux_arm64
    LD_LIBRARY_PATH: $(Agent.ToolsDirectory)/Python/$(OV_PYTHON_VERSION)/x64/lib
    OV_PYTHON_VERSION: 3.11.2 # Full version of Python its required for LD_LIBRARY_PATH. More details https://github.com/microsoft/azure-pipelines-tool-lib/blob/master/docs/overview.md#tool-cache

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(OV_PYTHON_VERSION)' # Setting only major & minor version will download latest release from GH repo example 3.10 will be 3.10.10. 
      addToPath: true
      disableDownloadFromRegistry: false
      architecture: 'x64'
      githubToken: $(auth_token)
    displayName: Setup Python 3.11
    name: setupPython
  - bash: |
      #!/bin/bash
      python -V

  - script: |
      curl -H Metadata:true --noproxy "*" "http://169.254.169.254/metadata/instance?api-version=2019-06-01"
      whoami
      uname -a
      echo Python3 info ; which python3 ; python3 --version
      echo Python info ; which python ; python --version
      echo Java info ; which java ; java -version
      echo gcc info ; which gcc ; gcc --version
      echo cmake info ; which cmake ; cmake --version
      lsb_release
      env
      cat /proc/cpuinfo
      cat /proc/meminfo
      cat /etc/fstab
      vmstat -s
      df
      lsblk -o NAME,HCTL,SIZE,MOUNTPOINT | grep -i "sd"
      free -h
      echo "##vso[task.setvariable variable=NUM_PROC]$(nproc --all)"
      echo "NUM_PROC=$(NUM_PROC)"
    displayName: 'System information'

  - script: |
      rm -rf $(WORK_DIR) ; mkdir $(WORK_DIR)
      mkdir -p $(BUILD_OPENVINO)
      mkdir -p $(INSTALL_OPENVINO)
      sudo rm -rf $(TMP_DIR) ; sudo mkdir $(TMP_DIR) ; sudo chmod 777 -R $(TMP_DIR)
      sudo mkdir -p $(SHARE_DIR)
      sudo apt --assume-yes update && sudo apt --assume-yes install nfs-common
      sudo mount -vvv -t nfs cinfsshare.file.core.windows.net:/cinfsshare/onnxtestdata $(SHARE_DIR) -o vers=4,minorversion=1,sec=sys
      mkdir -p $(OPENVINO_CCACHE_DIR)
    displayName: 'Make directories'

  - checkout: self
    clean: 'true'
    path: openvino

  - script: |
      set -e
      python3 -m pip install --upgrade pip
      python3 -m pip install -r $(OPENVINO_REPO_DIR)/src/bindings/python/requirements.txt
      python3 -m pip install -r $(OPENVINO_REPO_DIR)/src/bindings/python/wheel/requirements-dev.txt
      # install dependencies needed to build CPU plugin for ARM
      sudo -E apt --assume-yes install scons gcc-10-aarch64-linux-gnu g++-10-aarch64-linux-gnu
      # generic dependencies
      sudo -E apt --assume-yes install cmake ccache ninja-build unzip
    displayName: 'Install dependencies'

  - script: |
      git submodule update --init -- $(OPENVINO_REPO_DIR)/src/plugins
      git submodule update --init -- $(OPENVINO_REPO_DIR)/thirdparty/gtest
    displayName: 'Init submodules for non Conan dependencies'

  - script: |
      python3 -m pip install conan
      # install build profile compilers
      sudo -E apt --assume-yes install gcc g++
      # generate build profile
      conan profile detect
      # generate host profile for linux_arm64
      echo "include(default)" > $(BUILD_OPENVINO)/linux_arm64
      echo "[buildenv]" >> $(BUILD_OPENVINO)/linux_arm64
      echo "CC=aarch64-linux-gnu-gcc-10" >> $(BUILD_OPENVINO)/linux_arm64
      echo "CXX=aarch64-linux-gnu-g++-10" >> $(BUILD_OPENVINO)/linux_arm64
      # install OpenVINO dependencies
      export CMAKE_CXX_COMPILER_LAUNCHER=ccache
      export CMAKE_C_COMPILER_LAUNCHER=ccache
      conan install $(OPENVINO_REPO_DIR)/conanfile.txt \
        -pr:h $(BUILD_OPENVINO)/linux_arm64 \
        -s:h arch=armv8 \
        -of $(BUILD_OPENVINO) \
        -b missing
    env:
      CCACHE_DIR: $(OPENVINO_CCACHE_DIR)
      CCACHE_TEMPDIR: $(TMP_DIR)/ccache
      CCACHE_BASEDIR: $(Pipeline.Workspace)
      CCACHE_MAXSIZE: 50G
    displayName: 'Install conan and dependencies'

  - script: |
      source $(BUILD_OPENVINO)/conanbuild.sh
      cmake \
        -G Ninja \
        -DCMAKE_VERBOSE_MAKEFILE=ON \
        -DBUILD_SHARED_LIBS=ON \
        -DCMAKE_COMPILE_WARNING_AS_ERROR=ON \
        -DENABLE_CPPLINT=OFF \
        -DENABLE_PYTHON=OFF \
        -DENABLE_TESTS=ON \
        -DENABLE_DATA=OFF \
        -DENABLE_SYSTEM_TBB=ON \
        -DENABLE_SYSTEM_PROTOBUF=ON \
        -DENABLE_SYSTEM_SNAPPY=ON \
        -DENABLE_SYSTEM_PUGIXML=ON \
        -DCMAKE_TOOLCHAIN_FILE=$(BUILD_OPENVINO)/conan_toolchain.cmake \
        -DCMAKE_CXX_COMPILER_LAUNCHER=ccache \
        -DCMAKE_C_COMPILER_LAUNCHER=ccache \
        -DARM_COMPUTE_SCONS_JOBS=$(NUM_PROC) \
        -DCMAKE_INSTALL_PREFIX=$(INSTALL_OPENVINO) \
        -DCMAKE_BUILD_TYPE=$(BUILD_TYPE) \
        -S $(OPENVINO_REPO_DIR) \
        -B $(BUILD_OPENVINO)
      source $(BUILD_OPENVINO)/deactivate_conanbuild.sh
    displayName: 'CMake configure'

  - script: cmake --build $(BUILD_OPENVINO) --parallel --config $(BUILD_TYPE)
    env:
      CCACHE_DIR: $(OPENVINO_CCACHE_DIR)
      CCACHE_TEMPDIR: $(TMP_DIR)/ccache
      CCACHE_BASEDIR: $(Pipeline.Workspace)
      CCACHE_MAXSIZE: 50G
    displayName: 'Build OpenVINO Runtime'

  - script: cmake --build $(BUILD_OPENVINO) --parallel --config $(BUILD_TYPE) --target install
    displayName: 'Install OpenVINO Runtime'

  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: $(Build.ArtifactStagingDirectory)
      ArtifactName: 'openvino_aarch64_linux'
    displayName: 'Publish OpenVINO Runtime for ARM'
