trigger:
  branches:
    include:
    - master
    - releases/*
  paths:
    exclude:
    - docs/*

resources:
  repositories:
  - repository: testdata
    type: github
    endpoint: openvinotoolkit
    name: openvinotoolkit/testdata

jobs:
- job: LinCC
  # About 150% of total time
  timeoutInMinutes: 90

  pool:
    name: LIN_VMSS_VENV_F16S_U20_WU2

  variables:
    system.debug: true
    VSTS_HTTP_RETRY: 5
    VSTS_HTTP_TIMEOUT: 200
    BUILD_TYPE: Release
    REPO_DIR: $(Build.Repository.LocalPath)
    OPENVINO_CONTRIB_REPO_DIR: $(REPO_DIR)/../openvino_contrib
    MODELS_PATH: $(REPO_DIR)/../testdata
    WORK_DIR: $(Pipeline.Workspace)/_w
    BUILD_DIR: $(WORK_DIR)/build
    BUILD_DIR_2: $(WORK_DIR)/build_s
    INSTALL_DIR: $(WORK_DIR)/install_pkg
    SETUPVARS: $(INSTALL_DIR)/setupvars.sh

  steps:
  - script: |
      curl -H Metadata:true --noproxy "*" "http://169.254.169.254/metadata/instance?api-version=2019-06-01"
      whoami
      uname -a
      echo Python3 info ; which python3 ; python3 --version
      echo Python info ; which python ; python --version
      echo Java info ; which java ; java -version
      echo gcc info ; which gcc ; gcc --version
      echo cmake info ; which cmake ; cmake --version
      lsb_release
      env
      cat /proc/cpuinfo
      cat /proc/meminfo
      cat /etc/fstab
      vmstat -s
      df
      lsblk -o NAME,HCTL,SIZE,MOUNTPOINT | grep -i "sd"
      free -h
    displayName: 'System info'

  - script: |
      rm -rf $(WORK_DIR) ; mkdir $(WORK_DIR)
      rm -rf $(BUILD_DIR) ; mkdir $(BUILD_DIR)
    displayName: 'Make dir'

  - checkout: self
    clean: true
    lfs: false
    submodules: recursive
    path: openvino

  - script: |
      set -e
      $(REPO_DIR)/install_build_dependencies.sh
      python3 -m pip install -r $(REPO_DIR)/src/bindings/python/src/compatibility/openvino/requirements.txt
      # Speed up build
      wget https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-linux.zip
      unzip ninja-linux.zip
      sudo cp -v ninja /usr/local/bin/
    workingDirectory: $(WORK_DIR)
    displayName: 'Install dependencies'

  - checkout: testdata
    clean: true
    lfs: true
    path: testdata

  - task: CMake@1
    inputs:
      cmakeArgs: >
        -GNinja
        -DVERBOSE_BUILD=ON
        -DCMAKE_BUILD_TYPE=$(BUILD_TYPE)
        -DENABLE_FASTER_BUILD=ON
        -DENABLE_PROFILING_ITT=ON
        -DSELECTIVE_BUILD=COLLECT
        $(REPO_DIR)
      workingDirectory: $(BUILD_DIR)

  - script: |
      ninja
      cmake --build . --target sea_itt_lib
    workingDirectory: $(BUILD_DIR)
    displayName: 'Build LinCC COLLECT'

  - script: ls -alR $(REPO_DIR)/bin/
    displayName: 'List bin files'

  - script: |
      python3 thirdparty/itt_collector/runtool/sea_runtool.py --bindir $(REPO_DIR)/bin/intel64/Release/lib -o $(BUILD_DIR)/itt_stat ! $(REPO_DIR)/bin/intel64/Release/benchmark_app -niter 1 -nireq 1 -m $(MODELS_PATH)/models/test_model/test_model_fp32.xml
    workingDirectory: $(REPO_DIR)
    displayName: 'Code usage analysis'

  - task: CMake@1
    inputs:
      cmakeArgs: >
        -GNinja
        -DVERBOSE_BUILD=ON
        -DCMAKE_BUILD_TYPE=$(BUILD_TYPE)
        -DENABLE_FASTER_BUILD=ON
        -DENABLE_PROFILING_ITT=OFF
        -DSELECTIVE_BUILD=ON
        -DSELECTIVE_BUILD_STAT=$(BUILD_DIR)/*.csv
        $(REPO_DIR)
      workingDirectory: $(BUILD_DIR_2)

  - script: cmake --build .
    workingDirectory: $(BUILD_DIR_2)
    displayName: 'Build LinCC ON'

  - script: ls -alR $(REPO_DIR)/bin/
    displayName: 'List bin files ON'

